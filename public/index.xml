<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jam Polintan</title>
    <link>https://jamvie.net/</link>
    <description>Recent content on Jam Polintan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC Attribution-NonCommercial 4.0 International License</copyright>
    <lastBuildDate>Sun, 23 Aug 2020 17:35:14 -0600</lastBuildDate>
    
	<atom:link href="https://jamvie.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GoogleCTF 2020: Pasteurize</title>
      <link>https://jamvie.net/posts/2020/08/googlectf-2020-pasteurize/</link>
      <pubDate>Sun, 23 Aug 2020 17:35:14 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2020/08/googlectf-2020-pasteurize/</guid>
      <description>This is the first challenge I worked on. I will soon upload a post on the second one. (As GoogleCTF 2020 ended on the day of this post, I will be omitting the flag from this article. I will update it once enough time has passed.)
Let&amp;rsquo;s Begin! The challenge lets us load into the DOM whatever we want through this pastebin-esque function.
When you make a note, you have an option to share it with a &amp;ldquo;TjMike&amp;rdquo; Entity.</description>
    </item>
    
    <item>
      <title>HacktivityCon CTF: Bullseye</title>
      <link>https://jamvie.net/posts/2020/08/hacktivitycon-ctf-bullseye/</link>
      <pubDate>Sun, 09 Aug 2020 18:48:52 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2020/08/hacktivitycon-ctf-bullseye/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s clear to see from the content of my blog that my expertise lies in web-based exploits.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cross-Site Request Forgery: Introduction</title>
      <link>https://jamvie.net/posts/2020/07/cross-site-request-forgery-introduction/</link>
      <pubDate>Mon, 27 Jul 2020 19:07:51 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2020/07/cross-site-request-forgery-introduction/</guid>
      <description>Cross-Site Request Forgery is a common and prolific exploit that takes advantage of sessional cookies that browsers automatically allocate to HTTP requests - and they&amp;rsquo;re the reason you shouldn&amp;rsquo;t click suspicious links, even if the URL sort of sounds legitimate.
This is a discussion on the importance of protecting against such attacks, and to demystify the unknowns that many people have about the exploit in general. I will be using my solution for two challenges I did in the past to help explain my points - the writeups for which you can consult here as well.</description>
    </item>
    
    <item>
      <title>Cryptography and P vs. NP: A Basic Outline</title>
      <link>https://jamvie.net/posts/2020/07/cryptography-and-p-vs.-np-a-basic-outline/</link>
      <pubDate>Tue, 14 Jul 2020 00:22:00 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2020/07/cryptography-and-p-vs.-np-a-basic-outline/</guid>
      <description>Comic from XKCD.
I am not an expert in either cryptography nor algorithm analysis. However, ever since a very rewarding advanced algorithm analysis class, one question has always dwelled in my mind: what would &amp;ldquo;P=NP&amp;rdquo; mean for cryptography? I had heard that such a statement, &amp;ldquo;P=NP&amp;rdquo; is controversial in the world of security. Learning about algorithm complexity has certainly shed quite a bit of light on the topic. As a cybersecurity researcher, I was compelled to satisfy my curiosity and answer that question for myself.</description>
    </item>
    
    <item>
      <title>RedPwnCTF 2020, Part 3</title>
      <link>https://jamvie.net/posts/2020/07/redpwnctf-2020-part-3/</link>
      <pubDate>Thu, 02 Jul 2020 01:56:16 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2020/07/redpwnctf-2020-part-3/</guid>
      <description>Part 3 of my writeup series for RedPwnCTF 2020! I checked out the web challenge known as &amp;ldquo;Viper&amp;rdquo;.
Let&amp;rsquo;s Begin! Snakes are my favourite animal. And now, you can easily create ASCII-text snakes with the handy services provided by RedPwn:
When we create our viper, its name is its viperId, which is a UUID.
The source code is available for us in this challenge as well. The main file, server.js, defines multiple endpoints - but the one that caught my eye immediately was GET /admin/create.</description>
    </item>
    
  </channel>
</rss>