<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>instructional on Jam ⇆ Vie</title>
    <link>https://jamvie.net/categories/instructional/</link>
    <description>Recent content in instructional on Jam ⇆ Vie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Jan 2021 12:04:52 -0700</lastBuildDate><atom:link href="https://jamvie.net/categories/instructional/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Common Web Exploits: A Guide for Recon</title>
      <link>https://jamvie.net/posts/2021/01/common-web-exploits-a-guide-for-recon/</link>
      <pubDate>Tue, 26 Jan 2021 12:04:52 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/01/common-web-exploits-a-guide-for-recon/</guid>
      <description>This is mainly used as a helpful recon guide to determine what vulnerabilities are available to you as an ethical hacker or CTFer. I&amp;rsquo;ve spent quite a bit of time researching these vulnerabilities and spotting their telltale signs, and I hope to share them here. These are common or more unique vulnerabilities that I have seen, executed, and researched while doing CTFs.
Disclaimer: This article is not exhaustive, and is not intended to replace any research you would perform on your own.</description>
    </item>
    
    <item>
      <title>Insecure Deserialization: Introduction</title>
      <link>https://jamvie.net/posts/2020/12/insecure-deserialization-introduction/</link>
      <pubDate>Tue, 22 Dec 2020 14:38:40 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2020/12/insecure-deserialization-introduction/</guid>
      <description>Insecure deserialization is a prolific vulnerability that provides a pretty straightforward gateway into unintended RCE - if you&amp;rsquo;re not careful. As of late, I&amp;rsquo;ve seen more and more CTFs employ this bug, and more real-word bug bounties deal with this kind of exploit. I figure I could provide a quick introduction into them, and hopefully ensure a few people secure their applications from this.
Context What Even is Serialization? My CPSC210 class I learned the fundamentals of object-oriented programming and the concept of complex abstractions above simple data structures: From simple arrays to instances of objects or classes, with fields and properties holding specific type values.</description>
    </item>
    
    <item>
      <title>Cross-Site Request Forgery: Introduction</title>
      <link>https://jamvie.net/posts/2020/07/cross-site-request-forgery-introduction/</link>
      <pubDate>Mon, 27 Jul 2020 19:07:51 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2020/07/cross-site-request-forgery-introduction/</guid>
      <description>Cross-Site Request Forgery is a common and prolific exploit that takes advantage of sessional cookies that browsers automatically allocate to HTTP requests - and they&amp;rsquo;re the reason you shouldn&amp;rsquo;t click suspicious links, even if the URL sort of sounds legitimate.
This is a discussion on the importance of protecting against such attacks, and to demystify the unknowns that many people have about the exploit in general. I will be using my solution for two challenges I did in the past to help explain my points - the writeups for which you can consult here as well.</description>
    </item>
    
  </channel>
</rss>
