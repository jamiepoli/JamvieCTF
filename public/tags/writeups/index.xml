<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>writeups on Jam ⇆ Vie</title>
    <link>https://jamvie.net/tags/writeups/</link>
    <description>Recent content in writeups on Jam ⇆ Vie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Mar 2021 17:17:38 -0600</lastBuildDate>
    
	<atom:link href="https://jamvie.net/tags/writeups/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UTCTF 2021</title>
      <link>https://jamvie.net/posts/2021/03/utctf-2021/</link>
      <pubDate>Sun, 14 Mar 2021 17:17:38 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2021/03/utctf-2021/</guid>
      <description>Lightning Round The first few web challenges were pretty trivial so I&amp;rsquo;ll do super quick, 2-sentence descriptions on how to solve them.
Source it! Inspect source. You&amp;rsquo;ll find it.
Oinker Make an oink with the exact same content and realize that each oink has an allocated place in the webpage&amp;rsquo;s directory. (Example - inputting alert(1)l leads to oink endpoint 64). Go to \oink\2 to get the flag.
Fastfox (easy way) Intended (hard) solution was escalating a JIT bug, which I will definitely research more of so expect part 2 ;) but the easy way was determining what functions were available in the scope of Bob&amp;rsquo;s jsshell.</description>
    </item>
    
    <item>
      <title>DiceCTF 2021</title>
      <link>https://jamvie.net/posts/2021/02/dicectf-2021/</link>
      <pubDate>Sun, 07 Feb 2021 19:06:12 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/02/dicectf-2021/</guid>
      <description>Babier CSP The challenge takes after justCTF&amp;rsquo;s similarly named challenge. We&amp;rsquo;re given an index.js file:
const express = require(&amp;#39;express&amp;#39;); const crypto = require(&amp;#34;crypto&amp;#34;); const config = require(&amp;#34;./config.js&amp;#34;); const app = express() const port = process.env.port || 3000; const SECRET = config.secret; const NONCE = crypto.randomBytes(16).toString(&amp;#39;base64&amp;#39;); const template = name =&amp;gt; ` &amp;lt;html&amp;gt; ${name === &amp;#39;&amp;#39; ? &amp;#39;&amp;#39;: `&amp;lt;h1&amp;gt;${name}&amp;lt;/h1&amp;gt;`}&amp;lt;a href=&amp;#39;#&amp;#39; id=elem&amp;gt;View Fruit&amp;lt;/a&amp;gt; &amp;lt;script nonce=${NONCE}&amp;gt; elem.onclick = () =&amp;gt; { location = &amp;#34;/?</description>
    </item>
    
    <item>
      <title>justCTF[*] 2020 - A Collection of Web Problems</title>
      <link>https://jamvie.net/posts/2021/01/justctf-2020-a-collection-of-web-problems/</link>
      <pubDate>Sun, 31 Jan 2021 23:05:20 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/01/justctf-2020-a-collection-of-web-problems/</guid>
      <description>This last weekend was justCTF 2020 (delayed last year so it was held this year :P), held by justCatTheFish. Although I was focused between this and some other work, I was able to look through a few of the web challenges and will document them here.
Forgotten Name I found this on a total fluke. I wasn&amp;rsquo;t paying attention to the challenge much but the description was compelling:
I&amp;rsquo;m hesitant to attempt to nmap all known domains of justCatTheFish&amp;rsquo;s network, and so instead thought about the nature of their subdomains.</description>
    </item>
    
  </channel>
</rss>